function(add_futures_example EXAMPLE_PATH)
    string(REPLACE "/" "-" TARGET_NAME ${EXAMPLE_PATH})
    string(REPLACE ".cpp" "" TARGET_NAME ${TARGET_NAME})
    string(STRIP ${TARGET_NAME} TARGET_NAME)
    add_executable(${TARGET_NAME} ${EXAMPLE_PATH})
    target_link_libraries(${TARGET_NAME} futures-compiled)
    if (FUTURES_BUILD_TESTS)
        string(REPLACE "-" " " TEST_NAME ${TARGET_NAME})
        set(TEST_NAME "${TEST_NAME} as test")
        string(SUBSTRING ${TEST_NAME} 0 1 FIRST_LETTER)
        string(TOUPPER ${FIRST_LETTER} FIRST_LETTER)
        string(SUBSTRING ${TEST_NAME} 1 -1 THE_REST)
        set(TEST_NAME "${FIRST_LETTER}${THE_REST}")
        add_test(NAME "${TEST_NAME}" COMMAND ${TARGET_NAME})
    endif()
endfunction()

add_futures_example(quickstart/launching.cpp)
add_futures_example(quickstart/continuations.cpp)
add_futures_example(quickstart/conjunctions.cpp)
add_futures_example(quickstart/disjunctions.cpp)
add_futures_example(quickstart/algorithms.cpp)
add_futures_example(motivation/polling_continuation.cpp)
add_futures_example(adaptors/continuations.cpp)
add_futures_example(adaptors/continuations_unwrap.cpp)
add_futures_example(adaptors/conjunctions.cpp)
add_futures_example(adaptors/conjunctions_unwrap.cpp)
add_futures_example(adaptors/disjunctions.cpp)
add_futures_example(adaptors/disjunctions_unwrap.cpp)
add_futures_example(future_types/interoperability.cpp)
add_futures_example(future_types/launching.cpp)
add_futures_example(future_types/stoppable.cpp)
add_futures_example(future_types/shared.cpp)
add_futures_example(algorithm/algorithms.cpp)

add_executable(networking-echo_server networking/echo_server.cpp)
target_link_libraries(networking-echo_server futures-compiled)
