{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Because futures don't have to be awful</p> <p></p> <p></p> <ul> <li>A Future \ud83d\udd2e is a value to be available an operation fulfills its Promise \ud83e\udd1e.</li> </ul> <ul> <li>The Future/Promise model supports all operations required for async computing: queries, continuations, adaptors, and   algorithms.</li> </ul> <ul> <li>C++11 provides <code>std::future</code> but most implementations are useless for efficient applications.</li> </ul> <ul> <li>There are countless proposals to improve this C++11 component: continuations, cancellation, executors, and algorithms.</li> </ul> <ul> <li>This library provides a concept to integrate existing applications and new improved future types.</li> </ul> <ul> <li>This design allows the library to include generic algorithms, executors, adaptors, and custom extensions.</li> </ul> <p></p> <p></p> <p></p>"},{"location":"acknowledgments/","title":"Acknowledgments","text":"<p>We thank The C++ Alliance and all reviewers for supporting this library.</p>"},{"location":"acknowledgments/#contributors","title":"Contributors","text":"Alan De Freitas"},{"location":"acknowledgments/#references","title":"References","text":"<p>These are some references we used for this work:</p> <ul> <li>Async++</li> <li>Microsoft PPL Library</li> <li>Extensions for concurrency: ISO/IEC TS 19571:2016</li> <li>Folly Executors</li> </ul>"},{"location":"config_reference/","title":"Configuration","text":""},{"location":"config_reference/#cmake-options","title":"CMake Options","text":"<p>These are the options available when building the project with CMake:</p> Option Description Default <code>FUTURES_BUILD_INSTALLER</code> Build installer target <code>ON</code> if running CMake from the root directory <code>FUTURES_BUILD_PACKAGE</code> Build package <code>ON</code> if running CMake from the root directory <code>FUTURES_USE_FIND_PACKAGE</code> Do not use find_package to find dependencies <code>ON</code> if not crosscompiling <code>FUTURES_USE_FETCH_CONTENT</code> Do not use FetchContent to fetch dependencies <code>ON</code> if not crosscompiling <code>FUTURES_PREFER_STANDALONE_ASIO</code> Prefer standalone Asio if available <code>OFF</code> <code>FUTURES_PREFER_BOOST</code> Prefer Boost.Asio if available <code>OFF</code> <code>FUTURES_PREFER_BUNDLED</code> Prefer bundled dependencies <code>OFF</code> <code>FUTURES_BUILD_WITH_EXCEPTIONS</code> Add compiler flags to use exceptions if needed. <code>ON</code> <p>By setting these CMake options, the CMake <code>futures</code> target will already define whatever configuration macros are necessary.</p> <p>All dependencies are bundled. Whenever a dependency is not found, the bundled version is used.</p>"},{"location":"config_reference/#configuration-macros","title":"Configuration Macros","text":"<p>Set the following macros to define how the library is compiled.</p> Option Description <code>FUTURES_HAS_STANDALONE_ASIO</code> Macro used to indicate standalone asio is available. <code>FUTURES_HAS_BOOST</code> Macro used to indicate Boost is available. <code>FUTURES_PREFER_STANDALONE_ASIO</code> Macro used to indicate we prefer using standalone Asio over Boost.Asio. <code>FUTURES_PREFER_BOOST</code> Macro used to indicate we prefer using Boost.Asio over standalone Asio. <code>FUTURES_SEPARATE_COMPILATION</code> Use separately compiled source code for implementation. <code>FUTURES_NO_EXCEPTIONS</code> Macro used to disable exception handling. <code>FUTURES_CUSTOM_EXCEPTION_HANDLE</code> Customize exception handling."},{"location":"config_reference/#cmake-developer-options","title":"CMake Developer Options","text":"<p>The following options are available only when building the library in developer mode:</p> Option Description Default <code>FUTURES_DEVELOPER_MODE</code> Enable developer mode <code>OFF</code> <code>BUILD_SHARED_LIBS</code> Build shared libs. <code>OFF</code> <code>FUTURES_BUILD_TESTS</code> Build tests <code>ON</code> <code>FUTURES_BUILD_SINGLE_TARGET_TESTS</code> Build tests <code>OFF</code> <code>FUTURES_BUILD_EXAMPLES</code> Build examples <code>ON</code> <code>FUTURES_BUILD_DOCS</code> Build documentation <code>OFF</code> <code>FUTURES_BUILD_COVERAGE_REPORT</code> Enable coverage support <code>OFF</code> <code>FUTURES_BUILD_LINT</code> Enable linting <code>OFF</code> <code>FUTURES_BUILD_LINTER</code> Build C++ project linter <code>ON</code> <code>FUTURES_ALWAYS_LINT</code> Run the linter before running unit tests <code>ON</code> if not compiling with MSVC <code>FUTURES_PEDANTIC_WARNINGS</code> Use pedantic warnings. <code>ON</code> <code>FUTURES_WARNINGS_AS_ERRORS</code> Treat warnings as errors. <code>ON</code> <code>FUTURES_SANITIZERS</code> Build with sanitizers. <code>ON</code> if compiling in Debug mode <code>FUTURES_THREAD_SANITIZER</code> Use thread sanitizer instead of other sanitizers. <code>OFF</code> <code>FUTURES_CATCH2_REPORTER</code> Reporter Catch2 should use when invoked from ctest. <code>console</code> <code>FUTURES_TESTS_SMALL_POOL</code> Run tests with a default thread pool of size 1. <code>OFF</code> <code>FUTURES_TIME_TRACE</code> Enable clang time-trace. <code>ON</code> <code>FUTURES_BUILD_WITH_UTF8</code> Accept utf-8 in MSVC by default. <code>ON</code>"},{"location":"config_reference/#macros","title":"Macros","text":"<p>Public configuration macros. </p> <p>This file defines public configuration macros. These are the macros the user is allowed to define to change how the library is compiled. </p>"},{"location":"config_reference/#futures_has_standalone_asio","title":"FUTURES_HAS_STANDALONE_ASIO","text":"<pre><code>#define FUTURES_HAS_STANDALONE_ASIO\n</code></pre> <p>Macro used to indicate standalone asio is available. </p> <p>Description</p> <p>This macro can be defined to indicate the standalone version of Asio is available.</p> <p>If both the standalone and the Boost versions of Asio are available, the standalone version is preferred unless <code>FUTURES_PREFER_BOOST</code> is defined.</p> <p>If both the standalone and the Boost versions of Asio are unavailable, a bundled version of the subset of Asio required by library is used.</p> <p>Default value</p> <p>In C++17, this macro is determined by the availability of the <code>asio.hpp</code> header.</p> <p>When using the CMake package, the <code>futures</code> target will already define this macro if appropriate.</p> <p>In all other cases, the macro is undefined by default. If standalone Asio is available, it should be defined manually.</p> <p>References</p> <ul> <li>Asio </li> </ul>"},{"location":"config_reference/#futures_has_boost","title":"FUTURES_HAS_BOOST","text":"<pre><code>#define FUTURES_HAS_BOOST\n</code></pre> <p>Macro used to indicate Boost is available. </p> <p>Description</p> <p>This macro can be defined to indicate that Boost is available as a dependency.</p> <p>If both the standalone and the Boost versions of Asio are available, the standalone version is preferred unless <code>FUTURES_PREFER_BOOST</code> is defined.</p> <p>If both the standalone and the Boost versions of Asio are unavailable, a bundled version of the subset of Boost required by library is used.</p> <p>Default value</p> <p>In C++17, this macro is determined by the availability of the <code>asio.hpp</code> header.</p> <p>When using the CMake package, the <code>futures</code> target will already define this macro if appropriate.</p> <p>In all other cases, the macro is undefined by default. If standalone Asio is available, it should be defined manually.</p> <p>References</p> <ul> <li>Boost </li> </ul>"},{"location":"config_reference/#futures_prefer_standalone_asio","title":"FUTURES_PREFER_STANDALONE_ASIO","text":"<pre><code>#define FUTURES_PREFER_STANDALONE_ASIO\n</code></pre> <p>Macro used to indicate we prefer using standalone Asio over Boost.Asio. </p> <p>Description</p> <p>This macro can be defined to indicate that we should prefer standalone Asio over Boost whenever standalone Asio is available.</p> <p>If both the standalone and the Boost versions of Asio are available, this macro ensure the standalone version is used.</p> <p>The availability of standalone Asio and Boost.Asio can be indicated with the <code>FUTURES_HAS_STANDALONE_ASIO</code> and <code>FUTURES_HAS_BOOST</code> macros.</p> <p>Default value</p> <p>In C++17, this macro is defined whenever <code>FUTURES_HAS_STANDALONE_ASIO</code> is defined and <code>FUTURES_PREFER_BOOST</code> is undefined.</p> <p>When using the CMake package, the <code>futures</code> target will already define this macro when standalone Asio is available.</p> <p>In all other cases, the macro is undefined by default. If standalone Asio is available, it should be defined manually.</p> <p>If both <code>FUTURES_HAS_STANDALONE_ASIO</code> and <code>FUTURES_HAS_BOOST</code> are undefined, a bundled subset of Boost dependencies required by the library is used.</p> <p>References</p> <ul> <li> <p>Asio </p> </li> <li> <p>Boost </p> </li> </ul>"},{"location":"config_reference/#futures_prefer_boost","title":"FUTURES_PREFER_BOOST","text":"<pre><code>#define FUTURES_PREFER_BOOST\n</code></pre> <p>Macro used to indicate we prefer using Boost.Asio over standalone Asio. </p> <p>Description</p> <p>This macro can be defined to indicate that we should prefer Boost.Asio over standalone Asio over Boost whenever standalone Boost is available.</p> <p>If both the standalone and the Boost versions of Asio are available, this macro ensure the Boost version is used.</p> <p>The availability of standalone Asio and Boost.Asio can be indicated with the <code>FUTURES_HAS_STANDALONE_ASIO</code> and <code>FUTURES_HAS_BOOST</code> macros.</p> <p>Default value</p> <p>In C++17, this macro is defined whenever <code>FUTURES_HAS_BOOST</code> is defined and <code>FUTURES_PREFER_STANDALONE_ASIO</code> is undefined.</p> <p>When using the CMake package, the <code>futures</code> target will already define this macro when standalone Asio is unavailable.</p> <p>In all other cases, the macro is undefined by default. If Boost is available, it should be defined manually.</p> <p>If both <code>FUTURES_HAS_STANDALONE_ASIO</code> and <code>FUTURES_HAS_BOOST</code> are undefined, a bundled subset of Boost dependencies required by the library is used.</p> <p>References</p> <ul> <li> <p>Asio </p> </li> <li> <p>Boost </p> </li> </ul>"},{"location":"config_reference/#futures_separate_compilation","title":"FUTURES_SEPARATE_COMPILATION","text":"<pre><code>#define FUTURES_SEPARATE_COMPILATION\n</code></pre> <p>Use separately compiled source code for implementation. </p> <p>Description</p> <p>By default, Futures is a header-only library.</p> <p>To reduce compile times, users can also build the library using separately compiled source code.</p> <p>If the library is integrated with CMake, the appropriate macros should already define the appropriate macros for separate compilation.</p> <p>To do this without a build system, add <code>#include &lt;futures/impl/src.hpp&gt;</code> to one (and only one) source file of your program, then build the program with <code>FUTURES_SEPARATE_COMPILATION</code> defined in the project\\/compiler settings.</p> <p>When using this library with Asio, this option is independent of the <code>ASIO_SEPARATE_COMPILATION</code> or <code>BOOST_ASIO_SEPARATE_COMPILATION</code> options. <code>FUTURES_SEPARATE_COMPILATION</code> only implies in <code>BOOST_ASIO_SEPARATE_COMPILATION</code> when both standalone Asio and Boost.Asio are unavailable and the bundled version of Asio is used. </p>"},{"location":"config_reference/#futures_no_exceptions","title":"FUTURES_NO_EXCEPTIONS","text":"<pre><code>#define FUTURES_NO_EXCEPTIONS\n</code></pre> <p>Macro used to disable exception handling. </p> <p>Description</p> <p>This macro can be defined to indicate that the library should not throw exceptions.</p> <p>When exceptions are disabled, the library might call <code>std::terminate</code> or a user-defined function.</p> <p>Default value</p> <p>The macro will be automatically defined if lack of exception support is detected.</p> <p><code>FUTURES_CUSTOM_EXCEPTION_HANDLE</code> </p>"},{"location":"config_reference/#futures_custom_exception_handle","title":"FUTURES_CUSTOM_EXCEPTION_HANDLE","text":"<pre><code>#define FUTURES_CUSTOM_EXCEPTION_HANDLE\n</code></pre> <p>Customize exception handling. </p> <p>Description</p> <p>If <code>FUTURES_NO_EXCEPTIONS</code> is defined, this macro can be defined to indicate that the library should use a custom user function to handle exceptions.</p> <p>The function <code>futures::handle_exception</code> should be defined to determine how exceptions will be handled.</p> <p>Default value</p> <p>This macro is undefined by default. </p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#roadmap","title":"Roadmap \ud83d\udee3","text":"<ul> <li>Additional future types and options</li> <li>Additional future adaptors</li> <li>Additional algorithms</li> <li>Additional executors</li> <li>Additional networking facilities</li> </ul>"},{"location":"contributing/#guidelines","title":"Guidelines \ud83d\udcd0","text":"<ul> <li>Discussions: Discussions are concentrated on our GitHub discussions page. Don't refrain from asking questions and proposing ideas. If this library helps you create something interesting, please divulge it with the community.</li> <li>Sharing Ideas: If you are a programmer with good ideas, please share these ideas with us.</li> <li>Academic collaboration is more than welcome. It'd be great to see this library help people write papers.</li> </ul>"},{"location":"contributing/#developer-mode","title":"Developer mode \ud83d\udc68\u200d\ud83d\udcbb","text":"<p>Build system targets that are only useful for developers of this project are hidden if the <code>FUTURES_DEVELOPER_MODE</code> CMake option is disabled. Enabling this option makes tests and other developer targets and options available. </p> <p>Not enabling this option means that you are a consumer of this project, and thus you have no need for these targets and options.</p>"},{"location":"contributing/#prs","title":"PRs \ud83d\udca1","text":"<p>Feel free to contribute new features to this library. For complex features and changes, consider getting feedback from the community first. Contributing to an existing code base with its conventions might seem obscure at first but please don't let that discourage you from sharing your ideas.</p> <p>There are many ways in which you can contribute to this library:</p> <ul> <li>Testing the library in new environments see 1, 2, 3 </li> <li>Contributing with interesting examples see 1</li> <li>Finding problems in this documentation see 1 </li> <li>Finding bugs in general see 1, 2, 3, 4 </li> <li>Whatever idea seems interesting to you</li> </ul>"},{"location":"contributing/#constructive-con","title":"Constructive con","text":"<p>The only thing we ask you is to make sure your contribution is not destructive. Some contributions in which we are not interested are:</p> <ul> <li>\"I don't like this optional feature, so I removed/deprecated it\"</li> <li>\"I removed this feature to support older versions of C++\" but have not provided an equivalent alternative</li> <li>\"I removed this feature, so I don't have to install/update ______\" but have not provided an equivalent alternative</li> <li>\"I'm creating this high-cost promise that we'll support __ forever\" but I'm not sticking around to keep that promise</li> </ul> <p>In doubt, please open a discussion first</p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#integration","title":"Integration \ud83d\udcbb","text":"Header-onlyCompiledCMakePackagesFrom source <p> <p></p> </p> <p>To use the library as header-only, copy the <code>futures</code> subdirectory from <code>include</code> directory into your project.</p> <p>The <code>&lt;futures/futures.hpp&gt;</code> file includes the whole library as header-only:</p> <pre><code>#include &lt;futures/futures.hpp&gt;\n</code></pre> <p>However, as you read the documentation, we recommend including only the headers for the features you are using, such as:</p> <pre><code>#include &lt;futures/launch.hpp&gt;\n</code></pre> <p>If the <code>futures</code> directory is not placed with your other headers files for your project, you can create a target that also looks for headers in other directories. In CMake, this can be  achieved with:</p> <pre><code>add_executable(application main.cpp)\ntarget_include_directories(application PRIVATE path/to/futures/include)\n\nfind_package(Threads)\ntarget_link_libraries(application PRIVATE ${CMAKE_THREAD_LIBS_INIT})\n\ntarget_compile_features(application PRIVATE cxx_std_14)\n</code></pre> <p> <p></p> </p> <p>To manually use it as a compiled library, define the macro <code>FUTURES_SEPARATE_COMPILATION</code> and  include the following header in exactly one new or existing source file in your project:</p> <pre><code>#ifndef FUTURES_SEPARATE_COMPILATION\n#    define FUTURES_SEPARATE_COMPILATION\n#endif\n// In exactly *one* source file\n#include &lt;futures/impl/src.hpp&gt;\n</code></pre> <p>The macro must also be set before including any other sources files in the project.</p> <pre><code>#ifndef FUTURES_SEPARATE_COMPILATION\n#    define FUTURES_SEPARATE_COMPILATION\n#endif\n#include &lt;futures/launch.hpp&gt;\n</code></pre> <p>In general, it's easier to previously define this macro for any source file in the project. In CMake, this can be achieved with:</p> <pre><code>add_executable(application main.cpp futures-src.cpp)\ntarget_include_directories(application PRIVATE path/to/futures/include)\ntarget_compile_definitions(application PRIVATE FUTURES_SEPARATE_COMPILATION)\ntarget_compile_features(application PRIVATE cxx_std_14)\n\nfind_package(Threads)\ntarget_link_libraries(application PRIVATE ${CMAKE_THREAD_LIBS_INIT})\n</code></pre> <p>Check the reference for other available macros.</p> <p> <p></p> </p> <p>It's often easier to configure the project with CMake, where any required configurations will be applied automatically.</p> Add subdirectoryFetch contentExternal package <p>Download source:</p> <pre><code>git clone https://github.com/alandefreitas/futures/\n</code></pre> <p>Add add the source subdirectory in your CMake script:</p> <pre><code>add_subdirectory(path/to/futures ${CMAKE_CURRENT_BINARY_DIR}/_deps/futures)\nadd_executable(application main.cpp)\ntarget_link_libraries(application PRIVATE futures::futures)\n</code></pre> <p>Download and include the source directly from your CMake script:</p> <pre><code>include(FetchContent)\nFetchContent_Declare(futures\nGIT_REPOSITORY https://github.com/alandefreitas/futures\nGIT_TAG origin/master # or whatever tag you want\n)\nFetchContent_MakeAvailable(futures)\n</code></pre> <p>Link to your own binaries:</p> <pre><code>add_executable(application main.cpp)\ntarget_link_libraries(application PRIVATE futures::futures)\n</code></pre> <p>If you installed the library from source or with one of the packages, this project exports a CMake configuration script to be used with the <code>find_package</code>:</p> <pre><code>find_package(futures REQUIRED)\n</code></pre> <p>Or combine it with FetchContent:</p> <pre><code>include(FetchContent)\nfind_package(futures)\nif (NOT futures_FOUND)\nFetchContent_Declare(futures\nGIT_REPOSITORY https://github.com/alandefreitas/futures\nGIT_TAG origin/master # or whatever tag you want\n)\nFetchContent_MakeAvailable(futures)\nendif ()\n</code></pre> <p>Then link to your own binaries:</p> <pre><code>add_executable(application main.cpp)\ntarget_link_libraries(application PRIVATE futures::futures)\n</code></pre> <p>If the library not installed in one of the default directories for installed software,  such as <code>/usr/local</code>, you might need to set the <code>CMAKE_PREFIX_PATH</code> when running CMake: </p> <pre><code>cmake &lt;options&gt; -D CMAKE_PREFIX_PATH=path/that/contains/futures\n</code></pre> <p> <p></p> </p> <p>Get the binary packages from the release section. </p> <p>These binaries refer to the latest release version of futures.</p> <p>Hint</p> <p>If you need a more recent version of <code>futures</code>, you can download the binary packages from the CI artifacts or build the library from the source files.</p> <p> <p></p> </p> <p>We do not provide binary packages for all platforms. In that case, you can build the package from  source: </p> Windows + MSVCUbuntu + GCCMac Os + Clang <p>Build:            </p> <pre><code>cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_CXX_FLAGS=\"/O2\"\ncmake --build build --config Release\n</code></pre> <p>Install:</p> <pre><code>cmake --install build\n</code></pre> <p>Create packages:</p> <pre><code>cpack build\n</code></pre> <p>Packaging Debug and Release</p> <p>Use these instructions to setup CPack to bundle multiple build directories and construct a package that contains multiple configurations of the same project.</p> <p>Build:</p> <pre><code>cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_CXX_FLAGS=\"-O2\"\nsudo cmake --build build --config Release\n</code></pre> <p>Install:</p> <pre><code>sudo cmake --install build\n</code></pre> <p>Create packages:</p> <pre><code>sudo cpack build\n</code></pre> <p>Build:</p> <pre><code>cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_CXX_FLAGS=\"-O2\"\ncmake --build build --config Release\n</code></pre> <p>Install:</p> <pre><code>cmake --install build\n</code></pre> <p>Create packages:</p> <pre><code>cpack build\n</code></pre>"},{"location":"quickstart/#hello-world","title":"Hello world \ud83d\udc4b","text":""},{"location":"quickstart/#launching-futures","title":"Launching Futures","text":"Basic UsageCustom executorStop tokenDeferred senderInteroperation <pre><code>cfuture&lt;void&gt; f1 = async([] {\n// Task 1 in default executor: a thread pool\nlong_task();\n});\n\n// analogous to:\nstd::future&lt;void&gt; f2 = std::async([] {\n// Task 2 in a new thread provided by std::async.\nlong_task();\n});\n</code></pre> <pre><code>futures::thread_pool custom_pool(1);\nfutures::thread_pool::executor_type ex = custom_pool.get_executor();\nauto f3 = async(ex, [] {\n// Task 3 in a custom executor\nlong_task();\n});\n</code></pre> <pre><code>auto f4 = async(ex, [](stop_token st) {\nint a = 0;\nwhile (!st.stop_requested()) {\n++a;\n}\n// Task 4 stopped from another thread\nassert(a &gt;= 0);\n});\n// ...\nf4.request_stop();\n</code></pre> <pre><code>auto f5 = schedule([] {\n// Deferred task\nlong_task();\n});\n</code></pre> <pre><code>wait_for_all(f1, f2, f3, f4, f5);\nassert(f1.is_ready());\nassert(is_ready(f2));\nassert(f3.is_ready());\nassert(f4.is_ready());\nassert(f5.is_ready());\n</code></pre>"},{"location":"quickstart/#continuations","title":"Continuations","text":"BasicOperator&gt;&gt;Unwrapping parameters <pre><code>auto f1 = async([]() -&gt; int { return 42; });\nauto f1_cont = then(f1, [](int x) { return x * 2; });\nassert(f1_cont.get() == 84);\n</code></pre> <pre><code>auto f2 = std::async([]() -&gt; int { return 63; });\nauto f2_cont = f2 &gt;&gt; [](int x) {\nreturn x * 2;\n};\nassert(f2_cont.get() == 126);\n</code></pre> <pre><code>auto f3 = std::async([]() { return std::make_tuple(1, 2.5, 'c'); });\nauto f3_cont = f3 &gt;&gt; [](int x, double y, char z) {\nassert(x == 1);\nassert(y == 2.5);\nassert(z == 'c');\n};\nf3_cont.wait();\n</code></pre>"},{"location":"quickstart/#adaptors","title":"Adaptors","text":"ConjunctionsOperator&amp;&amp;Unwrap conjunctionDisjunctionsOperator||Disjunction observers <pre><code>auto f1 = futures::async([] { long_task(); });\nauto f2 = futures::async([] { long_task(); });\nauto f3 = futures::async([] { long_task(); });\nauto f4 = futures::async([] { long_task(); });\nauto f5 = futures::when_all(f1, f2, f3, f4);\nf5.wait();\n</code></pre> <pre><code>auto f6 = futures::async([] {\nlong_task();\nreturn 6;\n});\nauto f7 = futures::async([] {\nlong_task();\nreturn 7;\n});\nauto f8 = futures::async([] {\nlong_task();\nreturn 8;\n});\nauto f9 = f6 &amp;&amp; f7 &amp;&amp; f8;\n</code></pre> <pre><code>auto f10 = futures::then(f9, [](int a, int b, int c) {\nreturn a * b * c;\n});\nassert(f10.get() == 6 * 7 * 8);\n</code></pre> <pre><code>auto f1 = futures::async([]() -&gt; int { return 10; });\nauto f2 = futures::async([]() -&gt; int { return 11; });\nauto f3 = futures::async([]() -&gt; int { return 12; });\nauto f4 = futures::when_any(f1, f2, f3);\nauto f5 = futures::then(f4, [](int first_ready) {\nassert(first_ready &gt;= 10 &amp;&amp; first_ready &lt;= 12);\n});\nf5.wait();\n</code></pre> <pre><code>auto f6 = futures::async([]() -&gt; int { return 15; });\nauto f7 = futures::async([]() -&gt; int { return 16; });\nauto f8 = f6 || f7;\n</code></pre> <pre><code>auto r = f8.get();\nif (r.index == 0) {\nassert(std::get&lt;0&gt;(r.tasks).get() == 15);\n} else {\nassert(std::get&lt;1&gt;(r.tasks).get() == 16);\n}\n</code></pre>"},{"location":"quickstart/#algorithms","title":"Algorithms","text":"AlgorithmsCustom executorsCustom partitioners <pre><code>std::vector&lt;int&gt; v(50000);\nstd::iota(v.begin(), v.end(), 1);\nassert(futures::reduce(v, 0) == 1250025000);\n</code></pre> <pre><code>futures::thread_pool custom_pool(4);\nfutures::thread_pool::executor_type ex = custom_pool.get_executor();\nfutures::for_each(ex, v.begin(), v.begin() + 10, [](int x) {\nassert(x &gt;= 0 &amp;&amp; x &lt;= 50000);\n});\n</code></pre> <pre><code>auto halve = [](auto first, auto last) {\nreturn std::next(first, (last - first) / 2);\n};\nauto it = futures::find(ex, halve, v, 3000);\nif (it != v.end()) {\nassert(*it &gt;= 0 &amp;&amp; *it &lt;= 50000);\nstd::ptrdiff_t pos = it - v.begin();\nassert(pos &gt;= 0 &amp;&amp; pos &lt;= 50000);\n}\n</code></pre>"},{"location":"quickstart/#requirements","title":"Requirements","text":"<ul> <li>Requirements: C++14</li> <li>Tested compilers: MSVC 14.2, 14.3; GCC 5, 6, 7, 8, 9, 10, 11, 12; Clang 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14; AppleClang: 13</li> <li>Tested standards: C++20; C++17; C++14</li> </ul>"},{"location":"references/","title":"References","text":""},{"location":"adaptors/conjunctions/","title":"Conjunctions","text":""},{"location":"adaptors/conjunctions/#conjunctions_1","title":"Conjunctions","text":"<p>Like in C++ Extensions for Concurrency, the when_all function is defined for task conjunctions. Say we want to execute the following sequence of asynchronous tasks:</p>  graph LR subgraph Async A --&gt; B A --&gt; C B --&gt; D C --&gt; D end Main --&gt; A D --&gt; End Main --&gt; End  <p>Achieving that with the function when_all is as simple as:</p> Task graph with conjunction <pre><code>shared_cfuture&lt;int&gt; A = async([]() { return 2; }).share();\n\ncfuture&lt;int&gt; B = then(A, [](int a) { return a * 3; });\ncfuture&lt;int&gt; C = then(A, [](int a) { return a * 2; });\n\ncfuture&lt;int&gt; D = then(when_all(B, C), [](int b, int c) {\nreturn b + c;\n});\n\nassert(D.get() == 10);\n</code></pre> <p>The function when_all returns a when_all_future that is a future adaptor able to aggregate different futures types and become ready when all internal futures are ready.</p> Future conjunction <pre><code>auto f1 = async([]() { return 2; });\nauto f2 = async([]() { return 3.5; });\nauto f3 = async([]() -&gt; std::string { return \"name\"; });\nauto all = when_all(f1, f2, f3);\n</code></pre> <p>When retrieving results, a tuple with the original future objects is returned.</p> Conjunction as tuple <pre><code>auto [r1, r2, r3] = all.get(); // get ready futures\nassert(r1.get() == 2);\nassert(r2.get() == 3.5);\nassert(r3.get() == \"name\");\n</code></pre> <p>When a range is provided to when_all, another range is returned. The when_all_future object acts as a proxy object that checks the state of each internal future. If any of the internal futures isn't ready yet, is_ready returns <code>false</code>.</p> Future conjunction as range <pre><code>std::vector&lt;cfuture&lt;int&gt;&gt; fs;\nfs.emplace_back(async([]() { return 2; }));\nfs.emplace_back(async([]() { return 3; }));\nfs.emplace_back(async([]() { return 4; }));\nauto all = when_all(fs);\n\nauto rs = all.get();\nassert(rs[0].get() == 2);\nassert(rs[1].get() == 3);\nassert(rs[2].get() == 4);\n</code></pre>"},{"location":"adaptors/conjunctions/#operators","title":"Operators","text":"<p>The operator <code>&amp;&amp;</code> is defined as a convenience to create future conjunctions in large task graphs.</p> operator&amp;&amp; <pre><code>auto f1 = async([]() { return 2; });\nauto f2 = async([]() { return 3.5; });\nauto f3 = async([]() -&gt; std::string { return \"name\"; });\nauto all = f1 &amp;&amp; f2 &amp;&amp; f3;\n</code></pre> <p>With tuple unwrapping, this becomes a powerful tool to manage continuations:</p> Future conjunction as range <pre><code>auto f4 = then(all, [](int a, double b, std::string c) {\nassert(a == 2);\nassert(b == 3.5);\nassert(c == \"name\");\n});\n</code></pre> <p>Note that the operator <code>&amp;&amp;</code> uses expression templates to create a single conjunction of futures. Thus, <code>f1 &amp;&amp; f2 &amp;&amp; f3</code> is equivalent to <code>when_all(f1, f2, f3)</code> rather than <code>when_all(when_all(f1, f2), f3)</code>.</p> <p>The operator <code>&amp;&amp;</code> can also be used with lambdas as an easy way to launch new tasks already into conjunctions:</p> Lambda conjunction <pre><code>auto f1 = []() { return 2; } &amp;&amp;\n[]() { return 3.5; } &amp;&amp;\n[]() -&gt; std::string { return \"name\"; };\n\nauto f2 = then(f1, [](int a, double b, std::string c) {\nassert(a == 2);\nassert(b == 3.5);\nassert(c == \"name\");\n});\n</code></pre> <p>This makes lambdas a first class citizen when composing task graphs. The types accepted by these operators only participate in overload resolution if they match the future concept or are callables that are valid new asynchronous tasks. This avoids conflicts with operator overloads defined for other types.</p>"},{"location":"adaptors/conjunctions/#conjunction-unwrapping","title":"Conjunction unwrapping","text":"<p>The tuple unwrapping functions and especially double unwrapping are especially useful for when_all_future continuations.</p> Unwrap future conjunction <pre><code>auto f1 = async([]() { return 1; });\nauto f2 = async([]() { return 2; });\nauto f3 = async([]() { return 3; });\nauto f4 = async([]() { return 4; });\nauto f5 = when_all(f1, f2, f3, f4);\nauto f6 = f5 &gt;&gt; [](int a, int b, int c, int d) {\nreturn a + b + c + d;\n};\nassert(f6.get() == 1 + 2 + 3 + 4);\n</code></pre>"},{"location":"adaptors/continuations/","title":"Continuations","text":"<p>Continuations are the main primitive to assemble asynchronous task graphs. An instance of basic_future can have continuations, which allows us to create tasks chains.</p> <p>Say we want to execute the following sequence of asynchronous tasks:</p>  graph LR subgraph Async A --&gt; B --&gt; C end Main --&gt; A C --&gt; End Main --&gt; End  <p>Achieving that with the function then is as simple as:</p> Continuable futures <pre><code>cfuture&lt;int&gt; A = async([]() { return 65; });\ncfuture&lt;char&gt; B = A.then([](int v) {\nreturn static_cast&lt;char&gt;(v);\n});\ncfuture&lt;void&gt; C = then(B, [](char c) { assert(c == 'A'); });\nC.wait();\n</code></pre> <p>All instances of basic_future that support lazy continuations also have the member function basic_future::then. However, the free function then is used to create a continuation to any future, which is itself another future value.</p> Continuation to a continuable futureContinuation to a std::future <pre><code>cfuture&lt;int&gt; f1 = async([]() -&gt; int { return 42; });\ncfuture&lt;void&gt; f2 = then(f1, [](int x) {\n// Another task in the executor\nassert(x == 42);\n});\n</code></pre> <pre><code>std::future&lt;int&gt; f3 = std::async([]() -&gt; int { return 63; });\ncfuture&lt;void&gt; f4 = then(f3, [](int x) {\n// Another task in the default executor\nassert(x == 63);\n});\n</code></pre> <p>Continuation Function</p> <p>Only futures with lazy continuations have a basic_future::then member function. For the general case, we should  prefer the free function then.</p> <p>The free function then allows us to create task graphs with future continuations regardless of underlying support for lazy continuations.</p> <p>Better future adaptors</p> <p>This library includes:</p> <ul> <li>Large set of composition operations, such as when_all and when_any<ul> <li>Easier composition of task graphs</li> <li>Syntax closer to the existing future types users are used to</li> </ul> </li> <li>The future adaptors still work for existing future types</li> <li>Adaptors are also provided to facilitate the creation of cyclic task graphs</li> <li>Continuations are attached to old future types with a single polling future</li> <li>Integrations with Asio are provided, such as completion tokens and async IO operations.</li> </ul>"},{"location":"adaptors/continuations/#lazy-continuations","title":"Lazy continuations","text":"<p>The function then changes its behavior according to the traits is_continuable defined for the previous future type. If a previous future type supports lazy continuations, the next task is attached to the previous task with basic_future::then.</p> <p>If the next future type [is_deferred], then no lazy continuations need to be involved. A new deferred task waits for the previous task to be ready inline. Only when the previous task is ready the continuation task will be launched to the executor.</p> Continuation to a deferred future <pre><code>auto f5 = schedule([]() -&gt; int { return 63; });\nauto f6 = then(f5, [](int x) { assert(x == 63); });\n</code></pre> <p>In both cases, there's no polling involved. Polling is only necessary for (i) eager futures, (ii) that don't support continuations, and (iii) are potentially not ready. The last criteria eliminates future types such as vfuture generated by make_ready_future.</p> <p>In general, such futures types should not be used when we require continuations. However, to enable generic algorithms, the function then also works for these future types and will automatically launch polling tasks to wait for their results.</p> Continuation to a std::future <pre><code>std::future&lt;int&gt; f3 = std::async([]() -&gt; int { return 63; });\ncfuture&lt;void&gt; f4 = then(f3, [](int x) {\n// Another task in the default executor\nassert(x == 63);\n});\n</code></pre>"},{"location":"adaptors/continuations/#executors","title":"Executors","text":"<p>It's important to note continuations are never executed inline. Although common patterns used in javascript for callback functions are still possible, future continuations are always posted to the executor again. The default future objects returned by futures::async carry light handles to their execution contexts, through which continuation tasks can be launched by default. If a future object carries no executor, the default executor is used.</p> <p>However, if the continuation should be launched with another executor, both the member function basic_future::then and the free function then support custom executors for the continuation task.</p> Continuation with another executor <pre><code>cfuture&lt;int&gt; f7 = async([] { return 2; });\nfutures::thread_pool pool(1);\nauto ex = pool.get_executor();\ncfuture&lt;int&gt; f8 = then(ex, f7, [](int v) { return v * 2; });\n</code></pre> <p>When this parameter is provided, the task will continue in another executor.</p>"},{"location":"adaptors/continuations/#operators","title":"Operators","text":"<p>The operator <code>&gt;&gt;</code> is defined as a convenience to assemble large task graphs including continuations.</p> operator&gt;&gt;operators &gt;&gt; and % <pre><code>cfuture&lt;int&gt; f9 = f8 &gt;&gt; [](int x) {\nreturn x * 2;\n};\n</code></pre> <pre><code>auto inline_executor = make_inline_executor();\nauto f10 = f9 &gt;&gt; inline_executor % [](int x) {\nreturn x + 2;\n};\nassert(f10.get() == 10);\n</code></pre> <p>The types accepted by these operators are limited to those matching the future concept and callables that are valid as continuations to the future instance.</p>"},{"location":"adaptors/continuations/#continuation-unwrapping","title":"Continuation unwrapping","text":"<p>By default, continuations attempt to receive the previous future object as their input. This allows the continuation to examine the state of the previous future object before deciding how to continue.</p> Continuations with no unwrapping <pre><code>cfuture&lt;void&gt; f1 = async([]() { task_that_might_fail(); });\ncfuture&lt;void&gt; f2 = then(f1, [](cfuture&lt;void&gt; f) {\nif (!f.get_exception_ptr()) {\nhandle_success();\n} else {\nhandle_error();\n}\n});\n</code></pre> <p>However, continuations involve accessing the future object from the previous task. This means continuation chains where the previous task is derived from a number of container adaptors can easily become verbose and error-prone. For instance, consider a very simple continuation to a task that depends on 3 other futures objects.</p> <p>This is the task for which we need a continuation.</p> Task returning 3 values <pre><code>auto f1 = async([]() {\nreturn std::make_tuple(\nmake_ready_future(1),\nmake_ready_future(2.0),\nmake_ready_future&lt;std::string&gt;(\"3\"));\n});\n</code></pre> <p>And this is how verbose the continuation looks like without unwrapping:</p> Verbose continuations <pre><code>cfuture&lt;void&gt; f2 = then(\nf1,\n[](cfuture&lt;std::tuple&lt;\nvfuture&lt;int&gt;,\nvfuture&lt;double&gt;,\nvfuture&lt;std::string&gt;&gt;&gt; f) {\n// retrieve futures\nauto t = f.get();\nvfuture&lt;int&gt; fa = std::move(std::get&lt;0&gt;(t));\nvfuture&lt;double&gt; fb = std::move(std::get&lt;1&gt;(t));\nvfuture&lt;std::string&gt; fc = std::move(std::get&lt;2&gt;(t));\n// get their values\nint a = fa.get();\ndouble b = fb.get();\nstd::string c = fc.get();\n// use values\nassert(a == 1);\nassert(b == 2.0);\nassert(c == \"3\");\n});\n</code></pre> <p>Although this pattern could be slightly simplified with more recent C++ features, such as structured bindings, this pattern is unmaintainable. To simplify this process, the function then accepts continuations that expect the unwrapped result from the previous task.</p> <p>For instance, consider the following continuation function:</p> Unwrap void <pre><code>cfuture&lt;void&gt; f1 = async([]() {\n// Task\nlong_task();\n});\ncfuture&lt;int&gt; f2 = f1 &gt;&gt; []() { return 6; };\nassert(f2.get() == 6);\n</code></pre> <p>The continuation function requires no parameters. This means it only needs the previous future to be ready to be executor, but it does not require to access the previous future object so a parameter of the previous type would be of no use here. This also removes the necessity of marking the unused future object with attributes such as <code>[[maybe_unused]]</code>.</p>"},{"location":"adaptors/continuations/#exceptions","title":"Exceptions","text":"<p>If the previous task fails and its exception would be lost in the unwrapping process, the exception is automatically propagated to the following task.</p> Unwrap and query <pre><code>cfuture&lt;void&gt; f1 = async([]() { task_that_might_fail(); });\n\ncfuture&lt;int&gt; f2 = f1 &gt;&gt; []() {\nreturn 6;\n};\n\nif (!f2.get_exception_ptr()) {\nhandle_success_vals(f2.get());\n} else {\nhandle_error();\n}\n</code></pre> <p>With future adaptors, the exception information is still propagated to the unwrapped continuation future with the underlying future objects being unwrapped. Thus, continuations without unwrapping are only necessary when (i) the unwrapped version would lose the relevant exception information, and (ii) we need a different behavior for the continuation. This typically happens when the continuation task contains some logic allowing us to recover from the error.</p>"},{"location":"adaptors/continuations/#value-unwrapping","title":"Value unwrapping","text":"<p>The simplest form of unwrapping is sending the internal future value directly to the continuation function.</p> Forward value directly <pre><code>auto f1 = async([]() { return 6; });\nauto f2 = f1 &gt;&gt; [](int x) {\nreturn x * 2;\n};\nassert(f2.get() == 12);\n</code></pre> <p>This allows the continuation function to worry only about the internal value type <code>int</code> instead of the complete future type <code>cfuture&lt;int&gt;</code>. This also makes the algorithm easier to generalize for alternative future types.</p> <p>If the previous future also contains a future, we can double unwrap the value to the next task:</p> Double value unwrap <pre><code>auto f1 = async([]() { return make_ready_future(6); });\nauto f2 = f1 &gt;&gt; [](int x) {\nreturn x * 2;\n};\nassert(f2.get() == 12);\n</code></pre>"},{"location":"adaptors/continuations/#tuples-unwrapping","title":"Tuples unwrapping","text":"<p>Tuple unwrapping becomes useful as a simplified way for futures to return multiple values to its continuations.</p> Unwrap tuple <pre><code>auto f1 = async([]() { return make_ready_future(6); });\nauto f2 = f1 &gt;&gt; [](int x) {\nreturn std::make_tuple(x * 1, x * 2, x * 3);\n};\ncfuture&lt;int&gt; f3 = f2 &gt;&gt; [](int a, int b, int c) {\nreturn a * b * c;\n};\nassert(f3.get() == 6 * 1 * 6 * 2 * 6 * 3);\n</code></pre> <p>The tuple components are also double unwrapped if necessary:</p> Unwrap tuple <pre><code>auto f1 = async([]() { return make_ready_future(6); });\nauto f2 = f1 &gt;&gt; [](int x) {\nreturn std::make_tuple(\nmake_ready_future(1 * x),\nmake_ready_future(2 * x),\nmake_ready_future(3 * x));\n};\nauto f3 = f2 &gt;&gt; [](int a, int b, int c) {\nreturn a + b + c;\n};\nassert(f3.get() == 1 * 6 + 2 * 6 + 3 * 6);\n</code></pre> <p>In this case, without unwrapping, the continuation would require a <code>cfuture&lt;std::tuple&lt;vfuture&lt;int&gt;, vfuture&lt;int&gt;, vfuture&lt;int&gt;&gt;&gt;</code> as its first parameter.</p>"},{"location":"adaptors/continuations/#unwrapping-conjunctions","title":"Unwrapping conjunctions","text":"<p>Double tuple unwrapping is one of the most useful types of future unwrapping for continuation functions of conjunctions. When we wait for a conjunction of futures, the return value is represented as a tuple of all future objects that got ready. Double tuple unwrapping allows us to handle the results is a pattern that is more manageable:</p> Unwrap future conjunction <pre><code>auto f1 = async([]() { return 1; });\nauto f2 = async([]() { return 2; });\nauto f3 = async([]() { return 3; });\nauto f4 = async([]() { return 4; });\nauto f5 = when_all(f1, f2, f3, f4);\nauto f6 = f5 &gt;&gt; [](int a, int b, int c, int d) {\nreturn a + b + c + d;\n};\nassert(f6.get() == 1 + 2 + 3 + 4);\n</code></pre> <p>This allows the continuation function to worry only about the internal value type <code>int</code> instead of the complete future type <code>cfuture&lt;int&gt;</code>. This also makes the algorithm easier to generalize for alternative future types.</p>"},{"location":"adaptors/continuations/#unwrapping-disjunctions","title":"Unwrapping disjunctions","text":"<p>Future disjunctions are represented with instances of when_any_result. Special unwrapping functions are defined for these objects. This simplest for of unwrapping for disjunctions is the index of the ready future and the previous sequence of future objects.</p> Unwrap future disjunction <pre><code>cfuture&lt;int&gt; f1 = async([]() { return 1; });\ncfuture&lt;int&gt; f2 = async([]() { return 2; });\nwhen_any_future&lt;std::tuple&lt;cfuture&lt;int&gt;, cfuture&lt;int&gt;&gt;&gt;\nf3 = when_any(f1, f2);\nauto f4 = f3 &gt;&gt;\n[](std::size_t idx,\nstd::tuple&lt;cfuture&lt;int&gt;, cfuture&lt;int&gt;&gt; prev) {\nif (idx == 0) {\nreturn std::get&lt;0&gt;(prev).get();\n} else {\nreturn std::get&lt;1&gt;(prev).get();\n}\n};\nint r = f4.get();\nassert(r == 1 || r == 2);\n</code></pre> <p>This can still be as verbose as wrapped tuples. However, we might still want to have access to each individual future as we know only one of them is ready when the continuation starts. So the second option is exploding the tuple of futures into the continuation parameters.</p> Explode future conjunction <pre><code>auto f1 = async([]() { return 1; });\nauto f2 = async([]() { return 2; });\nauto f3 = when_any(f1, f2);\nauto f4 = f3 &gt;&gt;\n[](std::size_t idx, cfuture&lt;int&gt; f1, cfuture&lt;int&gt; f2) {\nif (idx == 0) {\nreturn f1.get();\n} else {\nreturn f2.get();\n}\n};\nint r = f4.get();\nassert(r &gt;= 1 &amp;&amp; r &lt;= 2);\n</code></pre> <p>This pattern allows us to do something about <code>f2</code> when <code>f1</code> is ready and vice-versa. It implies we want to continue as soon as there are results available but the results from unfinished tasks should not be discarded.</p> <p>Very often, only one of the objects is really necessary and the meaning of what they store is homogenous. For instance, this is the case when we attempt to connect to a number of servers and want to continue with whatever server replies first. In this case, unfinished futures can be discarded, and we only need the finished task to continue.</p> Homogenous disjunction <pre><code>auto f1 = async([]() { return 1; });\nauto f2 = async([]() { return 2; });\nauto f3 = when_any(f1, f2);\nauto f4 = f3 &gt;&gt; [](cfuture&lt;int&gt; f) {\nreturn f.get();\n};\nint r = f4.get();\nassert(r &gt;= 1 &amp;&amp; r &lt;= 2);\n</code></pre> <p>If the previous futures are stoppable, the adaptor will request other tasks to stop. If the tasks are homogeneous, this means we can also unwrap the underlying value of the finished task.</p> Homogenous unwrap <pre><code>auto f1 = async([]() { return 1; });\nauto f2 = async([]() { return 2; });\nauto f3 = when_any(f1, f2);\nauto f4 = f3 &gt;&gt; [](int v) {\nreturn v * 2;\n};\nint r = f4.get();\nassert(r == 2 || r == 4);\n</code></pre>"},{"location":"adaptors/continuations/#summary","title":"Summary","text":"<p>The following table describes all unwrapping functions by their priority:</p> Future output Continuation input Inputs <code>future&lt;R&gt;</code> <code>future&lt;R&gt;</code> 1 <code>future&lt;R&gt;</code> `` 0 <code>future&lt;R&gt;</code> <code>R</code> 1 <code>future&lt;tuple&lt;future&lt;T1&gt;, future&lt;T2&gt;, ...&gt;&gt;</code> <code>future&lt;T1&gt;</code>, <code>future&lt;T2&gt;</code> ... N <code>future&lt;tuple&lt;future&lt;T1&gt;, future&lt;T2&gt;, ...&gt;&gt;</code> <code>T1</code>, <code>T2</code> ... N <code>future&lt;vector&lt;future&lt;R&gt;&gt;&gt;</code> <code>vector&lt;R&gt;</code> 1 <code>future&lt;when_any_result&lt;tuple&lt;future&lt;T1&gt;, future&lt;T2&gt;, ...&gt;&gt;&gt;</code> <code>size_t</code>, <code>tuple&lt;future&lt;T1&gt;, future&lt;T2&gt;, ...&gt;</code> 2 <code>future&lt;when_any_result&lt;tuple&lt;future&lt;T1&gt;, future&lt;T2&gt;, ...&gt;&gt;&gt;</code> <code>size_t</code>, <code>future&lt;T1&gt;</code>, <code>future&lt;T2&gt;</code>, ... N + 1 <code>future&lt;when_any_result&lt;tuple&lt;future&lt;R&gt;, future&lt;R&gt;, ...&gt;&gt;&gt;</code> <code>future&lt;R&gt;</code> 1 <code>future&lt;when_any_result&lt;vector&lt;future&lt;R&gt;&gt;&gt;&gt;</code> <code>future&lt;R&gt;</code> 1 <code>future&lt;when_any_result&lt;tuple&lt;future&lt;R&gt;, future&lt;R&gt;, ...&gt;&gt;&gt;</code> <code>R</code> 1 <code>future&lt;when_any_result&lt;vector&lt;future&lt;R&gt;&gt;&gt;&gt;</code> <code>R</code> 1 <p>Note that types are very important here. Whenever the continuation has the same number of arguments for the same future output, a template function or a lambda using <code>auto</code> would be ambiguous.</p> Ambiguous unwrapping <pre><code>cfuture&lt;int&gt; f1 = async([]() { return 1; });\nauto f2 = f1 &gt;&gt; [](auto f) -&gt; decltype(f.get()) {\n// Is `f` a `cfuture&lt;int&gt;` or `int`?\n// `cfuture&lt;int&gt;` has highest priority\nreturn f.get();\n};\nassert(f2.get() == 1);\n</code></pre> <p>In this case, the continuation function will attempt to use the unwrapping with the highest priority, which would be <code>cfuture&lt;int&gt;</code>. However, this is not always possible if the unwrapping overloads are ambiguous enough.</p> <p>The continuation with the highest priority is always the safer and usually more verbose continuation. This means a template continuation will usually unwrap to <code>future&lt;R&gt;</code> over <code>R</code> continuation input variants. On the other hand, this is also useful since the most verbose continuation patterns are the ones that could benefit the most from <code>auto</code>.</p>"},{"location":"adaptors/continuations/#return-type-unwrapping","title":"Return type unwrapping","text":"<p>Future are allowed to expect other futures:</p> Getting a future from a future <pre><code>cfuture&lt;cfuture&lt;int&gt;&gt; f = async([]() {\nreturn async([]() { return 1; });\n});\nassert(f.get().get() == 1);\n</code></pre> <p>In this example, we can choose to wait for the value of the first future or the value of the future it encapsulates.</p> <p>Unlike the function std::experimental::future::then in C++ Extensions for Concurrency, this library does not automatically unwrap a continuation return type from <code>future&lt;future&lt;int&gt;&gt;</code> to <code>future&lt;int&gt;</code>. There are two reasons for that: not unwrapping the return type (i) facilitates generic algorithms that operate on futures, and (ii) avoids potentially blocking the executor with two tasks to execute the unwrapping.</p> <p>However, other algorithms based on the function then can still perform return type unwrapping.</p>"},{"location":"adaptors/continuations/#continuation-stop","title":"Continuation stop","text":"<p>When a non-shared future has a continuation attached, its value is moved into the continuation. With stoppable futures, this means the stop_source is also moved into the continuation. If the future has already been moved, and we want to request its corresponding task to stop, we can do that through its stop_source.</p> Continuation stop source <pre><code>auto f1 = async([](stop_token st) {\nwhile (!st.stop_requested()) {\nsome_task();\n}\n});\nauto ss = f1.get_stop_source();\nauto f2 = f1 &gt;&gt; []() {\n// f1 done\nhandle_success();\n};\n// f1.request_stop() won't work anymore\nss.request_stop();\nf2.get();\n</code></pre>"},{"location":"adaptors/disjunctions/","title":"Disjunctions","text":"<p>The function when_any is defined for task disjunctions. when_any returns a when_any_future that is able to aggregate different futures types and become ready when any of the internal futures is ready.</p> <p>Say we want to execute the following sequence of asynchronous tasks where the first future between <code>B</code> and <code>C</code> to get ready should be used as input for the continuation <code>D</code>.</p>  graph LR subgraph Async A --&gt; B A --&gt; C B --&gt; |set if first|D C --&gt; |set if first|D end Main --&gt; A D --&gt; End Main --&gt; End  <p>Achieving that with the function when_all is as simple as:</p> Task graph with conjunction <pre><code>shared_cfuture&lt;int&gt; A = async([]() { return 2; }).share();\n\ncfuture&lt;int&gt; B = then(A, [](int a) { return a * 2; });\ncfuture&lt;int&gt; C = then(A, [](int a) { return a * 3; });\n\ncfuture&lt;int&gt; D = then(when_any(B, C), [](int b_or_c) {\nreturn b_or_c * 3;\n});\n\nint r = D.get();\nassert(r == 12 || r == 18);\n</code></pre> <p>The when_any_future object acts as a proxy that checks the state of each internal future. If none of the internal futures is ready yet, is_ready returns <code>false</code>.</p> Tuple disjunction <pre><code>cfuture&lt;int&gt; f1 = async([]() { return 2; });\ncfuture&lt;double&gt; f2 = async([]() { return 3.5; });\ncfuture&lt;std::string&gt; f3 = async([]() -&gt; std::string {\nreturn \"name\";\n});\nauto f = when_any(f1, f2, f3); // or f1 || f2 || f3\n</code></pre> <p>An instance of when_any_future returns a when_any_result which keeps the sequence of futures and the index of the first future to get ready.</p> Get disjunction result <pre><code>when_any_result any_r = f.get();\nsize_t i = any_r.index;\nauto [r1, r2, r3] = std::move(any_r.tasks);\nif (i == 0) {\nassert(r1.get() == 2);\n} else if (i == 1) {\nassert(r2.get() == 3.5);\n} else {\nassert(r3.get() == \"name\");\n}\n</code></pre> <p>The underlying sequence might be a tuple or a range.</p>"},{"location":"adaptors/disjunctions/#operator","title":"Operator","text":"<p>The operator <code>||</code> is defined as a convenience to create future disjunctions in large task graphs.</p> operator|| <pre><code>cfuture&lt;int&gt; f1 = async([]() { return 2; });\ncfuture&lt;int&gt; f2 = async([]() { return 3; });\ncfuture&lt;int&gt; f3 = async([]() { return 4; });\nauto any = f1 || f2 || f3;\n</code></pre> <p>With when_any_result unwrapping, this becomes a powerful tool to manage continuations:</p> Get disjunction result <pre><code>auto f4 = any &gt;&gt; [](int first) { return first; };\nint r = f4.get();\nassert(r &gt;= 2 &amp;&amp; r &lt;= 4);\n</code></pre> <p>Note that the operator <code>&amp;&amp;</code> uses expression templates to create a single disjunction of futures. Thus, <code>f1 || f2 || f3</code> is equivalent to <code>when_any(f1, f2, f3)</code> rather than <code>when_any(when_any(f1, f2), f3)</code>.</p> <p>The operator <code>||</code> can also be used with lambdas as an easy way to launch new tasks already into disjunctions:</p> Lambda conjunction <pre><code>auto f1 = []() { return 2; } ||\n[]() { return 3; } ||\n[]() { return 4; };\nauto f2 = then(f1, [](int first) {\nassert(first &gt;= 2 &amp;&amp; first &lt;= 4);\n});\n</code></pre> <p>This allows us to assemble task graphs where lambdas are treated as other first class types. The types accepted by these operators are limited to those matching the future concept and callables that are valid as new tasks.</p>"},{"location":"adaptors/disjunctions/#lazy-continuations","title":"Lazy continuations","text":"<p>Unlike when_all_future, the behavior of when_any_future is strongly affected by the features of its internal futures. Internal futures that support lazy continuations and external notifiers can only set a flag indicating to when_any_future that one of its futures is ready.</p> <p>For internal futures that do not support lazy continuations, when_any_future needs to pool its internal future to check if any is ready, much like wait_for_any.</p>"},{"location":"adaptors/disjunctions/#disjunction-unwrapping","title":"Disjunction unwrapping","text":"<p>Special unwrapping functions are defined for when_any_future continuations.</p> Unwrap future disjunctionExplode future conjunctionHomogenous disjunctionHomogenous unwrap <pre><code>cfuture&lt;int&gt; f1 = async([]() { return 1; });\ncfuture&lt;int&gt; f2 = async([]() { return 2; });\nwhen_any_future&lt;std::tuple&lt;cfuture&lt;int&gt;, cfuture&lt;int&gt;&gt;&gt;\nf3 = when_any(f1, f2);\nauto f4 = f3 &gt;&gt;\n[](std::size_t idx,\nstd::tuple&lt;cfuture&lt;int&gt;, cfuture&lt;int&gt;&gt; prev) {\nif (idx == 0) {\nreturn std::get&lt;0&gt;(prev).get();\n} else {\nreturn std::get&lt;1&gt;(prev).get();\n}\n};\nint r = f4.get();\nassert(r == 1 || r == 2);\n</code></pre> <pre><code>auto f1 = async([]() { return 1; });\nauto f2 = async([]() { return 2; });\nauto f3 = when_any(f1, f2);\nauto f4 = f3 &gt;&gt;\n[](std::size_t idx, cfuture&lt;int&gt; f1, cfuture&lt;int&gt; f2) {\nif (idx == 0) {\nreturn f1.get();\n} else {\nreturn f2.get();\n}\n};\nint r = f4.get();\nassert(r &gt;= 1 &amp;&amp; r &lt;= 2);\n</code></pre> <pre><code>auto f1 = async([]() { return 1; });\nauto f2 = async([]() { return 2; });\nauto f3 = when_any(f1, f2);\nauto f4 = f3 &gt;&gt; [](cfuture&lt;int&gt; f) {\nreturn f.get();\n};\nint r = f4.get();\nassert(r &gt;= 1 &amp;&amp; r &lt;= 2);\n</code></pre> <pre><code>auto f1 = async([]() { return 1; });\nauto f2 = async([]() { return 2; });\nauto f3 = when_any(f1, f2);\nauto f4 = f3 &gt;&gt; [](int v) {\nreturn v * 2;\n};\nint r = f4.get();\nassert(r == 2 || r == 4);\n</code></pre>"},{"location":"adaptors/task_graphs/","title":"Task graphs","text":"<p>It is quite common to compose task graphs with future adaptors. In many of these graphs, some continuation tasks might need to recur to a task that has already been executed in the graph.</p>"},{"location":"adaptors/task_graphs/#directed-acyclic-graphs","title":"Directed acyclic graphs","text":"<p>Say we want to execute the following task graph:</p>  graph LR subgraph Async     B -.-&gt; |false|D     A --&gt; B     B -.-&gt; |true|C end Main --&gt; A C --&gt; End D --&gt; End Main --&gt; End  <p>This is not an uncommon pattern in asynchronous applications:</p>  graph LR subgraph Async     B[Attempt] -.-&gt; |false|D[Handle error]     A[Prepare] --&gt; B     B -.-&gt; |true|C[Handle success] end  <p>We can combine future adaptors to directly express task graphs without cycles. In this case, our problem is that the adaptor then only supports a single continuation. What we need is another continuation that defines which continuation to execute. This is achieved by using the continuations to launch new tasks.</p> Direct Acyclic Task Graph <pre><code>cfuture&lt;int&gt; A = async([]() { return 2; });\n\ncfuture&lt;bool&gt; B = then(A, [](int a) {\nreturn try_operation(a);\n});\n\ninline_executor ex = make_inline_executor();\nauto C_or_D = then(ex, B, [](bool ok) {\nreturn ok ? async(handle_success) : async(handle_error);\n});\n\nint r = C_or_D.get().get();\nassert(r == 0 || r == 1);\n</code></pre> <p>Task <code>A</code> can attach its continuation <code>B</code> as usual. However, task <code>B</code> needs to check a condition before launching <code>C</code> or <code>D</code>. The process of checking this condition becomes the continuation to <code>B</code>: a continuation to decide which continuation to launch.</p> <p>However, note that we use an inline_executor for checking the condition. Deciding what task to launch is a cheap operation, and we do not want to send another task to the underlying executor to do that. This inline execution effectively makes the continuation behave as a light callback.</p> <p>This pattern works because futures and promises enable representations equivalent to an implicit task queue. Any task we launch is going to this implicit queue. Continuations make reference to earlier objects in the queue. Earlier tasks can decide what to push to this queue.</p>"},{"location":"adaptors/task_graphs/#rescheduling-tasks","title":"Rescheduling tasks","text":"<p>Say we want to execute the following task graph:</p>  graph LR subgraph Async     B -.-&gt; |false|B     A --&gt; B     B -.-&gt; |true|C end Main --&gt; A C --&gt; End Main --&gt; End  <p>This kind of pattern is not uncommon for tasks that might fail</p>  graph LR subgraph Async client     B[Make request] -.-&gt; |false|B     A[Prepare request] --&gt; B     B -.-&gt; |true|C[Handle response] end  <p>or tasks that should be split into smaller homogeneous tasks:</p>  graph LR subgraph Async client     B[Read some] -.-&gt; |true|B     A[Handle response] --&gt; B     B -.-&gt; |false|C[Write response] end  <p>The previous pattern will not work for this graph because <code>B</code> needs to have recursive access to the task that launches itself. This simplest way to store these recursive functions is with a <code>struct</code> or <code>class</code>.</p> Structure to reschedule operation <pre><code>struct graph_launcher {\npromise&lt;int&gt; end_;\n// ...\n</code></pre> <p>The graph contains a single promise whose value we will set when the complete subgraph is executed. Note that we can't simply wait for C outside the graph because its future instance is not valid until B succeeds. The future C will not exist yet rather than simply not being ready. So we start the task graph by launching A.</p> Starting the subgraph <pre><code>// struct graph_launcher {\n// ...\ncfuture&lt;int&gt;\nstart() {\ncfuture&lt;int&gt; A = async([]() { return 2; });\ninline_executor ex = make_inline_executor();\nthen(ex, A, [this](int a) { schedule_B(a); }).detach();\nreturn end_.get_future();\n}\n// ...\n</code></pre> <p>A is launched as soon as we start. We use the inline_executor for light callbacks as in the previous example. We detach the callback function to because we don't need to wait for this task. We only need to wait for the final promise.</p> <p>The process of scheduling B is modularized into another function because we need to access it recursively. This works as usual:</p> Scheduling or rescheduling B <pre><code>// struct graph_launcher {\n// ...\nvoid\nschedule_B(int a) {\ncfuture&lt;bool&gt; B = async(\n[](int ra) { return try_operation(ra); },\na);\ninline_executor ex = make_inline_executor();\nthen(ex, B, [this, a](bool ok) {\nif (ok) {\nschedule_C();\n} else {\nhandle_error();\nschedule_B(a);\n}\n}).detach();\n}\n// ...\n</code></pre> <p>The light callback for B works as in the previous example for DAGs. The only difference here is <code>schedule_B</code> might need to call itself when it fails. The <code>struct</code> makes this recursion easier to access.</p> <p>If the operation is successful and we schedule task C, it simply handles the operation result and sets the promise we created.</p> Setting the promise <pre><code>    // struct graph_launcher {\n// ...\nvoid\nschedule_C() {\nasync([this]() {\nint r = handle_success();\nend_.set_value(1);\nreturn r;\n}).detach();\n}\n};\n</code></pre> <p>Outside the graph, we can just wait for the promise to be set.</p> Waiting for the graph <pre><code>graph_launcher g;\ncfuture&lt;int&gt; f = g.start();\nassert(f.get() == 1);\n</code></pre> <p>In practice, we would probably attempt to reschedule B a number of times and a stop token could be attached to the graph to allow us to request it to stop at any time. These scheduling functions are usually going to be interleaved with the application logic. For instance, a web client would also use this object to store variables related to the state of the request.</p> <p>When we compare this model with implicit queues, the complete asynchronous operation as become a subgraph that effectively represents a single subtask in this task queue. In fact, if we know the executor we are going to use is modelled as an explicit task queue, such as <code>asio::io_context</code>, we don't even need the promise because we can just pop tasks from the queue until there are no tasks left. At this point, we implicitly know task C has been executed.</p> <p>The promise makes the subgraph itself behave as a single future in the implicit task queue. The graph members could be encapsulated into a class, and the functions <code>get</code>/<code>wait</code> could be provided to request the value of the promise. In this case, we would have one more complete future_like object. This type would be able to interact with other futures through the library future adaptors.</p>"},{"location":"adaptors/task_graphs/#loops-in-graphs","title":"Loops in graphs","text":"<p>The pattern above can also be reused for asynchronous loops. Say we want to execute the following task graph:</p>  graph LR subgraph Async     B -.-&gt; |false|A     A --&gt; B     B -.-&gt; |true|C end Main --&gt; A C --&gt; End Main --&gt; End  <p>This kind of pattern is not uncommon for tasks that run continuously:</p>  graph LR subgraph Async server session     B[Write] -.-&gt; |completed|A[Read]     A -.-&gt; |completed|B     B --&gt; |disconnect|C[Close Session]     A -.-&gt; |read more|A     B -.-&gt; |write more|B end Listen -.-&gt; |Connected|A Listen -.-&gt; |Connected|Listen  <p>In this example, we have rescheduling because reading and writing longer message needs to be split into smaller tasks. The server also needs to launch another listening task while it serves that client. We also have loops because after writing a response we might need to read more requests or disconnect the client.</p> <p>What we have here is a conditional continuation that might move backwards in case of failure. The logic for recursively rescheduling <code>A</code> is the same as the logic for rescheduling <code>B</code>. We define this logic in a separate function and recursively call it. The new <code>struct</code> would be:</p> Structure to reschedule operation <pre><code>struct graph_launcher {\npromise&lt;int&gt; end_;\n\ncfuture&lt;int&gt;\nstart() {\nschedule_A();\nreturn end_.get_future();\n}\n// ...\n</code></pre> <p>The logic to schedule A is now moved into another function because we need to reuse it. A schedules B as usual.</p> Scheduling A <pre><code>// struct graph_launcher {\n// ...\nvoid\nschedule_A() {\ncfuture&lt;int&gt; A = async([]() { return 2; });\ninline_executor ex = make_inline_executor();\nthen(ex, A, [this](int a) { schedule_B(a); }).detach();\n}\n// ...\n</code></pre> <p>This time, in case of failure, task B moves back to task A instead of rescheduling.</p> Scheduling B <pre><code>// struct graph_launcher {\n// ...\nvoid\nschedule_B(int a) {\ncfuture&lt;bool&gt; B = async(\n[](int ra) { return try_operation(ra); },\na);\ninline_executor ex = make_inline_executor();\nthen(ex, B, [this](bool ok) {\nif (ok) {\nschedule_C();\n} else {\nhandle_error();\nschedule_A();\n}\n}).detach();\n}\n// ...\n</code></pre> <p>Task C sets the promise as usual.</p> Setting the promise <pre><code>    // struct graph_launcher {\n// ...\nvoid\nschedule_C() {\nasync([this]() {\nint r = handle_success();\nend_.set_value(1);\nreturn r;\n}).detach();\n}\n};\n</code></pre> <p>We also wait for the graph as usual.</p> Waiting for the graph <pre><code>graph_launcher g;\ncfuture&lt;int&gt; f = g.start();\nassert(f.get() == 1);\n</code></pre> <p>Note that this pattern of implicit task graphs is easy enough to generalize as an explicit task graph object. An explicit task graph needs to be aware of the tasks it might launch (its vertices) and the connections between tasks (its edges).</p> <p>However, there are many reasons not to reuse such a graph object. A graph object would make it more difficult to interleave data related to the application logic with the tasks and the intermediary tasks usually have different types. We could either recur to template instantiations for each possible graph combination or type erase these differences. Both alternatives are more expensive and verbose than directly creating functions to recursively reschedule tasks.</p> <p>Task graphs in C++</p> <p>Libraries such as Taskflow and TTB provide facilities to compose complete task graphs:</p> FuturesContinuable FuturesTaskflowTTB <pre><code>std::future A = std::async([] () { std::cout &lt;&lt; \"TaskA\\n\"; });\n\n// A runs before B and C\nstd::future B = std::async([&amp;A] () { A.wait(); // Polling :( \nstd::cout &lt;&lt; \"TaskB\\n\";\n});\n\nstd::future C = std::async([&amp;A] () { A.wait(); // Polling :( \nstd::cout &lt;&lt; \"TaskC\\n\"; });\n\n// D runs after B and C\nstd::future D = std::async([&amp;B, &amp;C] () { B.wait(); // Polling :(\nC.wait(); // Polling :(\nstd::cout &lt;&lt; \"TaskD\\n\";\n});\n\nD.wait(); </code></pre> <pre><code>std::future A = std::async([] () { std::cout &lt;&lt; \"TaskA\\n\"; });\n\n// A runs before B and C\nstd::future B = A.then([] () { // Synchronization cost :( \nstd::cout &lt;&lt; \"TaskB\\n\"; // No polling :) \n});\n\nstd::future C = A.then([] () { // Synchronization cost :( \nstd::cout &lt;&lt; \"TaskC\\n\"; // No polling :)\n});\n\n// D runs after B and C\nstd::future D = some_future_lib::when_all(B, C).then([] () { std::cout &lt;&lt; \"TaskD\\n\"; });\n\nD.wait(); </code></pre> <pre><code>tf::Executor executor;\ntf::Taskflow taskflow;\n\nauto [A, B, C, D] = g.emplace(\n[] () { std::cout &lt;&lt; \"TaskA\\n\"; // No eager execution \n},\n[] () { std::cout &lt;&lt; \"TaskB\\n\"; // No eager execution \n},\n[] () { std::cout &lt;&lt; \"TaskC\\n\"; // No eager execution \n},\n[] () { std::cout &lt;&lt; \"TaskD\\n\"; // No eager execution \n} );\n\nA.precede(B, C); // No synchronization cost :)  \nD.succeed(B, C); // No synchronization cost :)\n\nexecutor.run(g).wait(); </code></pre> <pre><code>graph g;\n\nfunction_node&lt;void&gt; A( g, 1, [] () { std::cout &lt;&lt; \"TaskA\\n\"; // No eager execution \n} );\n\nfunction_node&lt;void&gt; B( g, 1, [] () { std::cout &lt;&lt; \"TaskB\\n\"; // No eager execution \n} );\n\nfunction_node&lt;void&gt; C( g, 1, [] () { std::cout &lt;&lt; \"TaskC\\n\"; // No eager execution \n} );\n\nfunction_node&lt;void&gt; D( g, 1, [] () { std::cout &lt;&lt; \"TaskD\\n\"; // No eager execution \n} );\n\nmake_edge(A, B); // No synchronization cost :) \nmake_edge(A, C); // No synchronization cost :) \nmake_edge(B, D); // No synchronization cost :) \nmake_edge(C, D); // No synchronization cost :) \n\ng.wait_for_all();\n</code></pre> <p>Tasks in a task graph are analogous to deferred futures whose continuations are defined before the execution starts. However, we need to explicitly define all relationships between tasks before any execution starts, which might be inconvenient in some applications. Futures and async functions, on the other hand, allow us to 1) combine eager and lazy tasks, and 2) directly express their relationships in code without any explicit graph containers.</p> <p>On the other hand, P1055 proposed the concept of deferred work, in opposition to eager futures, such as std::future. The idea is that a task related to a future should not start before its continuation is applied. This eliminates the race between the result and the continuation in eager futures. Futures with deferred work are also easier to implement (example).</p>"},{"location":"algorithms/algorithms/","title":"Algorithms","text":"<p>The header <code>algorithm.h</code> and the corresponding Algorithms Module includes parallel implementations of common STL algorithms using the library primitives.</p> Parallel Algorithms <pre><code>int c = futures::reduce(v.begin(), v.end(), 0); // parallel by\n// default\nassert(c == 1250025000);\n</code></pre> <p>Like the C++20 ranges library, these algorithms accept both iterators or ranges as parameters.</p> Ranges <pre><code>int c = futures::reduce(v, 0); // parallel by default\nassert(c == 1250025000);\n</code></pre> <p>Better future algorithms</p> <p>This library includes:</p> <ul> <li>Large set of the STL-like algorithms in terms of futures and executors</li> <li>Easy access to async algorithms based on executors without requiring other external libraries<ul> <li>This is common with C++ execution policies, such   as TTB.</li> </ul> </li> </ul>"},{"location":"algorithms/algorithms/#executors","title":"Executors","text":"<p>Like other parallel functions defined in this library, these algorithms allow simple execution policies to be replaced by concrete executors.</p> Custom executor <pre><code>futures::thread_pool pool(4);\nauto ex = pool.get_executor();\nfutures::for_each(ex, v.begin(), v.begin() + 10, [](int x) {\nassert(x &gt;= 0 &amp;&amp; x &lt;= 50000);\nlong_task(x);\n});\n</code></pre>"},{"location":"algorithms/algorithms/#parallel-by-default","title":"Parallel by default","text":"<p>Unless an alternative policy or executor is provided, all algorithms are executed in parallel by default whenever it is \"reasonably safe\" to do so. A parallel algorithm is considered \"reasonably safe\" if there are no implicit data races and deadlocks in its provided functors.</p> <p>To execute algorithms sequentially, an appropriate executor or policy should be provided:</p> Inline executorExecution policy <pre><code>int c = futures::reduce(make_inline_executor(), v, 0); // sequential\n// execution\nassert(c == 1250025000);\n</code></pre> <pre><code>int c = futures::reduce(futures::seq, v, 0); // sequential execution\nassert(c == 1250025000);\n</code></pre> <p>Unless a policy is explicitly stated, all algorithms are parallel by default. These algorithms give us access to parallel algorithms that rely only on executors. This allows us to avoid of more complex libraries, such as TBB, to execute efficient parallel algorithms.</p>"},{"location":"algorithms/algorithms/#compile-time-algorithms","title":"Compile time algorithms","text":"<p>Like in C++20, these algorithms can also be used in <code>constexpr</code> contexts with the default inline executor for these contexts.</p> Compile-time algorithms <pre><code>constexpr std::array&lt;int, 5&gt; a = { 1, 2, 3, 4, 5 };\nconstexpr int n = futures::reduce(a);\nconstexpr std::array&lt;int, n&gt; b{};\nassert(b.size() == 15);\n</code></pre> <p>This feature depends on an internal library implementation equivalent to std::is_constant_evaluated. This implementation is available in most compilers (MSVC 1925, GCC 6, Clang 9), even when C++20 is not available. The macro <code>FUTURES_HAS_CONSTANT_EVALUATED</code> can be used to identify if the feature is available.</p>"},{"location":"algorithms/partitioners/","title":"Partitioners","text":"<p>All algorithms also have an optional extra parameter for custom partitioners. A partitioner_for an iterator is simply a callable object that receives two iterators representing a range and returns an iterator indicating where this range should be split for a parallel algorithm. For instance, this would be a partitioner that always splits the problem in half:</p> Defining a custom partitioner <pre><code>auto p = [](auto first, auto last) {\nreturn std::next(first, (last - first) / 2);\n};\n</code></pre> <p>When we execute an algorithm with our custom partitioner, the algorithm would recursively split the input in half and launch a task for each of these parts.</p> Using a custom partitioner <pre><code>auto it = find(ex, p, v, 3000);\nif (it != v.end()) {\nassert(*it == 3000);\nstd::ptrdiff_t pos = it - v.begin();\nassert(pos &gt;= 0 &amp;&amp; pos &lt;= 50000);\n}\n</code></pre> <p>Hint</p> <p>A partitioner_for can indicate the problem is too small to be partitioned by returning <code>last</code>, which means the problem should not be split.</p> <p>When no partitioner is provided, the default_partitioner is used, which imposes a minimum grain size to split the problem and stops recommending the problem to be split if threads are busy with the problem.</p>"},{"location":"futures/continuable_futures/","title":"Continuable Futures","text":"<p>Continuations are the most common extension to future objects. A continuable shared state provides the future instance with write access to attach continuations to a task. When the task sets the value of the shared state, all continuations are run.</p>  graph LR M[[Main Thread]] ==&gt; |store|F[Future Value] M -.-&gt; |attach continuation|F E[[Executor]] --&gt; |run|T[Task] M -.-&gt; |launch|T subgraph Futures and Promises F --&gt; |read|S[(Shared State  +  Continuations)] F -.-&gt; |attach continuation|S T[Task] --&gt; |set and continue|S end"},{"location":"futures/continuable_futures/#motivation","title":"Motivation","text":""},{"location":"futures/continuable_futures/#non-continuable-tasks","title":"Non-continuable tasks","text":"<p>Consider what happens when we launch a task with C++11 std::async:</p> Simple std::async task <pre><code>std::future&lt;int&gt; f = std::async([]() {\n// Parallel work\nreturn 65;\n});\n// Main work\nassert(f.get() == 65);\n</code></pre> <p>When we only need a single parallel task with future types, the main thread is allowed to wait or do some other work while the task is running.</p>  sequenceDiagram     Main-&gt;&gt;+Task: Launch     Main-&gt;&gt;Main: Do work     Main-&gt;&gt;Task: Wait     activate Main     Note left of Main: Time spent waiting     Task-&gt;&gt;-Main: Return     deactivate Main  <p>In this example, the main thread spent some time waiting but this is often OK, as long as it had nothing better to do but to wait for the asynchronous task. This is common in user interfaces that need to be refreshed while a longer background task is running.</p> <p>Now let's say we want to execute a sequence of asynchronous tasks as simple as:</p>  graph LR subgraph Async A --&gt; B --&gt; C end Main --&gt; A C --&gt; End Main --&gt; End  <p>As we shall see, std::async does not provide the mechanisms to make this happen properly. The first alternative that usually comes to mind is waiting for one task after launching the next.</p> Always waiting for the next task <pre><code>std::future&lt;int&gt; A = std::async([]() { return 65; });\n\nstd::future&lt;char&gt; B = std::\nasync([](int v) { return static_cast&lt;char&gt;(v); }, A.get());\n\nstd::future&lt;void&gt;\nC = std::async([](char c) { assert(c == 'A'); }, B.get());\n\nC.wait();\n</code></pre> <p>The code might look reasonable but, in that case, we would have:</p>  sequenceDiagram     Main-&gt;&gt;+A: Launch     Main-&gt;&gt;A: Wait     activate Main     A-&gt;&gt;-Main: Return     deactivate Main     Main-&gt;&gt;+B: Launch     Main-&gt;&gt;B: Wait     activate Main     B-&gt;&gt;-Main: Return     deactivate Main     Main-&gt;&gt;+C: Launch     Main-&gt;&gt;C: Wait     activate Main     C-&gt;&gt;-Main: Return     deactivate Main  <p>We have a number of problems here. The more tasks we have, and the shorter the tasks, the less time the main thread has to do any useful work before waiting and the more time it spends waiting for tasks. Even worse, we already know how these tasks should continue: we are just waiting to attach this continuation. At a certain point, it might not even be worth using asynchronous code at all.</p>"},{"location":"futures/continuable_futures/#polling","title":"Polling","text":"<p>The second alternative to solve this problem is polling. In this case, we would make task B wait for A before doing its work. The same for task B and C.</p> Polling the previous task <pre><code>std::future&lt;int&gt; A = std::async([]() { return 65; });\n\nstd::future&lt;char&gt; B = std::async([&amp;A]() {\n// B waits for A in its turn\nint v = A.get();\n// Use the value\nreturn static_cast&lt;char&gt;(v);\n});\n\nstd::future&lt;void&gt; C = std::async([&amp;B]() {\nassert(B.get() == 'A');\n});\n\nC.wait();\n</code></pre> <p>And now we have:</p>  sequenceDiagram     Main-&gt;&gt;+A: Launch     Main-&gt;&gt;+B: Launch     Main-&gt;&gt;+C: Launch     B-&gt;&gt;A: Wait     C-&gt;&gt;B: Wait     Main-&gt;&gt;Main: Do work     A-&gt;&gt;-B: Return     B-&gt;&gt;-C: Return     Main-&gt;&gt;C: Wait     C-&gt;&gt;-Main: Return  <p>This might look more reasonable from the perspective of the main thread. We are not waiting for so long inline, and we have more time to do work in parallel. However, this outsources the cost of waiting to other threads even though we know the initial task is not ready. Note for how long the tasks A, B, and C are active in this example.</p> <p>Thus, the biggest problem with this strategy is it cannot scale properly. For every task in our application, we would need one idle thread waiting for the previous task. In an application with 2000 tasks, we would need 1999 threads for polling antecedent tasks and only one thread would to execute real work.</p> <p>Continuations in C++ libraries</p> <p>The act of waiting for a std::future result is synchronous, which is not appropriate in communication-intensive code. In the original std::future model, if a continuation task <code>B</code> depends on the result of the first task <code>A</code>, we only have two options:</p> <ul> <li>waiting for the first task synchronously</li> <li>polling the first task asynchronously.</li> </ul> <p>If we always wait for the first task to start its continuation, the asynchronicity has no purpose. If we always poll for the first task, we waste resources and an extra thread to repeatedly check the status of the first task.</p> <p>For this reason, the most common extension proposed for std::future is continuations, such as implemented in Microsoft's PPL, async++, continuable.</p> WaitingPollingContinuations <pre><code>std::future A = std::async([]() { return 2; });\nint A_result = A.get();\nstd::cout &lt;&lt; A_result &lt;&lt; std::endl;\n</code></pre> <pre><code>std::future A = std::async([]() { return 2; });\nstd::future B = std::async([&amp;]() {\nint A_result = A.get();\nstd::cout &lt;&lt; A_result &lt;&lt; std::endl;\n});\nB.wait();\n</code></pre> <pre><code>auto A = std::experimental::async([]() { return 2; });\nauto B = A.then([](int A_result) {\nstd::cout &lt;&lt; A_result &lt;&lt; std::endl;\n});\nB.wait();\n</code></pre> <p>Continuations are the foundation for composing task graphs, with operations such as std::experimental::when_all and std::experimental::when_any. These conjunction and disjunction operations depend on continuations so that previous tasks can inform the operation result when they are ready without polling.</p>"},{"location":"futures/continuable_futures/#continuable-futures_1","title":"Continuable futures","text":"<p>Continuable futures allow us to launch a second task as a continuation to the first task, instead of an independent task.</p> Continuable futures <pre><code>cfuture&lt;int&gt; A = async([]() { return 65; });\ncfuture&lt;char&gt; B = A.then([](int v) {\nreturn static_cast&lt;char&gt;(v);\n});\ncfuture&lt;void&gt; C = then(B, [](char c) { assert(c == 'A'); });\nC.wait();\n</code></pre> <p>Note we can use both the member function basic_future::then or the free function then. basic_future::then allows chaining while the free function then allows interoperability between future types.</p> Chaining continuations <pre><code>cfuture&lt;void&gt; C = async([]() {\nreturn 65;\n}).then([](int v) {\nreturn static_cast&lt;char&gt;(v);\n}).then([](char c) {\nassert(c == 'A');\n});\nC.wait();\n</code></pre> <p>In these examples,</p> <ul> <li>it's up to the continuation to wait for the previous task, and</li> <li>it's up to the previous task to launch its own continuations</li> </ul> <p>In other words, task B does not have to pool task A because task A is launching task B. Task B knows A is ready and can just take it from there.</p>  sequenceDiagram     Main-&gt;&gt;A: Launch     activate A     Main--&gt;&gt;B: Attach to A     Main--&gt;&gt;C: Attach to B     A-&gt;&gt;B: Launch     deactivate A     activate B     B-&gt;&gt;C: Launch     deactivate B     activate C     Main-&gt;&gt;Main: Do work     Main-&gt;&gt;C : Wait     activate Main     C-&gt;&gt;Main: Return     deactivate Main     deactivate C  <p>In this solution, the main thread has more time to do useful work, such as scheduling other tasks, and the processing time we spend on waiting is minimized.</p> <p>Continuation Unwrapping</p> <p>You might notice that continuation functions also unwrap the previous future value. A continuation function for <code>future&lt;A&gt;</code> might have a parameter <code>future&lt;A&gt;</code> or <code>A</code>. More patterns of continuation unwrapping are described in Section adaptors/continuations. </p> <p>For this reason, continuations are one of the most common proposed extensions for std::future, including the original model presented by the Microsoft PPL Library which inspired the C++ Extensions for Concurrency.</p> <p>Eager Future Continuations in C++</p> <p>Eager futures with eager continuation chaining, such as in std::experimental::future, allow us to asynchronously register a second operation and pass data to it. The first task might already be running eagerly.</p> <ul> <li>The continuation is attached after the first task is scheduled</li> <li>The continuation is scheduled as soon as, but not before, the first task is ready</li> </ul> <p>The process does not consume any polling threads. The continuation can also have its continuations and so on. In this scenario, attaching a continuation has its own synchronization cost.</p>"},{"location":"futures/continuable_futures/#deferred-continuations","title":"Deferred continuations","text":"<p>The process of attaching continuations to a future whose main task is potentially executing has a synchronization cost. When attaching a continuation, we need to check if the future is not currently attempting to run the continuations and vice-versa. This synchronization cost was identified in N3747.</p> <p>The library implements this procedure with atomic operations to avoid this cost. However, in some contexts, the cost of continuations can be further minimized by launching deferred futures.</p> Continuable futures <pre><code>auto A = schedule([]() { return 65; });\n\nauto B = then(A, [](int v) { return static_cast&lt;char&gt;(v); });\n\nauto C = then(B, [](char c) { assert(c == 'A'); });\n\nC.wait(); // launch A now!\n</code></pre> <p>The continuation to a deferred shared state created with schedule is also deferred by default. When the task related to any shared state is deferred, we have a different sequence of events:</p>  sequenceDiagram     Main-&gt;&gt;A: Schedule     Main--&gt;&gt;B: Attach to A     Main--&gt;&gt;C: Attach to B     Main-&gt;&gt;C : Wait     activate Main     C-&gt;&gt;B : Request start     B-&gt;&gt;A : Request start     activate A     B-&gt;&gt;A: Wait     A-&gt;&gt;B: Return     deactivate A     activate B     C-&gt;&gt;B: Wait     B-&gt;&gt;C: Return     deactivate B     activate C     Main-&gt;&gt;Main: Do work     C-&gt;&gt;Main: Return     deactivate C     deactivate Main  <p>In this case, the synchronization cost can be completely removed because the task will only be sent to the executor once its continuations have already been attached to it. Notice how tasks B and C are never waiting at the same time.</p> <p>Deferred futures can also avoid the list of continuations all together. When requesting a deferred continuation to start, it can simply wait for the previous task inline before sending its own task to the executor.</p> <p>While an eager future stores its continuations:</p>  graph LR subgraph Eager futures A --&gt; |store|B --&gt; |store|C end  <p>A deferred continuation can store the previous task:</p>  graph LR subgraph Deferred futures C --&gt; |store|D --&gt; |store|A end  <p>Thus, deferred futures without explicit continuation lists can still have lazy continuations, as the continuation task will store its previous task, forming a chain of tasks in the shared state of these objects. This allows deferred futures to have the member function basic_future::then defined even we no continuation list is available.</p> <p>In fact, this is safer than continuation lists for deferred futures. Let A and B be deferred tasks. Because they are not eager, task A will not be launched before task B and then post task B to the executor. When we wait for task B, it will be launched, which would take room in the executor. Task B, already running, will need to wait for task A. At the point, however, the executor might not have the enough capacity for launching task A because B is already running and polling A:</p>  sequenceDiagram     Main -&gt;&gt; A: Create     Main -&gt;&gt; B: Create     A -&gt;&gt; B: Store as continuation     Main -&gt;&gt; B: Wait     B -&gt;&gt; B: Post task     B -&gt;&gt; A: Wait (using executor)     A -&gt;&gt; A: Do work (might fail)     A -&gt;&gt; B: Return     B -&gt;&gt; B: Do work  <p>The library solves this problem by checking for previous continuations of A before starting B. But deferred continuations can solve the problem natively:</p>  sequenceDiagram     Main -&gt;&gt; A: Create     Main -&gt;&gt; B: Create     B -&gt;&gt; A: Stores inline     Main -&gt;&gt; B: Wait     B -&gt;&gt; A: Wait inline     A -&gt;&gt; A: Do work (executor is free)     A -&gt;&gt; B: Return     B -&gt;&gt; B: Post task     B -&gt;&gt; B: Do work  <p>For this reason, by default, then attaches the previous future to its deferred continuation instead of attaching the continuation to the antecedent future.</p> <p>Lazy future continuations in C++</p> <p>Lazy futures with lazy continuation chaining store the continuation in the shared state of the first task before the task is scheduled.</p> <ul> <li>The continuation is attached before the first task starts to execute</li> <li>The continuation is scheduled as soon as, but not before, the first task is ready</li> </ul> <p>As usual, all futures are programmed to run its internal continuations when they finish their main task. This also avoids blocking waits and wasting threads pooling for the results of the antecedent task. In this scenario, attaching a continuation has no synchronization cost.</p> Continuations <pre><code>auto A = std::experimental::async([]() { return 2; });\nauto B = A.then([](int A_result) {\n// This task is not scheduled until A completes\nstd::cout &lt;&lt; A_result &lt;&lt; std::endl;\n});\nB.wait();\n</code></pre> <p>Exceptions and continuations in C++</p> <p>If the antecedent future throws an exception, attempting to retrieve the result usually rethrows the error. Some models besides C++ Extensions for Concurrency, such as Continuable, allow the continuation to also catch this error:</p> Catching errors <pre><code>async([]{ /* operation that might throw an error */ })\n.then([] {\nthrow std::exception(\"Some error\");\n})\n.fail([] (std::exception_ptr ptr) {\ntry {\nstd::rethrow_exception(ptr);\n} catch(std::exception const&amp; e) {\n// Handle the exception or error code here\n}\n});\n</code></pre> <p>Continuations and Executors in C++</p> <p>By default, the first task usually includes an executor handle and the continuation inherits it unless some other executor is requested for the continuation. Futures with continuations can also be used as components of resumable functions.</p>"},{"location":"futures/deferred/","title":"Deferred tasks","text":"<p>The function schedule can be used to create lazy tasks.</p> Scheduling deferred tasks <pre><code>auto f1 = schedule([] {\n// No parameters\nlong_task();\n});\nauto f2 = schedule([](int x) { assert(x == 2); }, 2);\nauto f3 = schedule([](int x, int y) { return x + y; }, 2, 3);\nauto f4 = schedule(ex, [] {\n// Custom executor\nlong_task();\n});\nauto f5 = schedule(make_inline_executor(), [] {\n// Inline executor\nlong_task();\n});\n\n// Tasks are only launched now!\nf1.wait();\nf2.wait();\nassert(f3.get() == 5);\nf4.wait();\nf5.wait();\n</code></pre> <p>The main difference between async and schedule is the latter only posts the task to the executor when we call basic_future::wait or basic_future::get on the corresponding future:</p>  sequenceDiagram     Main-&gt;&gt;Task: Schedule     Main-&gt;&gt;+Task: Wait     Task-&gt;&gt;Task: Do work     Task-&gt;&gt;-Main: Return  <p>Deferred tasks allow a number of optimizations, such as storing the shared state inline and no synchronization cost to attach continuations.</p> <p>Benchmark: Launching Tasks</p> <p>The library includes a number of optimizations to ensure the allocation and synchronization costs of eager tasks are mitigated. Here's a small benchmark comparing eager and deferred futures for short tasks:</p> <p> {   \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",   \"data\": {     \"values\": [        {\"Task Duration (ns)\": 100, \"Eager (Thread Pool)\": 69366, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 68506, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 55757, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 55011, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 54866, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 200, \"Eager (Thread Pool)\": 69585, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 68786, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 55928, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 55161, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 55063, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 300, \"Eager (Thread Pool)\": 69601, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 68732, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 55938, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 55177, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 55074, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 400, \"Eager (Thread Pool)\": 69818, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 68918, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 56174, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 55313, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 55177, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 500, \"Eager (Thread Pool)\": 69798, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 69073, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 56284, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 55495, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 55384, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 600, \"Eager (Thread Pool)\": 69891, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 68999, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 56273, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 55495, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 55379, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 700, \"Eager (Thread Pool)\": 70063, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 69356, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 56388, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 55640, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 55522, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 800, \"Eager (Thread Pool)\": 70226, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 69249, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 56547, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 55696, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 55630, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 900, \"Eager (Thread Pool)\": 70164, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 69371, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 56631, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 55781, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 55722, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 1000, \"Eager (Thread Pool)\": 70350, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 69489, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 56754, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 55987, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 55862, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 1100, \"Eager (Thread Pool)\": 70352, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 69514, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 56780, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 55998, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 55970, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 1200, \"Eager (Thread Pool)\": 70562, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 69744, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 56967, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 56113, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 56062, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 1300, \"Eager (Thread Pool)\": 70716, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 69770, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 57059, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 56291, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 56235, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 1400, \"Eager (Thread Pool)\": 70652, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 70502, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 57085, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 56256, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 56260, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 1500, \"Eager (Thread Pool)\": 70760, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 69901, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 57239, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 56442, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 56356, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 1600, \"Eager (Thread Pool)\": 70892, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 70078, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 57298, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 56510, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 56432, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 1700, \"Eager (Thread Pool)\": 70962, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 70252, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 57387, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 56683, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 56521, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 1800, \"Eager (Thread Pool)\": 71192, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 70383, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 57616, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 56801, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 56688, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 1900, \"Eager (Thread Pool)\": 71848, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 70447, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 57618, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 56810, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 56768, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 2000, \"Eager (Thread Pool)\": 71335, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 70540, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 57724, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 56996, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 56900, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 2100, \"Eager (Thread Pool)\": 71438, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 70748, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 57860, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 57089, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 57033, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 2200, \"Eager (Thread Pool)\": 73190, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 70815, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 57956, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 57133, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 57077, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 2300, \"Eager (Thread Pool)\": 71631, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 70783, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 58038, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 57300, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 57259, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 2400, \"Eager (Thread Pool)\": 71871, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 70938, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 58176, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 57373, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 57322, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 2500, \"Eager (Thread Pool)\": 71837, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 71048, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 58468, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 57468, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 57341, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 2600, \"Eager (Thread Pool)\": 72007, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 71190, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 58359, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 57602, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 57529, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 2700, \"Eager (Thread Pool)\": 72030, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 71211, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 58406, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 57660, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 57584, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 2800, \"Eager (Thread Pool)\": 72182, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 71322, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 58523, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 57816, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 57685, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 2900, \"Eager (Thread Pool)\": 72298, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 71554, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 58683, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 57948, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 57839, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 3000, \"Eager (Thread Pool)\": 72296, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 71482, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 58740, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 57958, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 57894, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 3100, \"Eager (Thread Pool)\": 72483, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 71818, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 58906, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 58135, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 58035, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 3200, \"Eager (Thread Pool)\": 72491, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 71672, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 58915, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 58161, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 58084, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 3300, \"Eager (Thread Pool)\": 72705, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 71791, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 59223, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 58251, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 58172, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 3400, \"Eager (Thread Pool)\": 72778, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 71952, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 59270, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 58553, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 58336, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 3500, \"Eager (Thread Pool)\": 72788, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 71947, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 59215, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 58399, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 58372, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 3600, \"Eager (Thread Pool)\": 72923, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 72064, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 59341, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 58588, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 58495, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 3700, \"Eager (Thread Pool)\": 72996, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 72226, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 59499, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 58720, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 58656, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 3800, \"Eager (Thread Pool)\": 73048, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 72261, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 59536, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 58740, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 58681, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 3900, \"Eager (Thread Pool)\": 73354, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 72411, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 59696, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 58895, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 58845, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 4000, \"Eager (Thread Pool)\": 73345, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 72549, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 59718, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 59033, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 58887, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 4100, \"Eager (Thread Pool)\": 73467, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 73339, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 59853, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 59013, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 58995, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 4200, \"Eager (Thread Pool)\": 73575, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 72748, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 59980, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 59214, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 59124, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 4300, \"Eager (Thread Pool)\": 73915, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 72795, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 60006, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 59209, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 59160, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 4400, \"Eager (Thread Pool)\": 74545, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 72847, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 60161, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 59397, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 59290, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 4500, \"Eager (Thread Pool)\": 74628, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 73012, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 60268, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 59485, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 59471, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 4600, \"Eager (Thread Pool)\": 74682, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 73097, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 60374, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 59538, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 59497, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 4700, \"Eager (Thread Pool)\": 74079, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 73296, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 60496, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 59661, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 59640, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 4800, \"Eager (Thread Pool)\": 74159, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 73343, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 60559, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 59810, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 59705, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 4900, \"Eager (Thread Pool)\": 75038, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 73448, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 60684, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 59863, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 59791, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 5000, \"Eager (Thread Pool)\": 74351, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 73571, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 60811, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 59991, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 59937, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 5100, \"Eager (Thread Pool)\": 74392, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 73652, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 60840, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 60029, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 59970, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 5200, \"Eager (Thread Pool)\": 74573, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 73759, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 60948, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 60189, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 60098, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 5300, \"Eager (Thread Pool)\": 74614, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 73856, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 61084, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 60321, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 60270, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 5400, \"Eager (Thread Pool)\": 75308, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 73940, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 61151, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 60382, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 60260, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 5500, \"Eager (Thread Pool)\": 74893, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 74055, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 61294, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 60496, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 60416, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 5600, \"Eager (Thread Pool)\": 74916, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 74029, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 61348, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 60586, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 60555, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 5700, \"Eager (Thread Pool)\": 74971, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 74150, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 61414, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 60646, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 60564, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 5800, \"Eager (Thread Pool)\": 75194, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 74380, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 61594, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 60812, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 60810, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 5900, \"Eager (Thread Pool)\": 75277, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 74426, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 61583, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 60864, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 60790, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 6000, \"Eager (Thread Pool)\": 75381, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 74475, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 61757, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 61008, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 60931, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 6100, \"Eager (Thread Pool)\": 76333, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 74657, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 61898, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 61157, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 61065, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 6200, \"Eager (Thread Pool)\": 75535, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 74658, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 61879, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 61169, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 61082, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 6300, \"Eager (Thread Pool)\": 75640, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 74883, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 62036, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 61297, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 61235, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 6400, \"Eager (Thread Pool)\": 75697, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 74939, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 62117, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 61321, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 61325, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 6500, \"Eager (Thread Pool)\": 75801, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 75001, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 62225, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 61447, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 61417, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 6600, \"Eager (Thread Pool)\": 76026, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 75138, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 62523, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 61613, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 61546, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 6700, \"Eager (Thread Pool)\": 76018, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 75207, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 62390, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 61637, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 61644, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 6800, \"Eager (Thread Pool)\": 76830, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 75375, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 62504, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 61748, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 61700, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 6900, \"Eager (Thread Pool)\": 76281, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 75912, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 62673, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 61873, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 61880, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 7000, \"Eager (Thread Pool)\": 76315, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 75447, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 62694, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 61936, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 61885, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 7100, \"Eager (Thread Pool)\": 76489, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 75688, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 62882, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 62123, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 62057, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 7200, \"Eager (Thread Pool)\": 76658, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 75867, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 63032, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 62209, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 62167, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 7300, \"Eager (Thread Pool)\": 76651, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 76606, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 63241, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 62246, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 62277, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 7400, \"Eager (Thread Pool)\": 76804, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 75977, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 63180, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 62455, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 62375, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 7500, \"Eager (Thread Pool)\": 76778, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 75973, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 63275, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 62431, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 62407, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 7600, \"Eager (Thread Pool)\": 76994, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 76155, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 63378, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 62609, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 62563, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 7700, \"Eager (Thread Pool)\": 77799, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 76236, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 63470, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 62786, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 62708, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 7800, \"Eager (Thread Pool)\": 77142, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 77138, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 63523, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 62738, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 62646, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 7900, \"Eager (Thread Pool)\": 77273, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 76424, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 63662, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 62906, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 62837, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 8000, \"Eager (Thread Pool)\": 77394, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 76553, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 63758, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 62971, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 62987, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 8100, \"Eager (Thread Pool)\": 77374, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 76586, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 63826, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 63081, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 62993, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 8200, \"Eager (Thread Pool)\": 77503, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 76638, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 64004, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 63267, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 63144, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 8300, \"Eager (Thread Pool)\": 77656, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 76801, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 64041, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 63228, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 63155, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 8400, \"Eager (Thread Pool)\": 77695, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 76990, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 64177, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 63436, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 63386, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 8500, \"Eager (Thread Pool)\": 77834, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 77058, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 64288, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 63532, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 63510, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 8600, \"Eager (Thread Pool)\": 77984, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 77093, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 64336, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 63599, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 63523, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 8700, \"Eager (Thread Pool)\": 78960, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 77198, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 64486, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 63706, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 63668, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 8800, \"Eager (Thread Pool)\": 78084, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 77362, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 64568, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 63766, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 63765, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 8900, \"Eager (Thread Pool)\": 78205, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 77452, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 64624, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 63914, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 63818, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 9000, \"Eager (Thread Pool)\": 78476, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 77574, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 64778, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 64052, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 64099, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 9100, \"Eager (Thread Pool)\": 78416, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 77595, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 64845, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 64071, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 63981, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 9200, \"Eager (Thread Pool)\": 78648, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 77764, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 64980, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 64176, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 64127, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 9300, \"Eager (Thread Pool)\": 78679, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 78709, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 65110, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 64369, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 64335, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 9400, \"Eager (Thread Pool)\": 78713, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 77921, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 65167, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 64342, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 64301, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 9500, \"Eager (Thread Pool)\": 78858, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 78835, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 65272, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 64554, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 64460, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 9600, \"Eager (Thread Pool)\": 78899, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 78096, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 65349, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 64591, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 64491, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 9700, \"Eager (Thread Pool)\": 79055, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 78169, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 65464, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 64634, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 64609, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 9800, \"Eager (Thread Pool)\": 79351, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 78325, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 65602, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 64832, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 64812, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 9900, \"Eager (Thread Pool)\": 79278, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 78403, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 65624, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 64849, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 64767, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 10000, \"Eager (Thread Pool)\": 79303, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 78587, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 65783, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 64971, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 64989, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 10100, \"Eager (Thread Pool)\": 79498, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 78725, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 65897, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 65142, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 65147, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 10200, \"Eager (Thread Pool)\": 79540, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 79492, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 65949, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 65197, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 65093, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 10300, \"Eager (Thread Pool)\": 79698, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 78832, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 66091, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 65364, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 65309, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 10400, \"Eager (Thread Pool)\": 79642, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 78975, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 66162, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 65371, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 65364, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 10500, \"Eager (Thread Pool)\": 79872, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 79018, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 66224, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 65467, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 65443, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 10600, \"Eager (Thread Pool)\": 80064, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 79214, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 66431, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 65660, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 65573, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 10700, \"Eager (Thread Pool)\": 80083, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 79338, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 66424, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 65635, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 65617, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 10800, \"Eager (Thread Pool)\": 80195, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 79277, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 66611, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 65780, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 65703, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 10900, \"Eager (Thread Pool)\": 80301, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 79488, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 66639, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 66005, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 65876, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 11000, \"Eager (Thread Pool)\": 80234, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 79502, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 66789, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 66010, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 65896, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 11100, \"Eager (Thread Pool)\": 80505, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 79710, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 66859, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 66125, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 66053, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 11200, \"Eager (Thread Pool)\": 80535, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 79673, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 66916, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 66194, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 66163, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 11300, \"Eager (Thread Pool)\": 80670, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 79905, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 67045, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 66356, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 66304, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 11400, \"Eager (Thread Pool)\": 80887, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 80001, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 67257, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 66514, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 66424, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 11500, \"Eager (Thread Pool)\": 80896, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 80286, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 67213, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 66478, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 66468, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 11600, \"Eager (Thread Pool)\": 80923, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 80089, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 67405, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 66634, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 66607, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 11700, \"Eager (Thread Pool)\": 81075, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 80320, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 67545, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 66783, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 66721, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 11800, \"Eager (Thread Pool)\": 81286, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 80375, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 67533, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 66768, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 66743, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 11900, \"Eager (Thread Pool)\": 81295, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 80501, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 67728, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 66914, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 66838, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 12000, \"Eager (Thread Pool)\": 81359, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 80612, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 67761, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 66978, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 66948, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 12100, \"Eager (Thread Pool)\": 81582, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 80692, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 67845, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 67103, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 67034, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 12200, \"Eager (Thread Pool)\": 81757, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 80811, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 67946, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 67395, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 67396, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 12300, \"Eager (Thread Pool)\": 81791, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 80910, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 68063, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 67254, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 67241, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 12400, \"Eager (Thread Pool)\": 81727, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 80915, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 68175, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 67346, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 67417, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 12500, \"Eager (Thread Pool)\": 82296, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 81125, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 68322, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 67589, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 67473, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 12600, \"Eager (Thread Pool)\": 81945, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 81129, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 68363, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 67586, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 67565, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 12700, \"Eager (Thread Pool)\": 82101, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 81280, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 68469, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 67764, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 67698, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 12800, \"Eager (Thread Pool)\": 82241, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 81278, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 68552, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 67806, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 67774, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 12900, \"Eager (Thread Pool)\": 82239, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 81466, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 68611, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 67878, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 67855, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 13000, \"Eager (Thread Pool)\": 82392, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 81532, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 68866, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 68044, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 68052, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 13100, \"Eager (Thread Pool)\": 82386, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 81625, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 68847, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 68137, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 68071, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 13200, \"Eager (Thread Pool)\": 82623, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 81773, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 68994, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 68273, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 68174, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 13300, \"Eager (Thread Pool)\": 82704, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 81835, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 69085, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 68349, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 68270, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 13400, \"Eager (Thread Pool)\": 83551, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 81841, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 69110, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 68378, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 68318, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 13500, \"Eager (Thread Pool)\": 82867, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 82063, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 69328, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 68538, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 68475, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 13600, \"Eager (Thread Pool)\": 82969, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 82194, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 69350, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 68633, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 68571, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 13700, \"Eager (Thread Pool)\": 83085, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 82248, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 69507, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 68747, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 68706, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 13800, \"Eager (Thread Pool)\": 83186, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 82384, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 69598, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 68862, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 68785, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 13900, \"Eager (Thread Pool)\": 83370, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 82504, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 69650, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 68869, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 68850, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 14000, \"Eager (Thread Pool)\": 83286, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 82487, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 69720, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 69044, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 68978, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 14100, \"Eager (Thread Pool)\": 84277, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 82711, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 69939, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 69160, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 69114, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 14200, \"Eager (Thread Pool)\": 83519, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 82677, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 69958, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 69171, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 69159, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 14300, \"Eager (Thread Pool)\": 83750, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 82849, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 70174, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 69366, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 69301, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 14400, \"Eager (Thread Pool)\": 83602, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 82887, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 70129, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 69387, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 69358, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 14500, \"Eager (Thread Pool)\": 83788, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 83036, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 70248, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 69482, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 69420, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 14600, \"Eager (Thread Pool)\": 83933, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 83165, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 70446, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 69666, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 69610, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 14700, \"Eager (Thread Pool)\": 84069, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 83262, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 70438, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 69676, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 69603, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 14800, \"Eager (Thread Pool)\": 84211, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 83320, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 70558, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 69856, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 69752, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 14900, \"Eager (Thread Pool)\": 84436, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 83480, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 70743, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 69960, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 69915, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 15000, \"Eager (Thread Pool)\": 84325, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 83524, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 70744, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 69980, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 69984, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 15100, \"Eager (Thread Pool)\": 84493, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 83722, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 70902, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 70156, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 70068, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 15200, \"Eager (Thread Pool)\": 84509, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 83744, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 71035, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 70216, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 70157, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 15300, \"Eager (Thread Pool)\": 84583, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 83863, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 71073, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 70321, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 70242, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 15400, \"Eager (Thread Pool)\": 84766, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 84028, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 71196, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 70432, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 70395, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 15500, \"Eager (Thread Pool)\": 84859, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 84073, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 71223, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 70456, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 70415, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 15600, \"Eager (Thread Pool)\": 84964, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 84171, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 71408, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 70622, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 70582, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 15700, \"Eager (Thread Pool)\": 85129, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 84333, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 71517, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 70770, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 70729, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 15800, \"Eager (Thread Pool)\": 85153, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 84376, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 71580, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 70775, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 70761, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 15900, \"Eager (Thread Pool)\": 85311, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 84515, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 71662, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 70910, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 70918, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 16000, \"Eager (Thread Pool)\": 85420, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 84538, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 71741, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 70988, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 71002, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 16100, \"Eager (Thread Pool)\": 85444, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 84709, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 71859, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 71122, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 71082, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 16200, \"Eager (Thread Pool)\": 85521, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 84858, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 72015, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 71276, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 71201, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 16300, \"Eager (Thread Pool)\": 85622, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 84813, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 72021, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 71244, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 71233, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 16400, \"Eager (Thread Pool)\": 85675, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 84963, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 72199, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 71392, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 71342, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 16500, \"Eager (Thread Pool)\": 85914, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 85258, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 72306, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 71578, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 71529, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 16600, \"Eager (Thread Pool)\": 85964, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 85161, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 72330, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 71592, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 71520, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 16700, \"Eager (Thread Pool)\": 86088, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 85266, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 72623, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 71743, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 71744, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 16800, \"Eager (Thread Pool)\": 86240, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 85349, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 72657, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 71899, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 71762, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 16900, \"Eager (Thread Pool)\": 86212, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 85437, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 72655, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 71900, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 71845, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 17000, \"Eager (Thread Pool)\": 86590, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 85594, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 72819, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 72091, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 71979, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 17100, \"Eager (Thread Pool)\": 86482, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 85645, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 72866, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 72114, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 72014, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 17200, \"Eager (Thread Pool)\": 86491, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 86435, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 72956, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 72234, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 72166, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 17300, \"Eager (Thread Pool)\": 86752, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 85980, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 73174, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 72472, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 72313, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 17400, \"Eager (Thread Pool)\": 86754, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 85949, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 73155, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 72403, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 72412, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 17500, \"Eager (Thread Pool)\": 86929, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 86171, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 73310, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 72559, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 72523, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 17600, \"Eager (Thread Pool)\": 87033, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 86213, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 73398, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 72619, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 72562, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 17700, \"Eager (Thread Pool)\": 86980, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 86213, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 73472, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 72657, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 72645, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 17800, \"Eager (Thread Pool)\": 87205, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 86472, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 73623, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 72867, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 72775, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 17900, \"Eager (Thread Pool)\": 87291, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 86534, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 73686, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 72857, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 72836, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 18000, \"Eager (Thread Pool)\": 87481, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 87602, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 73879, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 73040, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 72982, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 18100, \"Eager (Thread Pool)\": 87554, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 86685, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 73928, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 73202, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 73109, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 18200, \"Eager (Thread Pool)\": 87614, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 86733, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 73959, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 73207, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 73173, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 18300, \"Eager (Thread Pool)\": 87693, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 86875, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 74142, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 73340, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 73257, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 18400, \"Eager (Thread Pool)\": 87813, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 87556, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 74200, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 73402, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 73421, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 18500, \"Eager (Thread Pool)\": 87962, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 87067, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 74317, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 73509, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 73486, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 18600, \"Eager (Thread Pool)\": 88065, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 87265, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 74449, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 73678, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 73663, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 18700, \"Eager (Thread Pool)\": 88117, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 87274, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 74463, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 73701, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 73646, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 18800, \"Eager (Thread Pool)\": 88323, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 87294, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 74630, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 73852, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 73776, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 18900, \"Eager (Thread Pool)\": 88308, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 87437, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 74711, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 73947, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 73944, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 19000, \"Eager (Thread Pool)\": 88446, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 87576, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 74763, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 74043, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 74002, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 19100, \"Eager (Thread Pool)\": 88532, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 87790, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 74901, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 74158, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 74075, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 19200, \"Eager (Thread Pool)\": 88586, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 87728, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 74964, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 74281, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 74172, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 19300, \"Eager (Thread Pool)\": 88724, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 87809, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 75090, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 74348, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 74267, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 19400, \"Eager (Thread Pool)\": 88856, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 88059, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 75445, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 74458, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 74400, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 19500, \"Eager (Thread Pool)\": 88825, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 88042, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 75247, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 74493, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 74430, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 19600, \"Eager (Thread Pool)\": 88999, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 88159, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 75424, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 74603, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 74632, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 19700, \"Eager (Thread Pool)\": 89142, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 88365, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 75554, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 74773, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 75086, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 19800, \"Eager (Thread Pool)\": 89153, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 88327, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 75568, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 74786, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 74786, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 19900, \"Eager (Thread Pool)\": 89269, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 88505, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 75725, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 74963, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 74914, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 20000, \"Eager (Thread Pool)\": 89363, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 88653, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 75756, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 75040, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 74996, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 20100, \"Eager (Thread Pool)\": 89448, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 88623, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 75905, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 75117, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 75046, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 20200, \"Eager (Thread Pool)\": 89650, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 88838, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 76001, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 75281, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 75216, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 20300, \"Eager (Thread Pool)\": 89722, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 88944, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 76042, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 75237, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 75260, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 20400, \"Eager (Thread Pool)\": 89771, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 89031, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 76289, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 75429, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 75439, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 20500, \"Eager (Thread Pool)\": 89878, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 89107, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 76291, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 75574, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 75501, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 20600, \"Eager (Thread Pool)\": 89891, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 89045, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 76362, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 75618, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 75532, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 20700, \"Eager (Thread Pool)\": 90230, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 89357, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 76490, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 75775, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 75661, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 20800, \"Eager (Thread Pool)\": 90106, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 89396, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 76601, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 75797, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 75780, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 20900, \"Eager (Thread Pool)\": 90408, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 89437, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 76728, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 75918, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 75912, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 21000, \"Eager (Thread Pool)\": 90410, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 90501, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 76834, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 76146, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 76034, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 21100, \"Eager (Thread Pool)\": 90396, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 89623, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 76796, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 76037, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 76026, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 21200, \"Eager (Thread Pool)\": 90564, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 89807, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 76968, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 76207, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 76144, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 21300, \"Eager (Thread Pool)\": 90680, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 90016, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 77118, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 76409, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 76353, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 21400, \"Eager (Thread Pool)\": 90705, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 89950, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 77195, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 76381, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 76319, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 21500, \"Eager (Thread Pool)\": 90925, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 90121, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 77303, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 76542, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 76549, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 21600, \"Eager (Thread Pool)\": 90941, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 90177, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 77352, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 76593, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 76542, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 21700, \"Eager (Thread Pool)\": 91099, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 90257, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 77455, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 76732, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 76681, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 21800, \"Eager (Thread Pool)\": 91250, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 90432, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 77628, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 76877, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 76815, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 21900, \"Eager (Thread Pool)\": 91732, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 90444, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 77662, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 76899, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 76885, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 22000, \"Eager (Thread Pool)\": 91422, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 90636, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 77821, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 77010, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 76984, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 22100, \"Eager (Thread Pool)\": 91514, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 90678, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 78002, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 77168, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 77142, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 22200, \"Eager (Thread Pool)\": 91471, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 90726, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 77947, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 77216, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 77153, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 22300, \"Eager (Thread Pool)\": 91696, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 90963, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 78143, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 77366, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 77334, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 22400, \"Eager (Thread Pool)\": 91759, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 90926, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 78197, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 77503, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 77366, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 22500, \"Eager (Thread Pool)\": 91786, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 91089, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 78289, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 77511, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 77436, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 22600, \"Eager (Thread Pool)\": 92073, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 91341, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 78450, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 77663, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 77639, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 22700, \"Eager (Thread Pool)\": 92017, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 91148, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 78427, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 77638, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 77641, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 22800, \"Eager (Thread Pool)\": 92276, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 91394, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 78633, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 77838, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 77806, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 22900, \"Eager (Thread Pool)\": 92289, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 91497, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 78719, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 77984, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 77936, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 23000, \"Eager (Thread Pool)\": 93054, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 91521, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 78766, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 77995, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 77985, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 23100, \"Eager (Thread Pool)\": 92490, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 91681, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 78931, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 78162, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 78086, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 23200, \"Eager (Thread Pool)\": 93341, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 91716, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 78961, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 78229, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 78183, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 23300, \"Eager (Thread Pool)\": 92675, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 91876, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 79071, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 78304, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 78281, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 23400, \"Eager (Thread Pool)\": 93671, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 92067, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 79218, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 78500, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 78396, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 23500, \"Eager (Thread Pool)\": 93516, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 91990, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 79259, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 78515, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 78454, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 23600, \"Eager (Thread Pool)\": 93005, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 92205, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 79487, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 78627, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 78565, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 23700, \"Eager (Thread Pool)\": 93192, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 92293, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 79536, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 78814, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 78803, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 23800, \"Eager (Thread Pool)\": 93252, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 92341, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 79602, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 78844, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 78724, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 23900, \"Eager (Thread Pool)\": 93312, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 92461, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 79779, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 78982, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 78922, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 24000, \"Eager (Thread Pool)\": 93337, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 92609, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 79776, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 78959, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 79054, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 24100, \"Eager (Thread Pool)\": 93487, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 92673, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 79897, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 79111, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 79065, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 24200, \"Eager (Thread Pool)\": 93635, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 92835, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 79996, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 79260, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 79262, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 24300, \"Eager (Thread Pool)\": 93690, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 92941, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 80067, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 79272, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 79306, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 24400, \"Eager (Thread Pool)\": 93869, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 92997, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 80169, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 79493, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 79394, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 24500, \"Eager (Thread Pool)\": 94018, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 93120, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 80335, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 79617, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 79529, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 24600, \"Eager (Thread Pool)\": 93948, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 93208, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 80342, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 79567, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 79526, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 24700, \"Eager (Thread Pool)\": 94133, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 93392, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 80552, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 79792, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 79746, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 24800, \"Eager (Thread Pool)\": 94281, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 93401, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 80604, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 79829, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 79769, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 24900, \"Eager (Thread Pool)\": 94276, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 93484, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 80687, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 79905, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 79843, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 25000, \"Eager (Thread Pool)\": 94589, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 93827, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 80860, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 80092, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 80023, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 25100, \"Eager (Thread Pool)\": 94430, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 93615, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 80813, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 80095, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 80027, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 25200, \"Eager (Thread Pool)\": 94517, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 93782, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 81019, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 80229, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 80214, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 25300, \"Eager (Thread Pool)\": 94722, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 93892, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 81109, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 80400, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 80326, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 25400, \"Eager (Thread Pool)\": 94844, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 93980, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 81173, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 80441, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 80374, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 25500, \"Eager (Thread Pool)\": 94941, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 94089, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 81320, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 80520, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 80501, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 25600, \"Eager (Thread Pool)\": 94949, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 94131, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 81364, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 80641, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 80584, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 25700, \"Eager (Thread Pool)\": 95054, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 94300, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 81497, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 80747, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 80683, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 25800, \"Eager (Thread Pool)\": 95312, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 94555, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 81678, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 80876, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 80891, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 25900, \"Eager (Thread Pool)\": 95206, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 94548, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 81620, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 80905, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 80858, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 26000, \"Eager (Thread Pool)\": 95404, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 94626, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 81843, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 81064, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 81004, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 26100, \"Eager (Thread Pool)\": 95462, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 94660, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 81898, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 81165, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 81128, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 26200, \"Eager (Thread Pool)\": 95606, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 94824, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 81973, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 81192, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 81130, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 26300, \"Eager (Thread Pool)\": 96541, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 94971, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 82150, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 81374, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 81341, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 26400, \"Eager (Thread Pool)\": 95782, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 95007, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 82208, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 81360, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 81403, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 26500, \"Eager (Thread Pool)\": 95863, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 95128, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 82397, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 81514, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 81475, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 26600, \"Eager (Thread Pool)\": 95966, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 95237, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 82439, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 81670, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 81640, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 26700, \"Eager (Thread Pool)\": 96028, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 95280, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 82457, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 81684, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 81675, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 26800, \"Eager (Thread Pool)\": 96180, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 95401, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 82614, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 82252, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 81753, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 26900, \"Eager (Thread Pool)\": 96300, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 95512, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 82740, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 82019, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 81935, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 27000, \"Eager (Thread Pool)\": 96338, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 95539, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 82780, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 81983, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 81941, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 27100, \"Eager (Thread Pool)\": 96508, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 95749, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 82914, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 82186, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 82091, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 27200, \"Eager (Thread Pool)\": 97122, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 95774, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 82937, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 82206, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 82133, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 27300, \"Eager (Thread Pool)\": 96644, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 95809, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 83105, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 82301, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 82276, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 27400, \"Eager (Thread Pool)\": 96810, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 96058, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 83214, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 82450, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 82430, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 27500, \"Eager (Thread Pool)\": 96791, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 96025, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 83248, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 82499, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 82452, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 27600, \"Eager (Thread Pool)\": 97061, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 96225, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 83439, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 82635, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 82587, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 27700, \"Eager (Thread Pool)\": 97107, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 96371, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 83551, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 82799, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 82800, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 27800, \"Eager (Thread Pool)\": 97117, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 96376, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 83576, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 82808, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 82864, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 27900, \"Eager (Thread Pool)\": 97362, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 96692, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 83754, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 82932, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 82931, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 28000, \"Eager (Thread Pool)\": 97373, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 96615, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 83819, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 83106, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 82943, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 28100, \"Eager (Thread Pool)\": 97975, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 96617, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 83883, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 83121, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 83092, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 28200, \"Eager (Thread Pool)\": 97755, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 96925, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 84064, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 83297, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 83285, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 28300, \"Eager (Thread Pool)\": 97644, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 96814, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 84038, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 83335, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 83270, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 28400, \"Eager (Thread Pool)\": 97795, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 97016, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 84224, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 83463, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 83457, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 28500, \"Eager (Thread Pool)\": 97907, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 97122, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 84328, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 83606, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 83510, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 28600, \"Eager (Thread Pool)\": 98032, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 97195, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 84411, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 83670, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 83524, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 28700, \"Eager (Thread Pool)\": 98071, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 97275, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 84540, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 83776, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 83717, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 28800, \"Eager (Thread Pool)\": 98196, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 97380, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 84604, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 83873, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 83780, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 28900, \"Eager (Thread Pool)\": 98369, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 97556, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 84725, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 83979, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 83875, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 29000, \"Eager (Thread Pool)\": 98490, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 97634, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 84898, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 84088, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 84082, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 29100, \"Eager (Thread Pool)\": 99201, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 97930, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 84888, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 84095, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 84067, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 29200, \"Eager (Thread Pool)\": 99420, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 97792, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 85034, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 84241, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 84222, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 29300, \"Eager (Thread Pool)\": 98738, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 97919, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 85141, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 84395, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 84386, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 29400, \"Eager (Thread Pool)\": 98772, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 97916, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 85186, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 84417, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 84397, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 29500, \"Eager (Thread Pool)\": 98899, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 98073, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 85279, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 84584, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 84550, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 29600, \"Eager (Thread Pool)\": 98967, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 98206, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 85468, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 84644, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 84566, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 29700, \"Eager (Thread Pool)\": 99132, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 98285, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 85485, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 84708, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 84707, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 29800, \"Eager (Thread Pool)\": 99357, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 98588, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 85711, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 84921, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 84874, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 29900, \"Eager (Thread Pool)\": 99260, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 98514, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 85662, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 84877, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 84859, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 30000, \"Eager (Thread Pool)\": 99370, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 98622, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 85799, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 85042, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 85060, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 30100, \"Eager (Thread Pool)\": 100465, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 98772, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 85923, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 85232, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 85136, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 30200, \"Eager (Thread Pool)\": 99647, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 98717, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 85973, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 85210, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 85185, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 30300, \"Eager (Thread Pool)\": 99777, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 98971, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 86150, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 85361, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 85337, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 30400, \"Eager (Thread Pool)\": 101272, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 99063, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 86207, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 85420, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 85419, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 30500, \"Eager (Thread Pool)\": 99883, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 99016, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 86334, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 85511, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 85689, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 30600, \"Eager (Thread Pool)\": 99970, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 99241, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 86419, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 85704, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 85580, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 30700, \"Eager (Thread Pool)\": 100074, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 99226, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 86470, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 85725, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 85647, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 30800, \"Eager (Thread Pool)\": 100213, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 99441, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 86595, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 85854, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 85780, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 30900, \"Eager (Thread Pool)\": 100359, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 99598, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 86721, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 86031, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 85975, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 31000, \"Eager (Thread Pool)\": 101029, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 99629, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 86772, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 86006, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 85931, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 31100, \"Eager (Thread Pool)\": 100483, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 99732, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 86997, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 86197, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 86134, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 31200, \"Eager (Thread Pool)\": 100545, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 100287, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 86957, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 86201, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 86186, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 31300, \"Eager (Thread Pool)\": 100682, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 99968, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 87130, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 86358, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 86277, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 31400, \"Eager (Thread Pool)\": 100935, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 100066, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 87223, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 86490, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 86410, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 31500, \"Eager (Thread Pool)\": 100831, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 99996, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 87255, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 86493, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 86456, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 31600, \"Eager (Thread Pool)\": 102195, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 100197, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 87443, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 86627, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 86596, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 31700, \"Eager (Thread Pool)\": 101072, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 100366, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 87526, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 86784, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 86792, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 31800, \"Eager (Thread Pool)\": 101138, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 100452, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 87542, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 86817, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 86771, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 31900, \"Eager (Thread Pool)\": 101293, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 100620, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 87745, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 87013, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 86953, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 32000, \"Eager (Thread Pool)\": 101406, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 100713, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 87792, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 87029, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 87000, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 32100, \"Eager (Thread Pool)\": 101639, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 100690, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 87890, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 87163, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 87088, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 32200, \"Eager (Thread Pool)\": 101745, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 100940, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 88050, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 87276, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 87313, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 32300, \"Eager (Thread Pool)\": 101741, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 101603, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 88059, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 87279, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 87278, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 32400, \"Eager (Thread Pool)\": 102706, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 101079, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 88245, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 87429, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 87391, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 32500, \"Eager (Thread Pool)\": 102809, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 101142, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 88308, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 87616, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 87541, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 32600, \"Eager (Thread Pool)\": 102878, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 101642, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 88361, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 87625, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 87557, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 32700, \"Eager (Thread Pool)\": 102042, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 101379, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 88543, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 87764, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 87713, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 32800, \"Eager (Thread Pool)\": 102128, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 101370, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 88566, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 87817, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 87789, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 32900, \"Eager (Thread Pool)\": 102385, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 101493, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 88730, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 87925, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 87857, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 33000, \"Eager (Thread Pool)\": 102454, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 101675, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 88816, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 88095, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 88077, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 33100, \"Eager (Thread Pool)\": 102437, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 101733, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 88929, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 88107, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 88038, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 33200, \"Eager (Thread Pool)\": 102564, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 101801, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 89042, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 88219, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 88295, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 33300, \"Eager (Thread Pool)\": 102723, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 101966, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 89184, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 88407, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 88401, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 33400, \"Eager (Thread Pool)\": 103581, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 101966, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 89304, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 88421, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 88396, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 33500, \"Eager (Thread Pool)\": 102901, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 102162, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 89436, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 88613, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 88512, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 33600, \"Eager (Thread Pool)\": 102977, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 102221, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 89449, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 88628, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 88607, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 33700, \"Eager (Thread Pool)\": 103114, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 102345, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 89496, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 88995, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 88687, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 33800, \"Eager (Thread Pool)\": 103238, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 102466, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 89631, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 88872, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 88847, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 33900, \"Eager (Thread Pool)\": 103340, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 102438, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 89666, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 88893, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 88840, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 34000, \"Eager (Thread Pool)\": 103463, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 102638, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 89826, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 89055, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 88998, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 34100, \"Eager (Thread Pool)\": 103570, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 102752, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 89928, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 89165, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 89169, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 34200, \"Eager (Thread Pool)\": 103674, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 102850, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 90026, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 89213, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 89339, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 34300, \"Eager (Thread Pool)\": 103711, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 102981, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 90222, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 89366, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 89341, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 34400, \"Eager (Thread Pool)\": 103807, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 103076, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 90206, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 89462, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 89420, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 34500, \"Eager (Thread Pool)\": 103897, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 103184, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 90307, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 89530, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 89498, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 34600, \"Eager (Thread Pool)\": 104049, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 103199, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 90485, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 89681, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 89614, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 34700, \"Eager (Thread Pool)\": 104025, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 103295, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 90452, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 89695, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 89649, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 34800, \"Eager (Thread Pool)\": 104251, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 103446, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 90621, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 89835, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 89888, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 34900, \"Eager (Thread Pool)\": 104368, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 103590, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 90794, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 90011, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 90025, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 35000, \"Eager (Thread Pool)\": 104442, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 103599, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 90799, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 90107, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 90171, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 35100, \"Eager (Thread Pool)\": 104509, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 103716, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 90953, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 90144, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 90102, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 35200, \"Eager (Thread Pool)\": 104611, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 103796, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 91045, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 90234, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 90211, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 35300, \"Eager (Thread Pool)\": 105151, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 103944, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 91127, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 90294, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 90295, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 35400, \"Eager (Thread Pool)\": 104844, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 103984, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 91249, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 90464, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 90429, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 35500, \"Eager (Thread Pool)\": 104834, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 104044, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 91247, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 90530, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 90474, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 35600, \"Eager (Thread Pool)\": 105111, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 104237, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 91424, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 90663, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 90596, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 35700, \"Eager (Thread Pool)\": 105174, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 104355, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 91532, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 90784, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 90780, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 35800, \"Eager (Thread Pool)\": 105168, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 104398, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 91589, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 90845, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 90782, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 35900, \"Eager (Thread Pool)\": 105336, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 104638, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 91703, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 90964, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 90930, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 36000, \"Eager (Thread Pool)\": 105331, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 104559, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 91748, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 91035, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 90975, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 36100, \"Eager (Thread Pool)\": 105978, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 104694, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 91933, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 91115, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 91086, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 36200, \"Eager (Thread Pool)\": 105711, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 104898, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 92057, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 91304, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 91276, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 36300, \"Eager (Thread Pool)\": 105589, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 104956, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 92131, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 91310, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 91312, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 36400, \"Eager (Thread Pool)\": 106545, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 105044, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 92192, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 91464, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 91406, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 36500, \"Eager (Thread Pool)\": 105872, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 105099, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 92344, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 91614, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 91545, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 36600, \"Eager (Thread Pool)\": 105898, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 105178, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 92372, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 91643, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 91570, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 36700, \"Eager (Thread Pool)\": 106086, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 105336, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 92535, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 91795, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 91758, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 36800, \"Eager (Thread Pool)\": 106160, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 105440, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 92618, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 91871, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 91800, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 36900, \"Eager (Thread Pool)\": 106319, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 105752, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 92720, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 91909, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 91931, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 37000, \"Eager (Thread Pool)\": 106424, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 106660, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 92868, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 92104, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 92068, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 37100, \"Eager (Thread Pool)\": 106440, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 105697, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 92885, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 92102, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 92081, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 37200, \"Eager (Thread Pool)\": 106622, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 105833, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 93018, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 92275, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 92257, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 37300, \"Eager (Thread Pool)\": 106698, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 105946, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 93180, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 92413, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 92365, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 37400, \"Eager (Thread Pool)\": 106850, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 106005, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 93182, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 92422, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 92355, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 37500, \"Eager (Thread Pool)\": 107014, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 106254, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 93401, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 92594, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 92508, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 37600, \"Eager (Thread Pool)\": 106925, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 106219, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 93453, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 92611, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 92618, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 37700, \"Eager (Thread Pool)\": 107109, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 106393, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 93495, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 92695, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 92742, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 37800, \"Eager (Thread Pool)\": 107195, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 106449, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 93667, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 92867, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 92819, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 37900, \"Eager (Thread Pool)\": 107912, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 107350, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 93687, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 92929, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 92872, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 38000, \"Eager (Thread Pool)\": 107419, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 107415, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 93800, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 93090, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 93005, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 38100, \"Eager (Thread Pool)\": 107526, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 106764, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 93918, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 93197, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 93163, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 38200, \"Eager (Thread Pool)\": 107699, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 106736, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 93948, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 93191, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 93131, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 38300, \"Eager (Thread Pool)\": 107782, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 106950, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 94158, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 93369, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 93314, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 38400, \"Eager (Thread Pool)\": 108546, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 107116, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 94247, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 93495, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 93395, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 38500, \"Eager (Thread Pool)\": 107911, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 107153, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 94280, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 93518, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 93504, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 38600, \"Eager (Thread Pool)\": 108065, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 107291, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 94522, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 93675, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 93608, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 38700, \"Eager (Thread Pool)\": 109105, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 107365, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 94562, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 93690, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 93666, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 38800, \"Eager (Thread Pool)\": 108144, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 108262, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 94607, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 93846, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 93822, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 38900, \"Eager (Thread Pool)\": 108206, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 107539, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 94753, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 94012, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 93946, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 39000, \"Eager (Thread Pool)\": 108451, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 107523, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 94782, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 94008, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 93935, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 39100, \"Eager (Thread Pool)\": 108468, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 107784, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 94917, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 94221, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 94108, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 39200, \"Eager (Thread Pool)\": 109229, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 107783, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 94968, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 94252, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 94181, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 39300, \"Eager (Thread Pool)\": 108757, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 107981, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 95093, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 94335, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 94272, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 39400, \"Eager (Thread Pool)\": 108875, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 108013, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 95244, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 94517, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 94384, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 39500, \"Eager (Thread Pool)\": 109543, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 108033, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 95277, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 94500, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 94427, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 39600, \"Eager (Thread Pool)\": 108999, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 109007, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 95407, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 94623, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 94623, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 39700, \"Eager (Thread Pool)\": 109753, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 108324, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 95547, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 94773, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 94768, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 39800, \"Eager (Thread Pool)\": 109229, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 108382, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 95568, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 94776, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 94769, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 39900, \"Eager (Thread Pool)\": 109330, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 108695, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 95734, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 94990, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 94937, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 40000, \"Eager (Thread Pool)\": 109376, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 108722, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 95807, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 95008, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 94968, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 40100, \"Eager (Thread Pool)\": 110344, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 108783, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 95920, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 95078, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 95087, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 40200, \"Eager (Thread Pool)\": 109687, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 108790, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 96050, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 95282, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 95262, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 40300, \"Eager (Thread Pool)\": 109831, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 108892, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 96048, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 95287, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 95247, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 40400, \"Eager (Thread Pool)\": 109827, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 109054, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 96217, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 95423, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 95395, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 40500, \"Eager (Thread Pool)\": 109921, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 109158, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 96335, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 95611, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 95518, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 40600, \"Eager (Thread Pool)\": 110758, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 110021, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 96396, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 95620, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 95605, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 40700, \"Eager (Thread Pool)\": 110123, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 109346, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 96527, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 95782, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 95706, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 40800, \"Eager (Thread Pool)\": 110219, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 109447, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 96596, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 95837, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 95742, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 40900, \"Eager (Thread Pool)\": 110223, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 109441, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 96683, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 95902, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 95847, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 41000, \"Eager (Thread Pool)\": 110532, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 109688, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 96949, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 96072, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 96028, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 41100, \"Eager (Thread Pool)\": 110654, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 109666, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 96871, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 96098, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 96086, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 41200, \"Eager (Thread Pool)\": 110506, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 109790, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 96994, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 96249, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 96190, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 41300, \"Eager (Thread Pool)\": 110705, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 109879, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 97113, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 96391, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 96321, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 41400, \"Eager (Thread Pool)\": 110731, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 109940, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 97181, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 96334, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 96275, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 41500, \"Eager (Thread Pool)\": 110849, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 110853, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 97265, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 96516, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 96490, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 41600, \"Eager (Thread Pool)\": 110947, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 110968, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 97300, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 96623, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 96533, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 41700, \"Eager (Thread Pool)\": 111055, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 110234, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 97466, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 96716, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 96693, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 41800, \"Eager (Thread Pool)\": 111215, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 110486, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 97666, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 96868, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 96826, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 41900, \"Eager (Thread Pool)\": 111224, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 110460, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 97651, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 96898, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 96861, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 42000, \"Eager (Thread Pool)\": 111417, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 110719, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 97783, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 97044, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 96991, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 42100, \"Eager (Thread Pool)\": 112310, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 110753, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 97967, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 97182, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 97124, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 42200, \"Eager (Thread Pool)\": 111501, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 110825, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 98004, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 97173, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 97185, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 42300, \"Eager (Thread Pool)\": 111719, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 110916, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 98112, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 97336, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 97284, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 42400, \"Eager (Thread Pool)\": 111748, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 110994, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 98168, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 97402, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 97327, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 42500, \"Eager (Thread Pool)\": 111834, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 111114, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 98251, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 97525, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 97482, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 42600, \"Eager (Thread Pool)\": 112008, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 111240, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 98465, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 97683, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 97622, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 42700, \"Eager (Thread Pool)\": 112009, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 111264, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 98484, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 97655, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 97643, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 42800, \"Eager (Thread Pool)\": 112169, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 111392, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 98582, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 97815, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 97770, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 42900, \"Eager (Thread Pool)\": 112376, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 112064, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 98752, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 97962, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 97942, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 43000, \"Eager (Thread Pool)\": 112315, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 111525, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 98765, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 97986, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 97983, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 43100, \"Eager (Thread Pool)\": 112543, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 111772, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 98925, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 98161, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 98096, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 43200, \"Eager (Thread Pool)\": 112471, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 111778, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 98973, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 98222, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 98140, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 43300, \"Eager (Thread Pool)\": 112718, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 111899, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 99035, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 98307, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 98305, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 43400, \"Eager (Thread Pool)\": 112909, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 112103, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 99209, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 98513, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 98389, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 43500, \"Eager (Thread Pool)\": 112891, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 112011, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 99238, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 98446, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 98478, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 43600, \"Eager (Thread Pool)\": 112950, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 112176, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 99411, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 98655, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 98613, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 43700, \"Eager (Thread Pool)\": 113081, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 112380, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 99502, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 98772, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 98676, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 43800, \"Eager (Thread Pool)\": 113121, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 112356, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 99572, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 98739, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 98708, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 43900, \"Eager (Thread Pool)\": 113293, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 113232, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 99843, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 98920, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 98905, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 44000, \"Eager (Thread Pool)\": 113368, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 113484, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 99737, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 99010, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 99014, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 44100, \"Eager (Thread Pool)\": 113397, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 112661, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 99851, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 99111, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 99058, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 44200, \"Eager (Thread Pool)\": 113595, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 112787, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 99999, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 99263, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 99191, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 44300, \"Eager (Thread Pool)\": 113552, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 112832, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 100023, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 99301, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 99249, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 44400, \"Eager (Thread Pool)\": 113803, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 113030, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 100202, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 99412, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 99375, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 44500, \"Eager (Thread Pool)\": 114675, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 113167, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 100305, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 99532, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 99512, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 44600, \"Eager (Thread Pool)\": 113961, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 113149, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 100334, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 99540, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 99525, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 44700, \"Eager (Thread Pool)\": 114089, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 113437, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 100501, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 99702, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 99711, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 44800, \"Eager (Thread Pool)\": 114113, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 113383, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 100518, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 99762, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 99769, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 44900, \"Eager (Thread Pool)\": 114213, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 113460, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 100708, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 99890, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 99852, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 45000, \"Eager (Thread Pool)\": 114416, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 113640, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 100826, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 100058, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 100057, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 45100, \"Eager (Thread Pool)\": 114353, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 113618, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 100851, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 100063, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 100045, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 45200, \"Eager (Thread Pool)\": 114516, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 113725, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 100958, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 100255, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 100180, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 45300, \"Eager (Thread Pool)\": 114699, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 113901, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 101201, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 100435, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 100328, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 45400, \"Eager (Thread Pool)\": 114736, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 113955, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 101105, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 100365, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 100318, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 45500, \"Eager (Thread Pool)\": 114917, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 114129, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 101328, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 100543, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 100515, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 45600, \"Eager (Thread Pool)\": 114947, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 114212, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 101399, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 100599, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 100609, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 45700, \"Eager (Thread Pool)\": 115074, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 114277, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 101482, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 100714, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 100591, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 45800, \"Eager (Thread Pool)\": 115191, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 114913, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 101628, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 100851, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 100815, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 45900, \"Eager (Thread Pool)\": 115275, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 114441, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 101615, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 100916, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 100879, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 46000, \"Eager (Thread Pool)\": 115332, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 114533, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 101780, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 101025, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 100990, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 46100, \"Eager (Thread Pool)\": 115540, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 114678, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 101922, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 101190, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 101116, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 46200, \"Eager (Thread Pool)\": 115624, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 114820, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 101941, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 101196, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 101091, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 46300, \"Eager (Thread Pool)\": 115679, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 114961, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 102133, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 101365, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 101238, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 46400, \"Eager (Thread Pool)\": 115770, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 115049, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 102160, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 101396, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 101410, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 46500, \"Eager (Thread Pool)\": 115907, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 115079, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 102352, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 101507, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 101487, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 46600, \"Eager (Thread Pool)\": 116076, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 115256, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 102524, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 101647, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 101595, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 46700, \"Eager (Thread Pool)\": 116065, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 115281, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 102431, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 101655, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 101619, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 46800, \"Eager (Thread Pool)\": 116249, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 115460, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 102547, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 101796, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 101736, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 46900, \"Eager (Thread Pool)\": 116392, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 115474, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 102716, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 102003, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 101869, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 47000, \"Eager (Thread Pool)\": 116355, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 115571, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 102736, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 101983, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 101927, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 47100, \"Eager (Thread Pool)\": 116483, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 115865, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 102883, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 102094, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 102083, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 47200, \"Eager (Thread Pool)\": 116531, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 115728, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 103047, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 102206, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 102196, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 47300, \"Eager (Thread Pool)\": 116619, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 115891, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 103102, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 102303, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 102243, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 47400, \"Eager (Thread Pool)\": 116822, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 116113, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 103231, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 102466, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 102422, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 47500, \"Eager (Thread Pool)\": 117482, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 116084, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 103234, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 102434, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 102544, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 47600, \"Eager (Thread Pool)\": 116949, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 116207, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 103381, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 102608, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 102607, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 47700, \"Eager (Thread Pool)\": 117132, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 116440, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 103531, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 102801, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 102705, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 47800, \"Eager (Thread Pool)\": 117141, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 116395, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 103556, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 102791, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 102740, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 47900, \"Eager (Thread Pool)\": 117329, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 116614, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 103720, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 102983, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 102951, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 48000, \"Eager (Thread Pool)\": 117364, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 116585, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 103772, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 102953, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 102912, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 48100, \"Eager (Thread Pool)\": 117667, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 116779, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 103937, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 103140, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 103062, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 48200, \"Eager (Thread Pool)\": 117612, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 116845, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 104011, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 103277, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 103221, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 48300, \"Eager (Thread Pool)\": 118196, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 116802, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 104038, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 103277, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 103207, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 48400, \"Eager (Thread Pool)\": 117792, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 116991, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 104184, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 103452, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 103441, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 48500, \"Eager (Thread Pool)\": 118676, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 117159, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 104307, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 103614, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 103565, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 48600, \"Eager (Thread Pool)\": 117980, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 117189, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 104338, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 103619, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 103515, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 48700, \"Eager (Thread Pool)\": 118381, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 117340, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 104513, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 103664, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 103676, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 48800, \"Eager (Thread Pool)\": 118139, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 117329, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 104582, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 103791, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 103771, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 48900, \"Eager (Thread Pool)\": 118215, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 117445, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 104658, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 103913, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 103920, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 49000, \"Eager (Thread Pool)\": 118390, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 117719, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 104821, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 104038, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 103964, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 49100, \"Eager (Thread Pool)\": 118516, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 117714, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 104815, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 104094, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 104044, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 49200, \"Eager (Thread Pool)\": 118552, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 117845, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 104985, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 104219, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 104280, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 49300, \"Eager (Thread Pool)\": 119361, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 117923, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 105132, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 104378, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 104325, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 49400, \"Eager (Thread Pool)\": 118770, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 117928, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 105138, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 104417, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 104323, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 49500, \"Eager (Thread Pool)\": 118889, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 118098, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 105335, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 104556, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 104508, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 49600, \"Eager (Thread Pool)\": 119017, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 118755, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 105411, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 104777, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 104544, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 49700, \"Eager (Thread Pool)\": 119063, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 118330, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 105447, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 104681, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 104608, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 49800, \"Eager (Thread Pool)\": 119207, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 118497, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 105715, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 104900, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 104792, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 49900, \"Eager (Thread Pool)\": 119253, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 118470, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 105644, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 104866, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 104850, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 50000, \"Eager (Thread Pool)\": 119355, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 118687, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 105782, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 105044, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 104980, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 50100, \"Eager (Thread Pool)\": 119582, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 118762, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 105864, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 105170, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 105139, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 50200, \"Eager (Thread Pool)\": 119509, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 118782, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 105901, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 105157, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 105082, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 50300, \"Eager (Thread Pool)\": 119776, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 119000, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 106112, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 105359, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 105331, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 50400, \"Eager (Thread Pool)\": 119937, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 119006, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 106161, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 105423, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 105381, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 50500, \"Eager (Thread Pool)\": 119803, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 119158, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 106303, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 105484, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 105433, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 50600, \"Eager (Thread Pool)\": 119946, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 119293, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 106379, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 105643, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 105618, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 50700, \"Eager (Thread Pool)\": 120019, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 119250, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 106424, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 105685, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 105641, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 50800, \"Eager (Thread Pool)\": 120121, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 119438, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 106594, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 105803, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 105801, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 50900, \"Eager (Thread Pool)\": 120350, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 120269, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 106730, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 105992, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 105917, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 51000, \"Eager (Thread Pool)\": 120399, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 119566, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 106756, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 105979, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 106040, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 51100, \"Eager (Thread Pool)\": 120578, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 119780, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 106938, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 106138, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 106104, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 51200, \"Eager (Thread Pool)\": 120654, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 119769, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 106987, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 106208, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 106133, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 51300, \"Eager (Thread Pool)\": 120801, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 119903, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 107034, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 106334, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 106244, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 51400, \"Eager (Thread Pool)\": 120925, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 120010, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 107221, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 106449, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 106420, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 51500, \"Eager (Thread Pool)\": 120866, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 120032, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 107242, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 106476, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 106423, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 51600, \"Eager (Thread Pool)\": 121716, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 120931, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 107353, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 106642, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 106580, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 51700, \"Eager (Thread Pool)\": 121127, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 120341, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 107517, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 106727, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 106746, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 51800, \"Eager (Thread Pool)\": 121252, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 120415, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 107583, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 106768, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 106702, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 51900, \"Eager (Thread Pool)\": 121391, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 120554, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 108109, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 106964, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 106943, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 52000, \"Eager (Thread Pool)\": 121383, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 120471, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 107745, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 107006, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 106940, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 52100, \"Eager (Thread Pool)\": 121371, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 120639, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 107840, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 107093, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 106991, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 52200, \"Eager (Thread Pool)\": 122119, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 120933, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 108026, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 107243, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 107226, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 52300, \"Eager (Thread Pool)\": 121630, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 120929, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 108061, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 107319, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 107247, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 52400, \"Eager (Thread Pool)\": 121790, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 121051, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 108247, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 107419, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 107396, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 52500, \"Eager (Thread Pool)\": 121945, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 121118, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 108396, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 107563, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 107534, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 52600, \"Eager (Thread Pool)\": 121869, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 121197, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 108398, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 107593, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 107599, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 52700, \"Eager (Thread Pool)\": 122085, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 121343, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 108519, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 107786, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 107739, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 52800, \"Eager (Thread Pool)\": 122159, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 121326, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 108555, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 107806, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 107761, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 52900, \"Eager (Thread Pool)\": 122250, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 122250, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 108661, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 107896, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 107864, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 53000, \"Eager (Thread Pool)\": 122470, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 122377, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 108833, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 108090, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 108039, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 53100, \"Eager (Thread Pool)\": 123223, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 121627, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 108818, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 108037, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 108019, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 53200, \"Eager (Thread Pool)\": 122598, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 121771, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 109011, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 108233, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 108131, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 53300, \"Eager (Thread Pool)\": 122721, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 121933, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 109179, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 108407, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 108304, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 53400, \"Eager (Thread Pool)\": 122737, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 121929, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 109197, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 108341, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 108296, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 53500, \"Eager (Thread Pool)\": 123799, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 122840, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 109345, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 108606, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 108458, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 53600, \"Eager (Thread Pool)\": 122904, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 122115, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 109379, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 108602, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 108586, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 53700, \"Eager (Thread Pool)\": 123048, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 122346, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 109458, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 108704, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 108646, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 53800, \"Eager (Thread Pool)\": 123228, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 122415, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 109645, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 108846, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 108802, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 53900, \"Eager (Thread Pool)\": 123213, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 122548, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 109740, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 108873, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 108825, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 54000, \"Eager (Thread Pool)\": 123421, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 122619, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 109881, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 109022, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 109065, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 54100, \"Eager (Thread Pool)\": 123549, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 122788, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 109926, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 109116, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 109141, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 54200, \"Eager (Thread Pool)\": 123569, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 122765, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 109914, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 109178, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 109106, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 54300, \"Eager (Thread Pool)\": 123741, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 122997, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 110166, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 109341, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 109293, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 54400, \"Eager (Thread Pool)\": 123690, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 122940, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 110152, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 109364, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 109356, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 54500, \"Eager (Thread Pool)\": 123872, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 123035, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 110266, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 109479, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 109469, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 54600, \"Eager (Thread Pool)\": 124102, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 123293, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 110419, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 109679, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 109604, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 54700, \"Eager (Thread Pool)\": 124098, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 123468, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 110534, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 109720, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 109607, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 54800, \"Eager (Thread Pool)\": 124254, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 123418, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 110604, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 109816, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 109811, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 54900, \"Eager (Thread Pool)\": 124328, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 123642, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 110733, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 110034, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 109929, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 55000, \"Eager (Thread Pool)\": 124309, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 123586, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 110749, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 110024, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 109904, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 55100, \"Eager (Thread Pool)\": 124496, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 123652, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 110922, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 110145, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 110115, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 55200, \"Eager (Thread Pool)\": 124627, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 123831, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 110915, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 110234, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 110144, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 55300, \"Eager (Thread Pool)\": 124709, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 123925, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 111090, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 110323, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 110233, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 55400, \"Eager (Thread Pool)\": 124870, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 124071, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 111269, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 110482, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 110391, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 55500, \"Eager (Thread Pool)\": 124952, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 124262, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 111261, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 110432, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 110450, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 55600, \"Eager (Thread Pool)\": 124971, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 125141, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 111381, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 110628, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 110685, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 55700, \"Eager (Thread Pool)\": 125071, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 124321, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 111515, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 110789, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 110822, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 55800, \"Eager (Thread Pool)\": 125031, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 124314, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 111548, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 110752, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 110741, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 55900, \"Eager (Thread Pool)\": 125298, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 124554, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 111682, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 110907, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 110893, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 56000, \"Eager (Thread Pool)\": 125399, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 124629, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 111813, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 111021, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 111086, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 56100, \"Eager (Thread Pool)\": 125481, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 124850, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 111894, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 111149, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 111072, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 56200, \"Eager (Thread Pool)\": 125609, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 124933, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 112017, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 111293, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 111187, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 56300, \"Eager (Thread Pool)\": 125743, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 124925, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 112128, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 111410, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 111250, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 56400, \"Eager (Thread Pool)\": 125846, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 125035, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 112203, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 111459, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 111436, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 56500, \"Eager (Thread Pool)\": 125937, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 125083, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 112327, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 111583, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 111579, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 56600, \"Eager (Thread Pool)\": 125898, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 125161, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 112346, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 111582, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 111670, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 56700, \"Eager (Thread Pool)\": 126159, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 125343, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 112543, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 111744, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 111719, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 56800, \"Eager (Thread Pool)\": 126185, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 125423, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 112583, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 111872, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 111795, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 56900, \"Eager (Thread Pool)\": 126303, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 125488, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 112677, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 111895, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 111894, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 57000, \"Eager (Thread Pool)\": 126452, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 125647, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 112837, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 112037, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 112010, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 57100, \"Eager (Thread Pool)\": 126529, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 125790, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 112811, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 112103, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 112050, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 57200, \"Eager (Thread Pool)\": 126616, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 126258, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 113009, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 112211, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 112177, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 57300, \"Eager (Thread Pool)\": 126666, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 125935, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 113126, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 112400, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 112353, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 57400, \"Eager (Thread Pool)\": 126844, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 125984, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 113149, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 112357, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 112320, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 57500, \"Eager (Thread Pool)\": 126864, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 126813, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 113414, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 112503, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 112530, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 57600, \"Eager (Thread Pool)\": 126955, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 126186, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 113333, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 112552, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 112581, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 57700, \"Eager (Thread Pool)\": 127136, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 126343, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 113470, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 112758, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 112670, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 57800, \"Eager (Thread Pool)\": 127287, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 127260, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 113702, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 112855, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 112935, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 57900, \"Eager (Thread Pool)\": 127370, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 126534, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 113651, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 112942, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 112891, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 58000, \"Eager (Thread Pool)\": 127415, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 126649, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 113810, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 113104, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 112990, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 58100, \"Eager (Thread Pool)\": 127565, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 127700, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 113922, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 113197, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 113091, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 58200, \"Eager (Thread Pool)\": 127645, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 126818, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 113924, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 113172, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 113165, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 58300, \"Eager (Thread Pool)\": 127732, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 127021, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 114163, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 113383, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 113297, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 58400, \"Eager (Thread Pool)\": 127818, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 127027, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 114124, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 113415, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 113414, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 58500, \"Eager (Thread Pool)\": 127891, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 127125, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 114342, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 113520, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 113456, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 58600, \"Eager (Thread Pool)\": 127882, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 127307, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 114440, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 113636, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 113564, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 58700, \"Eager (Thread Pool)\": 128016, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 127262, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 114569, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 113709, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 113636, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 58800, \"Eager (Thread Pool)\": 128170, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 127483, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 114775, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 113810, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 113766, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 58900, \"Eager (Thread Pool)\": 128322, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 127598, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 114771, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 113994, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 113974, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 59000, \"Eager (Thread Pool)\": 128382, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 127566, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 114900, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 114009, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 113923, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 59100, \"Eager (Thread Pool)\": 128491, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 127851, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 114955, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 114158, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 114092, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 59200, \"Eager (Thread Pool)\": 128652, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 127879, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 114971, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 114282, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 114223, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 59300, \"Eager (Thread Pool)\": 129511, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 127893, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 115064, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 114359, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 114238, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 59400, \"Eager (Thread Pool)\": 128855, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 128059, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 115255, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 114473, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 114489, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 59500, \"Eager (Thread Pool)\": 129158, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 128180, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 115290, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 114599, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 114416, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 59600, \"Eager (Thread Pool)\": 128947, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 128146, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 115391, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 114622, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 114577, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 59700, \"Eager (Thread Pool)\": 129051, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 128341, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 115542, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 114869, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 114754, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 59800, \"Eager (Thread Pool)\": 129092, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 128378, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 115584, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 114723, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 114745, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 59900, \"Eager (Thread Pool)\": 129363, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 128596, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 115716, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 114910, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 114944, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 60000, \"Eager (Thread Pool)\": 129317, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 128622, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 115742, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 115015, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 114970, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 60100, \"Eager (Thread Pool)\": 129466, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 128685, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 115863, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 115120, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 115123, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 60200, \"Eager (Thread Pool)\": 129579, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 128863, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 116048, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 115310, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 115236, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 60300, \"Eager (Thread Pool)\": 129600, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 129617, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 116060, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 115267, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 115256, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 60400, \"Eager (Thread Pool)\": 129885, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 129034, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 116124, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 115434, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 115372, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 60500, \"Eager (Thread Pool)\": 129931, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 129153, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 116411, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 115657, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 115586, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 60600, \"Eager (Thread Pool)\": 129965, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 129165, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 116373, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 115619, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 115544, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 60700, \"Eager (Thread Pool)\": 130137, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 129316, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 116510, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 115740, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 115681, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 60800, \"Eager (Thread Pool)\": 130168, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 129462, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 116619, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 115813, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 115744, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 60900, \"Eager (Thread Pool)\": 130293, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 130339, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 116692, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 115919, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 115879, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 61000, \"Eager (Thread Pool)\": 130409, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 129785, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 116831, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 116232, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 116011, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 61100, \"Eager (Thread Pool)\": 130534, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 129706, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 116861, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 116068, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 116005, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 61200, \"Eager (Thread Pool)\": 130666, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 129866, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 116995, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 116235, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 116194, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 61300, \"Eager (Thread Pool)\": 130725, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 129957, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 117146, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 116399, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 116354, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 61400, \"Eager (Thread Pool)\": 130861, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 130026, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 117298, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 116388, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 116383, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 61500, \"Eager (Thread Pool)\": 131130, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 130245, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 117304, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 116553, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 116521, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 61600, \"Eager (Thread Pool)\": 131057, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 130956, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 117386, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 116601, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 116548, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 61700, \"Eager (Thread Pool)\": 131148, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 130361, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 117573, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 116720, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 116729, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 61800, \"Eager (Thread Pool)\": 131844, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 130472, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 117606, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 116881, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 116833, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 61900, \"Eager (Thread Pool)\": 131259, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 130448, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 117671, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 116862, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 116964, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 62000, \"Eager (Thread Pool)\": 131434, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 130658, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 117866, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 117002, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 116978, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 62100, \"Eager (Thread Pool)\": 131447, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 130721, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 117924, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 117155, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 117179, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 62200, \"Eager (Thread Pool)\": 131546, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 130719, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 117998, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 117192, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 117108, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 62300, \"Eager (Thread Pool)\": 131747, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 130953, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 118121, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 117428, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 117316, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 62400, \"Eager (Thread Pool)\": 131926, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 130985, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 118166, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 117399, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 117421, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 62500, \"Eager (Thread Pool)\": 131966, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 131115, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 118274, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 117493, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 117421, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 62600, \"Eager (Thread Pool)\": 131967, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 131251, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 118462, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 117645, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 117611, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 62700, \"Eager (Thread Pool)\": 132061, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 131408, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 118461, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 117701, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 117667, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 62800, \"Eager (Thread Pool)\": 132221, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 131507, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 118681, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 117845, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 117790, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 62900, \"Eager (Thread Pool)\": 133099, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 131576, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 118702, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 118025, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 117959, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 63000, \"Eager (Thread Pool)\": 132326, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 131712, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 118756, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 117986, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 117977, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 63100, \"Eager (Thread Pool)\": 132520, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 131730, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 118949, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 118167, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 118071, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 63200, \"Eager (Thread Pool)\": 132606, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 131819, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 118964, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 118227, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 118144, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 63300, \"Eager (Thread Pool)\": 132621, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 131935, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 119042, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 118329, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 118225, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 63400, \"Eager (Thread Pool)\": 132828, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 132173, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 119270, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 118492, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 118444, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 63500, \"Eager (Thread Pool)\": 132918, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 132076, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 119238, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 118472, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 118433, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 63600, \"Eager (Thread Pool)\": 132973, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 132291, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 119416, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 118648, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 118838, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 63700, \"Eager (Thread Pool)\": 133221, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 132391, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 119553, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 118791, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 118757, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 63800, \"Eager (Thread Pool)\": 133172, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 132412, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 119597, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 118826, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 118745, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 63900, \"Eager (Thread Pool)\": 133356, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 132601, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 119727, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 118911, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 118902, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 64000, \"Eager (Thread Pool)\": 133361, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 132639, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 119786, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 119024, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 119000, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 64100, \"Eager (Thread Pool)\": 133450, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 132699, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 119900, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 119236, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 119123, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 64200, \"Eager (Thread Pool)\": 133720, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 133045, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 120078, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 119277, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 119227, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 64300, \"Eager (Thread Pool)\": 133627, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 132853, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 120057, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 119300, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 119232, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 64400, \"Eager (Thread Pool)\": 133798, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 133177, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 120253, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 119449, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 119398, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 64500, \"Eager (Thread Pool)\": 133963, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 133188, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 120320, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 119606, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 119508, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 64600, \"Eager (Thread Pool)\": 133980, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 133976, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 120389, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 119639, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 119588, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 64700, \"Eager (Thread Pool)\": 134117, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 133428, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 120534, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 119779, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 119748, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 64800, \"Eager (Thread Pool)\": 134231, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 133492, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 120595, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 119825, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 119795, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 64900, \"Eager (Thread Pool)\": 134269, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 133570, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 120655, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 119986, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 119858, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 65000, \"Eager (Thread Pool)\": 134506, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 133698, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 120896, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 120089, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 120005, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 65100, \"Eager (Thread Pool)\": 134478, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 133704, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 120903, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 120130, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 120087, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 65200, \"Eager (Thread Pool)\": 134619, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 133891, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 121023, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 120269, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 120140, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 65300, \"Eager (Thread Pool)\": 134779, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 133944, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 121112, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 120381, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 120328, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 65400, \"Eager (Thread Pool)\": 134755, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 133975, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 121174, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 120443, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 120392, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 65500, \"Eager (Thread Pool)\": 134913, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 134158, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 121339, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 120578, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 120532, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 65600, \"Eager (Thread Pool)\": 134989, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 134248, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 121448, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 120623, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 120568, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 65700, \"Eager (Thread Pool)\": 135877, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 134283, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 121547, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 120794, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 120689, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 65800, \"Eager (Thread Pool)\": 135287, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 134697, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 121601, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 120853, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 120863, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 65900, \"Eager (Thread Pool)\": 135294, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 134518, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 121685, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 120882, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 120822, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 66000, \"Eager (Thread Pool)\": 135421, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 134625, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 121759, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 121007, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 120957, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 66100, \"Eager (Thread Pool)\": 135589, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 134789, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 122032, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 121163, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 121150, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 66200, \"Eager (Thread Pool)\": 135618, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 134785, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 121908, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 121210, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 121121, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 66300, \"Eager (Thread Pool)\": 135769, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 134923, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 122149, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 121353, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 121318, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 66400, \"Eager (Thread Pool)\": 135759, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 134948, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 122129, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 121444, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 121330, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 66500, \"Eager (Thread Pool)\": 135872, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 135116, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 122324, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 121535, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 121480, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 66600, \"Eager (Thread Pool)\": 136050, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 135373, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 122465, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 121691, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 121677, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 66700, \"Eager (Thread Pool)\": 136121, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 135296, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 122451, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 121727, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 121664, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 66800, \"Eager (Thread Pool)\": 136319, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 136782, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 122687, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 121818, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 121772, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 66900, \"Eager (Thread Pool)\": 136284, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 135644, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 122709, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 122013, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 122188, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 67000, \"Eager (Thread Pool)\": 136289, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 135594, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 122761, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 121988, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 121947, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 67100, \"Eager (Thread Pool)\": 136563, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 135787, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 122963, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 122161, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 122106, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 67200, \"Eager (Thread Pool)\": 136594, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 135871, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 122971, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 122196, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 122177, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 67300, \"Eager (Thread Pool)\": 136714, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 135980, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 123115, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 122344, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 122294, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 67400, \"Eager (Thread Pool)\": 136847, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 136087, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 123192, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 122479, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 122389, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 67500, \"Eager (Thread Pool)\": 136902, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 136149, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 123262, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 122480, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 122423, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 67600, \"Eager (Thread Pool)\": 137055, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 136282, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 123351, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 122622, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 122586, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 67700, \"Eager (Thread Pool)\": 137209, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 137209, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 123535, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 122803, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 122776, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 67800, \"Eager (Thread Pool)\": 137150, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 136411, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 123579, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 122805, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 122783, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 67900, \"Eager (Thread Pool)\": 137357, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 136598, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 123761, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 122991, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 122945, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 68000, \"Eager (Thread Pool)\": 137336, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 137267, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 123751, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 122997, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 122968, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 68100, \"Eager (Thread Pool)\": 137448, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 136701, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 124103, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 123072, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 123113, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 68200, \"Eager (Thread Pool)\": 137651, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 136887, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 124052, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 123243, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 123276, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 68300, \"Eager (Thread Pool)\": 137668, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 136911, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 124052, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 123324, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 123273, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 68400, \"Eager (Thread Pool)\": 137773, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 137107, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 124198, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 123399, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 123386, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 68500, \"Eager (Thread Pool)\": 138023, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 137195, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 124349, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 123617, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 123567, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 68600, \"Eager (Thread Pool)\": 137941, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 137177, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 124339, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 123685, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 123522, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 68700, \"Eager (Thread Pool)\": 138632, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 137478, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 124509, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 123720, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 123712, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 68800, \"Eager (Thread Pool)\": 138117, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 137390, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 124586, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 123844, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 123775, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 68900, \"Eager (Thread Pool)\": 138273, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 137554, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 124687, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 123918, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 123861, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 69000, \"Eager (Thread Pool)\": 138433, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 138503, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 124852, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 124066, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 124101, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 69100, \"Eager (Thread Pool)\": 138606, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 137844, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 124893, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 124071, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 124080, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 69200, \"Eager (Thread Pool)\": 138584, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 137866, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 125048, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 124210, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 124171, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 69300, \"Eager (Thread Pool)\": 138728, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 138011, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 125221, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 124371, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 124322, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 69400, \"Eager (Thread Pool)\": 138727, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 138835, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 125247, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 124409, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 124295, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 69500, \"Eager (Thread Pool)\": 139006, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 138239, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 125322, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 124548, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 124524, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 69600, \"Eager (Thread Pool)\": 138989, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 138169, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 125365, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 124753, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 124523, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 69700, \"Eager (Thread Pool)\": 139155, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 138306, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 125448, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 124733, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 124620, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 69800, \"Eager (Thread Pool)\": 139359, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 138496, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 125715, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 124881, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 124827, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 69900, \"Eager (Thread Pool)\": 139423, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 138441, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 125676, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 124875, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 124842, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 70000, \"Eager (Thread Pool)\": 139388, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 138783, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 125816, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 125045, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 125024, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 70100, \"Eager (Thread Pool)\": 139502, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 138852, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 125953, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 125175, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 125153, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 70200, \"Eager (Thread Pool)\": 139694, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 138791, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 125951, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 125178, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 125166, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 70300, \"Eager (Thread Pool)\": 139766, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 138990, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 126118, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 125398, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 125366, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 70400, \"Eager (Thread Pool)\": 139823, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 139064, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 126149, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 125410, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 125390, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 70500, \"Eager (Thread Pool)\": 139801, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 139248, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 126286, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 125528, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 125456, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 70600, \"Eager (Thread Pool)\": 140039, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 139175, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 126500, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 125633, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 125642, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 70700, \"Eager (Thread Pool)\": 140121, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 139276, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 126433, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 125693, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 125688, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 70800, \"Eager (Thread Pool)\": 140783, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 139465, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 126616, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 125890, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 125806, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 70900, \"Eager (Thread Pool)\": 140363, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 139551, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 126749, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 125996, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 125992, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 71000, \"Eager (Thread Pool)\": 140363, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 139645, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 126799, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 125970, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 125949, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 71100, \"Eager (Thread Pool)\": 140556, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 139861, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 126991, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 126225, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 126117, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 71200, \"Eager (Thread Pool)\": 140646, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 139830, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 126984, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 126229, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 126333, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 71300, \"Eager (Thread Pool)\": 140685, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 139956, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 127118, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 126328, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 126279, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 71400, \"Eager (Thread Pool)\": 140856, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 140123, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 127205, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 126500, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 126446, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 71500, \"Eager (Thread Pool)\": 140905, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 140062, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 127364, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 126546, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 126444, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 71600, \"Eager (Thread Pool)\": 141086, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 140281, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 127462, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 126783, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 126578, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 71700, \"Eager (Thread Pool)\": 141299, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 140404, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 127546, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 126760, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 126722, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 71800, \"Eager (Thread Pool)\": 141209, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 140417, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 127584, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 126763, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 126773, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 71900, \"Eager (Thread Pool)\": 141294, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 140572, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 127704, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 126987, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 126874, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 72000, \"Eager (Thread Pool)\": 141520, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 140678, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 127798, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 127002, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 126975, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 72100, \"Eager (Thread Pool)\": 142280, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 140714, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 127860, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 127122, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 127063, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 72200, \"Eager (Thread Pool)\": 141700, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 140926, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 128058, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 127246, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 127274, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 72300, \"Eager (Thread Pool)\": 141712, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 140967, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 128059, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 127346, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 127256, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 72400, \"Eager (Thread Pool)\": 141812, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 141091, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 128259, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 127454, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 127414, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 72500, \"Eager (Thread Pool)\": 141963, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 141217, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 128347, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 127590, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 127579, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 72600, \"Eager (Thread Pool)\": 142032, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 141186, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 128377, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 127602, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 127522, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 72700, \"Eager (Thread Pool)\": 142266, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 141297, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 128515, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 127753, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 127727, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 72800, \"Eager (Thread Pool)\": 142197, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 141465, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 128583, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 127799, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 127791, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 72900, \"Eager (Thread Pool)\": 142312, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 141529, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 128672, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 127896, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 127932, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 73000, \"Eager (Thread Pool)\": 142579, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 141744, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 128825, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 128052, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 128016, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 73100, \"Eager (Thread Pool)\": 143390, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 141733, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 128822, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 128102, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 128061, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 73200, \"Eager (Thread Pool)\": 142611, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 142069, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 129012, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 128210, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 128257, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 73300, \"Eager (Thread Pool)\": 142765, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 142025, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 129206, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 128390, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 128361, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 73400, \"Eager (Thread Pool)\": 142877, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 141987, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 129187, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 128428, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 128338, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 73500, \"Eager (Thread Pool)\": 142950, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 142218, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 129341, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 128585, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 128480, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 73600, \"Eager (Thread Pool)\": 143085, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 142321, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 129419, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 128613, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 128637, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 73700, \"Eager (Thread Pool)\": 143201, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 142498, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 129528, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 128719, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 128670, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 73800, \"Eager (Thread Pool)\": 143184, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 142497, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 129653, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 129183, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 128849, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 73900, \"Eager (Thread Pool)\": 143320, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 142510, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 129674, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 128894, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 128862, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 74000, \"Eager (Thread Pool)\": 143480, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 142763, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 129855, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 129018, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 128991, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 74100, \"Eager (Thread Pool)\": 143503, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 142755, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 129924, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 129183, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 129184, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 74200, \"Eager (Thread Pool)\": 143559, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 142835, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 129988, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 129206, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 129265, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 74300, \"Eager (Thread Pool)\": 143660, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 142959, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 130149, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 129403, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 129362, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 74400, \"Eager (Thread Pool)\": 143785, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 143089, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 130222, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 129388, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 129381, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 74500, \"Eager (Thread Pool)\": 144507, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 143159, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 130356, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 129553, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 129490, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 74600, \"Eager (Thread Pool)\": 144113, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 143293, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 130449, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 129662, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 129622, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 74700, \"Eager (Thread Pool)\": 144854, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 143409, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 130515, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 129716, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 129646, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 74800, \"Eager (Thread Pool)\": 144127, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 143443, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 130608, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 129851, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 129757, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 74900, \"Eager (Thread Pool)\": 144321, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 143671, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 130741, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 130016, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 129972, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 75000, \"Eager (Thread Pool)\": 144328, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 143618, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 130710, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 130021, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 129962, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 75100, \"Eager (Thread Pool)\": 144567, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 143813, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 130952, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 130167, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 130116, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 75200, \"Eager (Thread Pool)\": 144589, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 143900, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 130990, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 130231, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 130175, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 75300, \"Eager (Thread Pool)\": 144655, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 144014, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 131073, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 130298, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 130281, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 75400, \"Eager (Thread Pool)\": 144885, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 144117, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 131279, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 130475, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 130409, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 75500, \"Eager (Thread Pool)\": 144871, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 144091, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 131242, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 130542, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 130463, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 75600, \"Eager (Thread Pool)\": 145043, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 144387, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 131462, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 130707, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 130648, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 75700, \"Eager (Thread Pool)\": 145129, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 144403, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 131503, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 130818, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 130728, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 75800, \"Eager (Thread Pool)\": 145234, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 144469, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 131583, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 130814, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 130806, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 75900, \"Eager (Thread Pool)\": 145380, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 144525, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 131710, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 130979, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 130914, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 76000, \"Eager (Thread Pool)\": 145451, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 144623, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 131784, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 131005, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 130971, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 76100, \"Eager (Thread Pool)\": 145575, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 144697, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 131924, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 131134, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 131051, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 76200, \"Eager (Thread Pool)\": 145624, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 144813, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 131973, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 131254, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 131213, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 76300, \"Eager (Thread Pool)\": 145641, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 144888, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 132065, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 131373, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 131241, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 76400, \"Eager (Thread Pool)\": 145833, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 145017, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 132221, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 131425, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 131414, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 76500, \"Eager (Thread Pool)\": 145855, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 145994, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 132294, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 131581, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 131530, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 76600, \"Eager (Thread Pool)\": 146040, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 145229, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 132402, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 131626, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 131538, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 76700, \"Eager (Thread Pool)\": 146103, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 145408, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 132608, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 131771, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 131719, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 76800, \"Eager (Thread Pool)\": 146203, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 145444, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 132577, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 131811, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 131782, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 76900, \"Eager (Thread Pool)\": 146302, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 145515, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 132716, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 131928, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 131854, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 77000, \"Eager (Thread Pool)\": 146660, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 145866, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 132928, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 132117, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 132053, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 77100, \"Eager (Thread Pool)\": 146558, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 145789, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 132907, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 132113, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 132037, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 77200, \"Eager (Thread Pool)\": 146666, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 145932, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 133017, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 132233, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 132158, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 77300, \"Eager (Thread Pool)\": 146752, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 146035, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 133132, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 132431, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 132358, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 77400, \"Eager (Thread Pool)\": 146776, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 146036, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 133166, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 132431, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 132406, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 77500, \"Eager (Thread Pool)\": 146996, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 146251, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 133367, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 132580, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 132501, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 77600, \"Eager (Thread Pool)\": 146939, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 146233, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 133435, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 132606, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 132622, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 77700, \"Eager (Thread Pool)\": 147057, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 146378, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 133448, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 132782, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 132702, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 77800, \"Eager (Thread Pool)\": 147245, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 146420, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 133619, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 132866, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 132859, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 77900, \"Eager (Thread Pool)\": 147264, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 146531, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 133641, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 132938, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 132923, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 78000, \"Eager (Thread Pool)\": 147456, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 146695, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 133831, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 133065, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 133038, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 78100, \"Eager (Thread Pool)\": 147671, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 146805, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 133923, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 133233, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 133153, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 78200, \"Eager (Thread Pool)\": 147582, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 146900, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 133965, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 133272, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 133157, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 78300, \"Eager (Thread Pool)\": 147773, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 147002, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 134124, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 133675, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 133338, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 78400, \"Eager (Thread Pool)\": 147903, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 147130, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 134208, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 133409, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 133393, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 78500, \"Eager (Thread Pool)\": 147878, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 147130, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 134338, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 133538, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 133651, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 78600, \"Eager (Thread Pool)\": 148083, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 147299, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 134409, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 133706, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 133677, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 78700, \"Eager (Thread Pool)\": 147990, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 147371, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 134495, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 133690, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 133681, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 78800, \"Eager (Thread Pool)\": 148184, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 147430, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 134626, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 133858, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 133812, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 78900, \"Eager (Thread Pool)\": 148384, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 147626, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 134714, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 133967, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 133936, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 79000, \"Eager (Thread Pool)\": 148382, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 147637, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 134798, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 134046, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 133936, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 79100, \"Eager (Thread Pool)\": 148583, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 147839, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 135000, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 134172, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 134132, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 79200, \"Eager (Thread Pool)\": 148623, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 147846, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 135003, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 134201, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 134224, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 79300, \"Eager (Thread Pool)\": 148707, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 148919, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 135130, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 134348, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 134357, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 79400, \"Eager (Thread Pool)\": 148873, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 148135, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 135389, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 134469, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 134399, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 79500, \"Eager (Thread Pool)\": 148828, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 148602, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 135243, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 134498, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 134471, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 79600, \"Eager (Thread Pool)\": 149053, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 148265, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 135384, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 134657, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 134685, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 79700, \"Eager (Thread Pool)\": 149185, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 149221, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 135525, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 134849, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 134755, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 79800, \"Eager (Thread Pool)\": 149161, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 148400, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 135566, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 134819, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 134795, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 79900, \"Eager (Thread Pool)\": 149324, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 148584, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 135691, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 134967, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 134965, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 80000, \"Eager (Thread Pool)\": 149391, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 148648, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 135803, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 135011, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 134933, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 80100, \"Eager (Thread Pool)\": 149480, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 148782, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 135944, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 135125, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 135238, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 80200, \"Eager (Thread Pool)\": 149871, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 148862, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 136045, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 135208, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 135279, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 80300, \"Eager (Thread Pool)\": 149693, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 148923, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 136060, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 135310, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 135307, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 80400, \"Eager (Thread Pool)\": 150593, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 149052, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 136204, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 135451, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 135390, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 80500, \"Eager (Thread Pool)\": 149969, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 149114, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 136317, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 135815, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 135583, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 80600, \"Eager (Thread Pool)\": 149969, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 149388, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 136433, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 135592, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 135581, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 80700, \"Eager (Thread Pool)\": 150108, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 149399, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 136538, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 135764, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 135685, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 80800, \"Eager (Thread Pool)\": 150181, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 149382, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 136633, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 135841, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 135779, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 80900, \"Eager (Thread Pool)\": 150264, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 149544, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 136695, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 135951, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 135872, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 81000, \"Eager (Thread Pool)\": 150390, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 149760, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 136849, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 136105, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 135995, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 81100, \"Eager (Thread Pool)\": 150465, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 149670, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 136853, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 136109, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 136046, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 81200, \"Eager (Thread Pool)\": 151284, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 149902, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 137160, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 136237, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 136270, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 81300, \"Eager (Thread Pool)\": 150674, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 149938, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 137123, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 136362, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 136365, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 81400, \"Eager (Thread Pool)\": 150789, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 150062, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 137175, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 136391, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 136417, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 81500, \"Eager (Thread Pool)\": 150894, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 150230, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 137322, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 136579, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 136496, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 81600, \"Eager (Thread Pool)\": 151015, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 150282, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 137473, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 136621, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 136590, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 81700, \"Eager (Thread Pool)\": 151082, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 150329, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 137556, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 136724, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 136689, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 81800, \"Eager (Thread Pool)\": 151223, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 150441, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 137647, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 136891, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 136825, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 81900, \"Eager (Thread Pool)\": 151279, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 150629, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 137722, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 136891, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 136869, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 82000, \"Eager (Thread Pool)\": 151439, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 150580, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 137813, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 137020, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 136998, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 82100, \"Eager (Thread Pool)\": 151486, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 150852, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 138138, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 137143, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 137159, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 82200, \"Eager (Thread Pool)\": 151648, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 150960, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 138275, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 137216, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 137215, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 82300, \"Eager (Thread Pool)\": 151765, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 150997, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 138137, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 137394, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 137327, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 82400, \"Eager (Thread Pool)\": 151994, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 151023, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 138261, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 137369, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 137540, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 82500, \"Eager (Thread Pool)\": 151930, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 151105, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 138302, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 137513, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 137477, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 82600, \"Eager (Thread Pool)\": 152102, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 151253, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 138445, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 137717, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 137644, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 82700, \"Eager (Thread Pool)\": 152223, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 151360, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 138491, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 137747, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 137663, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 82800, \"Eager (Thread Pool)\": 152271, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 151714, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 138644, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 137808, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 137826, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 82900, \"Eager (Thread Pool)\": 152423, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 151571, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 138757, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 138016, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 138116, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 83000, \"Eager (Thread Pool)\": 152363, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 151595, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 138795, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 137990, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 137971, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 83100, \"Eager (Thread Pool)\": 153322, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 151792, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 138926, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 138215, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 138147, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 83200, \"Eager (Thread Pool)\": 152600, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 151811, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 138991, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 138201, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 138203, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 83300, \"Eager (Thread Pool)\": 152794, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 151933, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 139167, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 138365, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 138303, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 83400, \"Eager (Thread Pool)\": 152803, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 152135, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 139237, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 138509, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 138469, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 83500, \"Eager (Thread Pool)\": 152828, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 152131, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 139382, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 138544, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 138519, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 83600, \"Eager (Thread Pool)\": 153050, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 152201, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 139460, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 138667, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 138562, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 83700, \"Eager (Thread Pool)\": 153194, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 152540, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 139586, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 138892, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 138765, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 83800, \"Eager (Thread Pool)\": 154006, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 152436, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 139562, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 138789, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 138761, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 83900, \"Eager (Thread Pool)\": 153394, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 152557, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 139730, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 139024, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 138922, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 84000, \"Eager (Thread Pool)\": 153432, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 152632, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 139823, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 139037, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 139018, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 84100, \"Eager (Thread Pool)\": 153581, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 152780, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 139934, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 139136, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 139098, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 84200, \"Eager (Thread Pool)\": 153713, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 152858, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 140011, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 139251, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 139226, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 84300, \"Eager (Thread Pool)\": 153712, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 153274, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 140094, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 139268, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 139377, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 84400, \"Eager (Thread Pool)\": 153969, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 152993, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 140211, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 139438, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 139461, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 84500, \"Eager (Thread Pool)\": 153863, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 153153, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 140346, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 139618, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 139524, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 84600, \"Eager (Thread Pool)\": 154037, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 154051, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 140362, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 139617, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 139600, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 84700, \"Eager (Thread Pool)\": 154091, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 153383, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 140598, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 139760, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 139755, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 84800, \"Eager (Thread Pool)\": 154252, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 153437, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 140559, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 139833, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 139785, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 84900, \"Eager (Thread Pool)\": 154305, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 154216, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 140721, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 139936, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 139906, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 85000, \"Eager (Thread Pool)\": 154492, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 153765, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 140901, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 140345, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 140019, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 85100, \"Eager (Thread Pool)\": 154549, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 153731, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 140899, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 140085, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 140063, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 85200, \"Eager (Thread Pool)\": 154639, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 153837, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 141043, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 140277, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 140202, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 85300, \"Eager (Thread Pool)\": 154702, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 154039, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 141167, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 140409, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 140417, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 85400, \"Eager (Thread Pool)\": 154743, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 154026, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 141164, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 140375, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 140344, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 85500, \"Eager (Thread Pool)\": 154895, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 154120, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 141305, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 140649, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 140490, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 85600, \"Eager (Thread Pool)\": 155050, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 154200, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 141383, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 140780, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 140623, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 85700, \"Eager (Thread Pool)\": 155096, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 154311, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 141545, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 140716, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 140667, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 85800, \"Eager (Thread Pool)\": 155284, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 154480, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 141684, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 140870, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 140823, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 85900, \"Eager (Thread Pool)\": 155297, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 154507, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 141666, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 140911, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 140837, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 86000, \"Eager (Thread Pool)\": 155477, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 154687, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 141784, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 141076, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 140984, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 86100, \"Eager (Thread Pool)\": 155600, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 154878, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 141973, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 141222, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 141162, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 86200, \"Eager (Thread Pool)\": 156322, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 154929, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 142042, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 141361, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 141142, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 86300, \"Eager (Thread Pool)\": 155723, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 155053, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 142163, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 141342, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 141346, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 86400, \"Eager (Thread Pool)\": 155870, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 155194, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 142231, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 141483, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 141430, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 86500, \"Eager (Thread Pool)\": 155919, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 155138, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 142319, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 141580, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 141524, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 86600, \"Eager (Thread Pool)\": 156132, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 156103, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 142456, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 141647, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 141600, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 86700, \"Eager (Thread Pool)\": 156072, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 155285, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 142548, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 141739, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 141700, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 86800, \"Eager (Thread Pool)\": 156158, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 155460, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 142630, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 141892, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 141831, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 86900, \"Eager (Thread Pool)\": 156389, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 155929, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 142751, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 141961, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 142022, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 87000, \"Eager (Thread Pool)\": 156351, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 155611, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 142794, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 141973, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 141926, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 87100, \"Eager (Thread Pool)\": 156472, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 155745, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 142913, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 142147, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 142191, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 87200, \"Eager (Thread Pool)\": 156599, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 156613, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 143013, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 142224, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 142182, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 87300, \"Eager (Thread Pool)\": 157561, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 156002, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 143136, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 142320, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 142296, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 87400, \"Eager (Thread Pool)\": 156855, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 156143, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 143402, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 142477, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 142427, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 87500, \"Eager (Thread Pool)\": 157573, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 156186, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 143261, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 142481, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 142445, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 87600, \"Eager (Thread Pool)\": 157152, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 156290, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 143452, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 142649, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 142623, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 87700, \"Eager (Thread Pool)\": 157050, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 156333, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 143552, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 142773, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 142726, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 87800, \"Eager (Thread Pool)\": 157254, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 156424, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 143566, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 142789, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 142723, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 87900, \"Eager (Thread Pool)\": 157386, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 156585, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 143771, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 143016, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 142984, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 88000, \"Eager (Thread Pool)\": 157409, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 156665, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 143787, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 143034, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 142997, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 88100, \"Eager (Thread Pool)\": 157484, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 156734, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 143934, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 143137, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 143080, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 88200, \"Eager (Thread Pool)\": 157636, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 156893, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 144042, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 143316, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 143243, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 88300, \"Eager (Thread Pool)\": 157642, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 156921, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 144097, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 143338, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 143361, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 88400, \"Eager (Thread Pool)\": 157783, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 157094, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 144253, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 143485, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 143400, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 88500, \"Eager (Thread Pool)\": 158132, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 158189, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 144371, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 143590, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 143540, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 88600, \"Eager (Thread Pool)\": 158275, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 157180, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 144385, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 143643, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 143584, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 88700, \"Eager (Thread Pool)\": 158091, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 157524, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 144706, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 143735, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 143755, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 88800, \"Eager (Thread Pool)\": 158310, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 157479, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 144586, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 143867, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 143797, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 88900, \"Eager (Thread Pool)\": 158378, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 157582, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 144641, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 143974, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 143935, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 89000, \"Eager (Thread Pool)\": 158503, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 157690, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 144887, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 144078, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 144070, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 89100, \"Eager (Thread Pool)\": 158436, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 157772, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 144920, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 144082, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 144099, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 89200, \"Eager (Thread Pool)\": 158659, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 157895, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 144973, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 144312, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 144176, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 89300, \"Eager (Thread Pool)\": 158842, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 158023, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 145159, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 144417, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 144444, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 89400, \"Eager (Thread Pool)\": 159015, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 158184, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 145170, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 144428, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 144389, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 89500, \"Eager (Thread Pool)\": 158937, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 158176, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 145345, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 144584, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 144539, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 89600, \"Eager (Thread Pool)\": 159194, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 158176, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 145390, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 144652, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 144563, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 89700, \"Eager (Thread Pool)\": 159121, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 158420, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 145540, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 144752, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 144696, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 89800, \"Eager (Thread Pool)\": 159256, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 158573, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 145660, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 144914, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 144868, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 89900, \"Eager (Thread Pool)\": 159291, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 159149, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 145650, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 144948, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 144891, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 90000, \"Eager (Thread Pool)\": 159403, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 158736, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 145793, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 145089, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 145068, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 90100, \"Eager (Thread Pool)\": 159534, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 158821, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 145965, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 145239, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 145147, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 90200, \"Eager (Thread Pool)\": 159613, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 158872, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 146154, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 145247, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 145168, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 90300, \"Eager (Thread Pool)\": 159831, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 158989, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 146126, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 145358, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 145268, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 90400, \"Eager (Thread Pool)\": 159851, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 159040, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 146216, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 145424, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 145503, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 90500, \"Eager (Thread Pool)\": 159951, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 159204, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 146314, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 145544, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 145498, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 90600, \"Eager (Thread Pool)\": 160012, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 159273, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 146480, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 145724, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 145628, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 90700, \"Eager (Thread Pool)\": 160128, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 160158, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 146548, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 145718, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 145714, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 90800, \"Eager (Thread Pool)\": 160205, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 159387, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 146606, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 145867, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 145828, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 90900, \"Eager (Thread Pool)\": 160340, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 159607, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 146744, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 145955, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 146008, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 91000, \"Eager (Thread Pool)\": 160307, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 159699, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 146766, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 146046, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 145979, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 91100, \"Eager (Thread Pool)\": 160545, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 159953, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 146938, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 146260, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 146150, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 91200, \"Eager (Thread Pool)\": 160634, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 159886, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 146953, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 146291, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 146181, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 91300, \"Eager (Thread Pool)\": 160668, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 159896, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 147088, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 146359, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 146255, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 91400, \"Eager (Thread Pool)\": 160970, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 160092, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 147242, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 146468, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 146463, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 91500, \"Eager (Thread Pool)\": 160885, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 160103, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 147273, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 146538, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 146420, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 91600, \"Eager (Thread Pool)\": 161016, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 160247, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 147434, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 146635, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 146583, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 91700, \"Eager (Thread Pool)\": 161215, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 160422, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 147571, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 146786, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 146753, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 91800, \"Eager (Thread Pool)\": 161114, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 160443, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 147591, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 146826, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 146793, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 91900, \"Eager (Thread Pool)\": 161340, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 160571, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 147775, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 146928, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 146890, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 92000, \"Eager (Thread Pool)\": 161388, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 160655, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 147797, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 147165, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 146994, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 92100, \"Eager (Thread Pool)\": 161542, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 160757, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 147942, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 147126, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 147064, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 92200, \"Eager (Thread Pool)\": 161616, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 160947, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 148056, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 147281, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 147256, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 92300, \"Eager (Thread Pool)\": 161696, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 160986, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 148093, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 147347, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 147256, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 92400, \"Eager (Thread Pool)\": 161856, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 161068, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 148213, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 147448, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 147412, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 92500, \"Eager (Thread Pool)\": 161919, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 161170, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 148345, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 147562, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 147553, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 92600, \"Eager (Thread Pool)\": 162020, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 161272, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 148379, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 147600, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 147612, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 92700, \"Eager (Thread Pool)\": 162095, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 161545, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 148608, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 147753, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 147718, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 92800, \"Eager (Thread Pool)\": 162204, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 161492, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 148601, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 147786, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 147826, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 92900, \"Eager (Thread Pool)\": 162490, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 161685, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 148786, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 147964, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 147986, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 93000, \"Eager (Thread Pool)\": 162416, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 161609, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 148842, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 148110, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 148083, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 93100, \"Eager (Thread Pool)\": 162584, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 161846, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 148908, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 148121, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 148125, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 93200, \"Eager (Thread Pool)\": 162719, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 161895, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 149030, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 148268, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 148200, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 93300, \"Eager (Thread Pool)\": 162777, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 162029, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 149134, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 148399, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 148413, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 93400, \"Eager (Thread Pool)\": 163485, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 162035, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 149191, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 148455, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 148345, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 93500, \"Eager (Thread Pool)\": 162946, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 162144, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 149330, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 148548, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 148508, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 93600, \"Eager (Thread Pool)\": 163024, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 162301, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 149414, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 148604, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 148614, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 93700, \"Eager (Thread Pool)\": 163072, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 162398, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 149492, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 148837, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 148713, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 93800, \"Eager (Thread Pool)\": 163223, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 162416, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 149643, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 148936, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 148825, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 93900, \"Eager (Thread Pool)\": 163302, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 162618, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 149808, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 148958, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 148957, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 94000, \"Eager (Thread Pool)\": 163449, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 162721, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 149954, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 149249, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 149043, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 94100, \"Eager (Thread Pool)\": 163590, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 162787, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 149924, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 149203, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 149163, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 94200, \"Eager (Thread Pool)\": 163591, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 162892, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 149983, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 149238, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 149142, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 94300, \"Eager (Thread Pool)\": 163737, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 162961, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 150187, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 149344, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 149314, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 94400, \"Eager (Thread Pool)\": 164055, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 163085, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 150267, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 149462, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 149421, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 94500, \"Eager (Thread Pool)\": 163942, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 163876, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 150289, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 149527, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 149513, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 94600, \"Eager (Thread Pool)\": 163969, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 163245, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 150422, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 149648, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 149634, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 94700, \"Eager (Thread Pool)\": 164218, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 163488, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 150550, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 149736, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 149712, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 94800, \"Eager (Thread Pool)\": 164256, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 163412, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 150641, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 149844, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 149836, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 94900, \"Eager (Thread Pool)\": 164320, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 163605, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 150748, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 150007, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 149969, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 95000, \"Eager (Thread Pool)\": 164391, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 163716, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 150808, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 149979, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 149970, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 95100, \"Eager (Thread Pool)\": 164551, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 163740, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 150970, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 150172, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 150124, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 95200, \"Eager (Thread Pool)\": 164611, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 163820, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 150957, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 150272, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 150173, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 95300, \"Eager (Thread Pool)\": 165357, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 163952, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 151145, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 150361, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 150374, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 95400, \"Eager (Thread Pool)\": 164936, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 164260, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 151279, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 150529, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 150556, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 95500, \"Eager (Thread Pool)\": 164903, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 164074, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 151274, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 150505, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 150464, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 95600, \"Eager (Thread Pool)\": 165185, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 164270, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 151409, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 150678, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 150565, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 95700, \"Eager (Thread Pool)\": 165116, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 164381, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 151522, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 150877, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 150886, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 95800, \"Eager (Thread Pool)\": 165267, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 164430, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 151585, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 150835, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 150762, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 95900, \"Eager (Thread Pool)\": 165498, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 164823, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 151778, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 150962, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 150957, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 96000, \"Eager (Thread Pool)\": 165492, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 164851, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 151790, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 151088, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 151002, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 96100, \"Eager (Thread Pool)\": 165504, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 164832, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 151974, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 151165, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 151161, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 96200, \"Eager (Thread Pool)\": 165708, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 164988, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 152134, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 151284, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 151251, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 96300, \"Eager (Thread Pool)\": 165885, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 164938, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 152190, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 151310, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 151346, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 96400, \"Eager (Thread Pool)\": 165999, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 165134, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 152302, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 151492, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 151458, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 96500, \"Eager (Thread Pool)\": 166038, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 165353, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 152354, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 151609, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 151567, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 96600, \"Eager (Thread Pool)\": 165969, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 165330, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 152440, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 151635, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 151587, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 96700, \"Eager (Thread Pool)\": 167029, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 165370, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 152535, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 151746, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 151746, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 96800, \"Eager (Thread Pool)\": 166237, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 165469, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 152624, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 151818, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 151888, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 96900, \"Eager (Thread Pool)\": 167129, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 165613, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 152865, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 151959, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 151963, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 97000, \"Eager (Thread Pool)\": 166623, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 166398, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 152839, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 152112, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 152023, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 97100, \"Eager (Thread Pool)\": 166469, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 165778, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 152913, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 152093, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 152115, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 97200, \"Eager (Thread Pool)\": 166658, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 165864, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 153097, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 152263, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 152202, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 97300, \"Eager (Thread Pool)\": 166923, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 166190, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 153140, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 152378, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 152392, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 97400, \"Eager (Thread Pool)\": 166865, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 166056, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 153194, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 152404, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 152401, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 97500, \"Eager (Thread Pool)\": 166913, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 166143, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 153332, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 152548, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 152492, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 97600, \"Eager (Thread Pool)\": 166987, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 166299, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 153432, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 152608, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 152599, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 97700, \"Eager (Thread Pool)\": 167449, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 166323, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 153523, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 152720, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 152692, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 97800, \"Eager (Thread Pool)\": 167228, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 166562, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 153648, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 152923, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 152839, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 97900, \"Eager (Thread Pool)\": 167351, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 166535, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 153712, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 152909, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 152864, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 98000, \"Eager (Thread Pool)\": 167450, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 166743, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 153824, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 153100, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 153044, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 98100, \"Eager (Thread Pool)\": 167585, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 166890, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 153976, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 153180, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 153154, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 98200, \"Eager (Thread Pool)\": 167632, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 166840, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 154044, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 153258, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 153179, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 98300, \"Eager (Thread Pool)\": 167658, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 166967, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 154127, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 153416, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 153325, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 98400, \"Eager (Thread Pool)\": 167747, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 167004, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 154206, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 153414, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 153374, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 98500, \"Eager (Thread Pool)\": 167830, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 167192, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 154305, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 153543, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 153483, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 98600, \"Eager (Thread Pool)\": 168157, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 167329, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 154440, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 153705, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 153638, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 98700, \"Eager (Thread Pool)\": 168129, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 167284, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 154471, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 153753, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 153705, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 98800, \"Eager (Thread Pool)\": 168283, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 167560, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 154704, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 153863, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 153804, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 98900, \"Eager (Thread Pool)\": 168377, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 167580, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 154736, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 154013, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 153953, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 99000, \"Eager (Thread Pool)\": 168336, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 167606, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 154807, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 154018, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 153936, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 99100, \"Eager (Thread Pool)\": 168486, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 167774, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 154954, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 154148, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 154150, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 99200, \"Eager (Thread Pool)\": 168572, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 167891, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 155009, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 154345, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 154175, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 99300, \"Eager (Thread Pool)\": 168849, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 167888, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 155202, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 154373, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 154287, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 99400, \"Eager (Thread Pool)\": 168883, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 168226, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 155318, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 154458, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 154465, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 99500, \"Eager (Thread Pool)\": 168888, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 168241, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 155308, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 154717, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 154452, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 99600, \"Eager (Thread Pool)\": 169011, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 168252, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 155630, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 154775, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 154646, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 99700, \"Eager (Thread Pool)\": 169176, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 168481, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 155550, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 154814, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 154734, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 99800, \"Eager (Thread Pool)\": 169225, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 168395, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 155581, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 154819, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 154787, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 99900, \"Eager (Thread Pool)\": 169380, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 168623, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 155746, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 154957, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 154926, \"l5\": \"Direct Invoke\"},        {\"Task Duration (ns)\": 100000, \"Eager (Thread Pool)\": 169483, \"l1\": \"Eager (Thread Pool)\", \"Deferred (Thread Pool)\": 169504, \"l2\": \"Deferred (Thread Pool)\", \"Deferred (Inline Executor)\": 155796, \"l3\": \"Deferred (Inline Executor)\", \"Execute (Inline Executor)\": 155014, \"l4\": \"Execute (Inline Executor)\", \"Direct Invoke\": 154995, \"l5\": \"Direct Invoke\"}]   },   \"layer\": [     {       \"mark\": \"line\",       \"encoding\": {         \"x\": {\"field\": \"Task Duration (ns)\", \"type\": \"quantitative\"},         \"y\": {\"field\": \"Eager (Thread Pool)\", \"type\": \"quantitative\", \"title\": \"Execution Time (ns)\"},         \"color\": {\"field\": \"l1\", \"type\": \"nominal\", \"legend\": {\"title\": \"Execution\"}}       }     },     {       \"mark\": \"line\",       \"encoding\": {         \"x\": {\"field\": \"Task Duration (ns)\", \"type\": \"quantitative\"},         \"y\": {\"field\": \"Deferred (Thread Pool)\", \"type\": \"quantitative\", \"title\": \"Execution Time (ns)\"},         \"color\": {\"field\": \"l2\", \"type\": \"nominal\", \"legend\": {\"title\": \"Execution\"}}       }     },     {       \"mark\": \"line\",       \"encoding\": {         \"x\": {\"field\": \"Task Duration (ns)\", \"type\": \"quantitative\"},         \"y\": {\"field\": \"Deferred (Inline Executor)\", \"type\": \"quantitative\", \"title\": \"Execution Time (ns)\"},         \"color\": {\"field\": \"l3\", \"type\": \"nominal\", \"legend\": {\"title\": \"Execution\"}}       }     },     {       \"mark\": \"line\",       \"encoding\": {         \"x\": {\"field\": \"Task Duration (ns)\", \"type\": \"quantitative\"},         \"y\": {\"field\": \"Execute (Inline Executor)\", \"type\": \"quantitative\", \"title\": \"Execution Time (ns)\"},         \"color\": {\"field\": \"l4\", \"type\": \"nominal\", \"legend\": {\"title\": \"Execution\"}}       }     },     {       \"mark\": \"line\",       \"encoding\": {         \"x\": {\"field\": \"Task Duration (ns)\", \"type\": \"quantitative\"},         \"y\": {\"field\": \"Direct Invoke\", \"type\": \"quantitative\", \"title\": \"Execution Time (ns)\"},         \"color\": {\"field\": \"l5\", \"type\": \"nominal\", \"legend\": {\"title\": \"Execution\"}}       }     }  ] } </p> <ul> <li>The library achieves a similar overhead for eager and deferred futures, with    deferred futures being 1.00719 faster.</li> <li>Most overhead comes from the executor, which is a thread pool in this example</li> <li>Invoking the task directly or through the inline executor has a similar cost</li> </ul> <p>Most of the time, the choice between eager and lazy futures is determined by the application. When both eager and lazy futures are applicable, a few criteria might be considered.</p> <ul> <li>Eager futures:<ul> <li>\u2705 They have the obvious benefit of allowing us to already start with the tasks we know about before   assembling the complete execution graph. This is especially useful when not all tasks are available at the same   time.</li> <li>\u2705 The library implements the synchronization of eager futures using atomic operations and   custom allocators to reduce this synchronization cost.</li> </ul> </li> <li>Deferred futures:<ul> <li>\u2705 Lazy futures allow a few optimizations for functions operating on the shared   state, since we can assume there is nothing else we need to synchronize when a task is launched.   This includes no dynamic allocations for the shared state and less synchronization overhead.</li> <li>\u2705 If the application allows, there's no reason not to use them.</li> </ul> </li> <li>Both futures type:<ul> <li>\u2705 For applications with reasonably long tasks, the difference between the two is likely to be   negligible.</li> </ul> </li> </ul> <p>Deferred futures in C++</p> <p>The advantage of callbacks functions is that the calling function provides the continuation before the antecedent task starts. Thus, it's easy to see this model can serve as the foundation for an alternative model of futures in two ways which would also avoid the synchronization overhead of continuations:</p> <ul> <li>Completion Tokens:   The calling function in the callback model provides   a custom tag   indicating the initiating function should return a future type representing the result of the second operation.</li> <li>Lazy futures:   Likewise, lock-free continuations can be implemented as a (deferred) future type such that the continuation is   guaranteed to be available when the first task starts.</li> </ul> <p>This is what these models would look like:</p> Continuable FuturesCallbacksCompletion TokenCallback FuturesLazy Futures <pre><code>void schedule_write(std::size_t length) {\n// async_write returns some continuable future type\nsome_future_lib::async_write(socket_, asio::buffer(data_, length))\n// synchronization cost: check if the current continuation is being read \n.then(schedule_read_function);\n}\n</code></pre> <pre><code>void schedule_write(std::size_t length) {\n// async_write returns void\nasio::async_write(socket_, asio::buffer(data_, length), // no synchronization cost: `async_write` has not started yet \nschedule_read_function);\n}\n</code></pre> <pre><code>void schedule_write(std::size_t length) {\n// async_write returns some continuable future type defined by use_custom_future\nasio::async_write(socket_, asio::buffer(data_, length), // synchronization cost: dependent on custom future type \nuse_custom_future).then(schedule_read_function);\n}\n</code></pre> <pre><code>void schedule_write(std::size_t length) {\n// async_write returns some callback future type that always knows its continuation \nsome_future_lib::async_write(socket_, asio::buffer(data_, length), // no synchronization cost: no extra continuations might be attached \nschedule_read_function);\n}\n</code></pre> <pre><code>void schedule_write(std::size_t length) {\n// async_write returns some deferred future type that we know is not executing yet \nsome_future_lib::deferred_async_write(socket_, asio::buffer(data_, length)) // no synchronization cost: async_write starts after the continuation is attached \n.then(schedule_read_function).detach();\n}\n</code></pre> <p>In other words, while this synchronization requirement of std::future is a problem with std::future and other proposed continuable futures, such as std::experimental::future, this is not a problem with the concept of futures. This synchronization cost is only an issue if we cannot guarantee the execution of the previous function has not started when the continuation is attached.</p> <p>Deferred Future Continuations</p> <p>The library assumes continuations to deferred futures are always attached before the future starts executing. </p> <p>This strategy uses deferred futures as an oportunity for an extra optimization where  we don't have to synchronize the access to continuations by the thread attaching the continuation and the main task. </p> <p>If the deferred future is already executing in one thread, this means it is not thread safe to attempt to attach a continuation in a second thread.      </p> <p>Senders and Receivers</p> <p>To differentiate the \"Future\" concept proposed in P1055 from a std::future, P1194 proposes the name \"senders\" to represent the \"Deferred\" concept defined in P1055. The paper also proposes to rename the function <code>then</code> to <code>submit</code> to suggest the possibility that it may in fact submit the task for execution.</p> <p>More recently, P2300 and libunifex propose a model based on \"senders\" and \"receivers\" for asynchronous operations. From a computer science perspective, senders and receivers are constraints for futures and promises. From a C++ perspective, these are defined as concepts rather than object types. For this reason, the syntax of sender types is still analogous to futures:</p> Futures and PromisesSenders and Receivers <pre><code>auto ex = get_thread_pool().executor();\n\nauto f = async(ex, []{\nstd::cout &lt;&lt; \"Hello world! Have an int.\";\nreturn 13;\n}).then([](int arg) { return arg + 42; });                                                                           int i = f.get();\n</code></pre> <pre><code>scheduler auto sch = get_thread_pool().scheduler();\n\nsender auto begin = schedule(sch);\nsender auto hi_again = then(begin, []{\nstd::cout &lt;&lt; \"Hello world! Have an int.\";\nreturn 13;\n});\nsender auto add_42 = then(hi_again, [](int arg) { return arg + 42; });\n\nauto [i] = this_thread::sync_wait(add_42).value();\n</code></pre> <p>In parallel with discussions about the proper model for C++ executors, senders/receivers have received criticism for attempting to abruptly reformulate common practice in C++ asynchronous computing. The most common objections:</p> <ol> <li>Lack of existing practice:    Most libunifex algorithms    are currently labeled as \"not yet implemented\".</li> <li>Unnecessarily reinventing the wheel: a sender/receive    still represents a future/promise from a computer science    perspective.</li> <li>Unnecessary deviation from common patterns: it does not match the asynchronous model of other programming languages    and C++ historical constructs, which might be unnecessarily confusing.</li> <li>Unnecessary complexity: it is difficult to foresee what problems we are going to have with this model    before libunifex is completely implemented, and the C++ standard is not a good place for experimentation.</li> </ol> <p>Coming from other programming languages or even from the historical C++ constructs, it is hard to distinguish what <code>begin</code> semantically represents and why it is the same type as other tasks in constructs such as:</p> Futures and PromisesSenders and Receivers v1Senders and Receivers v2 <pre><code>auto f = async(ex, []{ std::cout &lt;&lt; \"Hello world!\"; return 13; }).then([](int arg) { return arg + 42;\n});\n</code></pre> <pre><code>sender auto begin = libunifex::schedule(sch);\nsender auto hello = libunifex::then(begin, []{\nstd::cout &lt;&lt; \"Hello world!\";\nreturn 13;\n});\nsender auto f = libunifex::then(hello, [](int arg) { return arg + 42; });\n</code></pre> <pre><code>sender auto f = schedule(sch) | libunifex::then([]{\nstd::cout &lt;&lt; \"Hello world!\";\nreturn 13;\n}) | libunifex::then([](int arg) { return arg + 42; });\n</code></pre> <p>Senders and Futures</p> <p>Although senders are still (deferred) futures from a Computer Science perspective,  P2300 Section 1.10.1 briefly describes two reasons for preferring senders over futures (\"as traditionally realized\"):</p> <ul> <li>futures require the dynamic allocation and management of a shared state</li> <li>futures require type-erasure of work and continuation</li> </ul> <p>As it should be clear from this review, from a computer science perspective, senders are futures, even though they don't represent what was \"traditionally realized\" in std::future. All optimizations possible for \"single-shot senders\" are also possible in \"unique deferred futures\", which are also provided by this library.</p>"},{"location":"futures/deferred/#ready-tasks","title":"Ready tasks","text":"<p>When assembling task graphs, it's often useful to include constant values for which we already know the result but behave like a future type. This can be achieved through make_ready_future:</p> <pre><code>vfuture&lt;int&gt; f = make_ready_future(3);\nassert(f.get() == 3);\n</code></pre> <p>The function returns a vfuture, which represents a basic_future with no associated operation state extensions.</p>"},{"location":"futures/future_types/","title":"Futures types","text":""},{"location":"futures/future_types/#concrete-types","title":"Concrete types","text":"<p>This library implements a number of future types as a concept rather than a single concrete object. For instance, consider a task we are launching with C++11 std::async:</p> C++ std::async <pre><code>std::future&lt;void&gt; future1 = std::async([] {\n// std::async task\nlong_task();\n});\n</code></pre> <p>We could do something similar with the library function futures::async:</p> Launching a continuable future <pre><code>cfuture&lt;void&gt; future2 = futures::async([] {\n// continuable task\nlong_task();\n});\n</code></pre> <p>Notice how async returns a cfuture by default, which is a future to which we can attach continuations. The function async does not always return cfuture. For instance, suppose we call async with a function that accepts a stop_token:</p> Launching a stoppable future <pre><code>jcfuture&lt;void&gt; future3 = futures::async([](stop_token st) {\nint a = 0;\nwhile (!st.stop_requested()) {\n++a;\n}\n// task stopped\nassert(a &gt;= 0);\n});\n</code></pre> <p>It now returns jcfuture by default, which is a future type that supports stop tokens. We can ask the task to stop through the future at any time with:</p> Requesting task to stop <pre><code>future3.request_stop();\n</code></pre> <p>We now have three types of future objects. Because all of these types are future_like, the library functions allow them to interoperate:</p> Waiting for multiple tasks <pre><code>wait_for_all(f1, f2, f3);\nassert(f1.get() == 0);\nassert(f2.get() == 0);\nassert(f3.get() == 0);\n</code></pre> <p>Futures and Promises in Computer Science</p> <p>A future or promise is a value that might not be available yet. They are also called \"deferred\", \"delay\", or simply \"task\" objects in some contexts. This storage for this value might be provided by the future object, the promise object, or by some form shared state between objects related to task execution. A shared state would usually be accessed by the set setting the future value.</p> <ul> <li>1977 - Futures: The first mention of Futures was by Baker and Hewitt. These   futures would contain a process, a memory location for the result, and a list of continuations.</li> <li>1978 - Promises: The term Promises is used by Daniel P. Friedman and David Wise   for the same concept.</li> <li>1985 - Multilisp: Multilisp provided the future and delay annotations for values that   might not be available yet. A variable with the delay annotation would only be calculated when its value was   requested.</li> <li>1988 - Argus: The term Promises is used by Liskov and Shrira for a similar   construct in Argus. It also proposed \"call-streams\" to represent directed acyclic graphs (DAGs) of computation with   promises.</li> <li>1996 - Eventual: The term \"eventual\" is used   by Tribble, Miller, Hardy, &amp; Krieger to represent promises of   \"eventual\" send value into a variable.</li> <li>2002 - Python: The Python Twisted library presents Deferred objects for results of   operations that might still be incomplete.</li> <li>2009 - Javascript: The Javascript CommonJS Promises/A spec is proposed by Kris Zyp.</li> </ul> <p>The formulation implies the future value might always be in completed or incomplete atomic states. As all the formulations presented above, a language might have a single construct called future or promise for eventual values. Javascript defines the single <code>Promise</code> that acts like a read-only future value. When they are distinct, like in C++11, it's common to have two constructs: futures and promises, where one of them is a read-only reference to the expected value.</p> <p>Common asynchronous applications of futures are servers, user input, long-running computations, database queries, remote procedure calls, and timeouts. A number of variations of this pattern have emerged with slightly different meaning for the terms. These variations are used as a model of asynchronous operations in many languages such as JavaScript, Scala, Java, and C++.</p>"},{"location":"futures/future_types/#summary","title":"Summary","text":"<p>For instance, these are some concrete future classes defined in this library and their comparison with std::future:</p> Class Lazy Continuations Stoppable Shared future \u274c \u274c \u274c shared_future \u274c \u274c \u2705 jfuture \u274c \u2705 \u274c shared_jfuture \u274c \u2705 \u2705 cfuture \u2705 \u274c \u274c shared_cfuture \u2705 \u274c \u2705 jcfuture \u2705 \u2705 \u274c shared_jcfuture \u2705 \u2705 \u2705 <ul> <li>Like std::shared_future, multiple threads are allowed to wait for the same shared state of all shared future types.</li> <li>Future types with lazy continuations allow new functions to be appended to the end of the current function being   executed. This allows these continuations to run without launching a new task to the executor. If the continuation   should run in a new executor, it allows the continuation to be scheduled only once the current task is completed.</li> <li>Stoppable future types contain an internal stop_source, similar to std::stop_source. This allows the future to   directly receive stop requests, while the internal future task can identify a stop request has been made through   a stop_token, similar to std::stop_token. This replicates the model of std::jthread for futures.</li> </ul> <p>What problem does this library solve?</p> <ul> <li>The problem: C++11 presented std::future as its model for   asynchronicity. Futures and promises   are a common construct from the 70s where an object represents a value that is still   unknown. By composing with the future objects, this construct allows us to synchronize the program execution in   concurrent programming. On the other hand, many works describe the specific C++11 std::future   model as the wrong abstraction for asynchronous programming.</li> <li>Solutions: Since then, many proposals have been presented to extend this standard std::future model, such as future   continuations, callbacks, lazy/eager execution, cancellation tokens, custom executors, custom allocators, and waiting on   destruction. However, because any handle to a future value is a \"future\" object, it is unlikely that a single concrete   future definition will be appropriate for most applications.</li> <li>This library: This library attempts to solve this problem by defining generic algorithms for a   common future_like concept, which includes 1) existing future types, such as std::future, <code>boost::future</code>   , <code>boost::fiber::future</code>; 2) library provided future types, such as cfuture and jfuture; and 3) custom future types.</li> <li>Results: The concepts allow reusable algorithms for all future types, an alternative to std::async based on executors, various   efficient future types, many future composition algorithms, a syntax closer to other programming languages, and parallel   variants of the STL algorithms.</li> </ul>"},{"location":"futures/future_types/#adaptor-types","title":"Adaptor types","text":"<p>Some other future types are:</p> Class Description Value future vfuture Hold a single value as a future Adaptors when_all_future Represent the conjunction of other futures when_any_future Represent the disjunction of other futures <p>Unlike other future types, when_all_future and when_any_future are proxy future classes to hold the results of the when_all and when_all functions. This proxy allows different future types to interoperate and save resources on new tasks.</p>"},{"location":"futures/future_types/#custom-future-types","title":"Custom future types","text":"<p>Any custom type satisfying the future_like requirements can interoperate with other future type. These classes might represent any process for which a result will only be available in the future, such as child processes and network requests with third-party libraries.</p> <p>A simpler alternative for custom future types is through specific template instantiations of basic_future, which can be configured at compile-time with future_options. Many future types provided by the library as aliases basic_future with specific future_options.</p> <p>Futures in C++11</p> <p>C++11 proposed, in N3170, std::future as its intended model of futures and promises for asynchronicity. A C++ std::future represents a read-only proxy for a result that might not been set by a write-only std::promise yet.</p> <p>When the operation is complete, the result is stored in a shared state, to which both the future and the promise have access. The future is a read-only view of this shared state while a promise allows an external operation to set its value.</p> <p>In the most common use case, this promise is hidden. The user would call std::async to execute a task is parallel and set the promise at the end. After the task is scheduled, std::async would then return a std::future which allows us to query the status of this asynchronous operation:</p> <code>std::async</code><code>std::promise</code> <pre><code>std::future&lt;int&gt; f = std::async([]{ return 8; });\nstd::cout &lt;&lt; \"Result is: \" &lt;&lt; f.get() &lt;&lt; '\\n'; // 8\n</code></pre> <pre><code>std::promise&lt;int&gt; p;\nstd::future&lt;int&gt; f = p.get_future();\n// any async operation, such as std::async, can set this value\np.set_value(8); std::cout &lt;&lt; \"Result is: \" &lt;&lt; f.get() &lt;&lt; '\\n'; // 8\n</code></pre> <p>One satisfactory thing about the combination of std::future, std::async, and std::future::wait is it makes C++ asynchronous programming somewhat similar and often even simpler to that of other programming languages, such as Javascript futures and promises:</p> C++ Futures and PromisesJS Futures and PromisesJS Async / Await <pre><code>std::future&lt;int&gt; f = std::async([]{ return 8; });\nstd::cout &lt;&lt; \"Result is: \" &lt;&lt; f.get() &lt;&lt; '\\n'; // 8\n</code></pre> <pre><code>// std::future&lt;int&gt; f = std::async([]{ return 8; });\nlet f = new Promise(function(resolve, reject) { resolve(8) });\n// std::cout &lt;&lt; \"Result is: \" &lt;&lt; f.get() &lt;&lt; '\\n'; // 8\nf.then( function(value) { console.log('Result is: ' + value) } )\n</code></pre> <pre><code>// std::future&lt;int&gt; f = std::async([]{ return 8; });\n// `async` makes my_function `return Promise.resolve(8)`\nasync function my_function() { return 8 };\nlet f = my_function()\n// std::cout &lt;&lt; \"Result is: \" &lt;&lt; f.get() &lt;&lt; '\\n'; // 8\nlet value = await f\nconsole.log('Result is: ' + value)\n</code></pre> <p>However, because std::future relies on synchronization of a shared state, this initial model is incomplete, hard to use, inefficient, and lacks the usual generality of C++ algorithms. Most implementations could be used for useful for a background threads but are unusable in any context where performance is a requirement. The usual std::future will create one thread per task, which either doesn't scale at all or kills the machine.</p>  graph LR F[Future] --&gt; |read|S[(Shared State)] T[Promised Task] --&gt; |write|S  <p>Better future types</p> <p>This documentation includes historical notes about many models proposed for asynchronicity in C++. Given the pros and cons of each model described in this review, this library models future types as a simple future_like concept/trait, which supports all the features we have discussed in this overview,  such as executors, continuations, and deferred work. We implement optimizations possible to each  future types while sticking to existing practice.</p> <ul> <li>This library maintains the common model most programmers are familiar with</li> <li>Whenever possible, new features always use language familiar to C++ and other common programming languages</li> <li>Whenever possible, we reuse the syntax of std::future/std::promise</li> </ul> <p>Better future concepts</p> <ul> <li>Reusable algorithms work for all future types,<ul> <li>std::future</li> <li><code>boost::future</code></li> <li><code>boost::fiber::future</code></li> <li>Any new and existing future type</li> </ul> </li> <li>Concrete futures can be optionally instantiated with any combination of custom extensions, such as:<ul> <li>Eager/deferred work</li> <li>Unique/shared</li> <li>Continuations</li> <li>Cancellation</li> <li>Allocators</li> </ul> </li> <li>All optimizations possible for \"senders\" are also implemented for \"deferred futures\".</li> <li>Synchronization costs are reduced with deferred futures, atomic operations, and atomic data structures</li> <li>Futures can still match and work with whatever constraints C++ eventually imposes on future types</li> </ul>"},{"location":"futures/launching/","title":"Launching tasks","text":""},{"location":"futures/launching/#future-tasks","title":"Future tasks","text":"<p>The easiest way to create futures is by launching tasks:</p> Launching a simple task <pre><code>cfuture&lt;void&gt; f1 = futures::async([] {\n// Task 1\nlong_task();\n});\n</code></pre> <p>This is what happens under the hood:</p>  graph LR M[[Main Thread]] ==&gt; |store|F[Future Value] E[[Executor]] --&gt; |run|T[Task] M -.-&gt; |launch|T subgraph Futures and Promises F --&gt; |read|S[(Operation State)] T[Promised Task] --&gt; |write|S end  <ol> <li>An executor handles a task. Any data is stored in a private operation state.</li> <li>While the executor handles a task, the main thread holds a future value.</li> <li>When the task is completed, it fulfills its promise by setting the operation state with its result.</li> <li>The future is considered ready and the main thread can obtain its value.</li> </ol> <p>This is how these three steps might happen:</p>  sequenceDiagram     rect rgb(191, 200, 255)     Main-&gt;&gt;Task: Launch     Task-&gt;&gt;State: Create     activate Task     State-&gt;&gt;Future: Create     Task-&gt;&gt;Task: Executor runs task     Future-&gt;&gt;Main: Store     end     Main-&gt;&gt;Main: Do work before waiting     rect rgb(191, 223, 200)     Main-&gt;&gt;Future: Wait     Future-&gt;&gt;State: Wait     Task-&gt;&gt;State: Write     deactivate Task     Future-&gt;&gt;State: Read     end     rect rgb(150, 223, 255)     Future-&gt;&gt;Main: Return     end  <p>The Operation State</p> <p>The operation state is a private implementation detail with  which the user does not interact. </p> <p>This encapsulation ensures all write operations will happen through the promised task and all read operations will happen through the future.</p> <p>It also enables optimizations based on assumptions about how specific future and promise types can access the operation  state.</p> <p>Inline Operation States</p> <p>If these future and promise objects are stable during the execution of the task, the operation state can be stored inline. This is  an optimization that avoids dynamic memory allocations.    </p>"},{"location":"futures/launching/#eager-tasks","title":"Eager tasks","text":"<p>Like std::async, futures::async is used to launch new tasks in parallel.</p> Launching a simple task <pre><code>cfuture&lt;void&gt; f1 = futures::async([] {\n// Task 1\nlong_task();\n});\n</code></pre> <p>In this example, this function returns a continuable cfuture by default instead of a std::future. If the first task parameter is a stop_source, it returns a jcfuture we can stop from the main thread with <code>request_stop</code>.</p> Launching a task with a stop token <pre><code>jcfuture&lt;void&gt; f2 = futures::async([](stop_token st) {\nwhile (!st.stop_requested()) {\n// Running task 2\nshorter_task();\n}\n});\nf2.request_stop();\n</code></pre> <p>If the task accepts parameters, we can provide them directly to async.</p> Launching a task with parameters <pre><code>auto f3 = futures::async([](int x) { assert(x == 2); }, 2);\nauto f4 = futures::async([](int x, int y) { return x + y; }, 2, 3);\n</code></pre> <p>Unlike std::async, which uses launch policies, futures::async can use any concrete executor specifying details about how the task should be executed.</p> Launching a task with a custom executor <pre><code>futures::thread_pool custom_pool(1);\nfutures::thread_pool::executor_type ex = custom_pool.get_executor();\nauto f5 = futures::async(ex, [] {\n// Task in thread pool\nlong_task();\n});\n\nauto f6 = futures::async(make_inline_executor(), [] {\n// Inline task\nlong_task();\n});\n</code></pre> <p>If the executor is not defined, the default executor is used for the tasks. This executor ensures we do not launch a new thread for each task.</p> <p>To block execution of the main thread until the tasks are complete, we can use the functions basic_future::wait and basic_future::get.</p> Waiting for tasks <pre><code>f1.wait();\nf2.wait();\nf3.wait();\nassert(f4.get() == 5);\nf5.wait();\nf6.wait();\n</code></pre> <p>The function basic_future::wait will only block execution until the task is ready, while basic_future::get can be used to wait for and retrieve the final value.</p> <p>Note that eager tasks are allowed to start as soon as they are launched:</p>  sequenceDiagram     Main-&gt;&gt;+Task: Launch     Task-&gt;&gt;Task: Do work     Main-&gt;&gt;Main: Do work     Main-&gt;&gt;Task: Wait     Task-&gt;&gt;-Main: Return  <p>Callbacks and Eager Futures in C++</p> <p>In N3747 , Christopher Kohlhoff compares the model of eager continuations, such as in N3784 to the model of callback functions used in the Asio library:</p> FuturesCallbacks <pre><code>void schedule_write(std::size_t length) {\n// the antecedent future represents the future result of `async_write`\nsome_future_lib::async_write(socket_, asio::buffer(data_, length))\n// The continuation function creates a new future\n.then(schedule_read_function);\n}\n</code></pre> <pre><code>void schedule_write(std::size_t length) {\n// async_write returns void\nasio::async_write(socket_, asio::buffer(data_, length), // the continuation is provided when `async_write` schedules the first task\nschedule_read_function);\n}\n</code></pre> <p>Eager continuable futures may attach the continuation before or after the antecedent future starts. With callbacks functions the calling function provides the continuation before the antecedent task starts, which avoids the synchronization cost in a race between the result and its continuation.</p>"},{"location":"futures/launching/#exceptions","title":"Exceptions","text":"<p>Future objects defined in this library handle exceptions the same way std::future does. If the task throws an exception internally, the exception is rethrown when we attempt to retrieve the value from the future with basic_future::get.</p> <pre><code>cfuture&lt;int&gt; f = futures::async([]() {\nreturn task_that_might_fail();\n});\ntry {\nassert(f.get() == 0);\n}\ncatch (std::exception const&amp;) {\nhandle_error();\n}\n</code></pre> <p>When working without exceptions, we can avoid terminating the process by querying the state of the future before attempting to get its value.</p> <pre><code>cfuture&lt;int&gt; f = async([]() { return task_that_might_fail(); });\nif (!f.get_exception_ptr()) {\nassert(f.get() == 0);\n} else {\n// handle error\n}\n</code></pre>"},{"location":"futures/launching/#allocations","title":"Allocations","text":"<p>The operation state is a private implementation detail with which the user does not interact. To ensure stability, it is usually implemented as a shared pointer to the concrete Operation State, which is where the task will store its result.</p>  graph LR F[Future] --&gt; |read|S1[Shared State Pointer] T[Promise] --&gt; |write|S2[Shared State Pointer] subgraph Shared State S1 --&gt; O[Operation State] S2 --&gt; O[Operation State] end  <p>In the general case, the operation state needs a stable address so that futures and promises can access it. In turn, this requires dynamic memory allocations of this shared state. For smaller tasks, the cost of this allocation might dominate the time spent by the parallel task.</p> <p>For this reason, functions used for launching futures allow custom memory allocators for eager tasks. When no allocator is provided for launching tasks, an optimized memory pool allocator is provided for the operation state.</p>  graph LR F[Future] --&gt; |read|S1[Shared State Pointer] T[Promise] --&gt; |write|S2[Shared State Pointer] subgraph Shared State S1 --&gt; O[Operation State 1] S2 --&gt; O[Operation State 1] end P[Memory Pool] -.-&gt; |owns|O[Operation State 1] P[Memory Pool] -.-&gt; |owns|O2[Operation State 2] P[Memory Pool] -.-&gt; |owns|O3[Operation State 3] P[Memory Pool] -.-&gt; |owns|Odots[...] P[Memory Pool] -.-&gt; |owns|ON[Operation State N]  <p>The memory pool allows fast dynamic memory allocation and provides better cache locality for accessing the tasks and their results.</p> <p>However, in some circumstances, the library implements a few optimizations to avoid allocations altogether. In the following example, we have a deferred future where no allocations are required.</p> Allocations not required <pre><code>auto f = schedule([]() { return 1; });\nassert(f.get() == 1);\n</code></pre> <p>In this example, the operation state might be stored inline with the future:</p>  graph RL F[Future+Operation State] --&gt; |read|F T[Promise] --&gt; |write|F  <p>With this optimization, the operation state is stored in the future, so the future can read the results from its own operation state. The promise can use the address of the operation state in the future to write its result. In this case, the promise is connected with the future and can store results directly in its operation state.</p> <p>This optimization is only applicable if the address of the future will not change, i.e.: will not be moved or destroyed, during task execution, i.e.: (i) after the task to set the operation state is launched and (ii) before the operation state is set. This is easiest to achieve in deferred futures, because the thread waiting for its result is blocked when we call basic_future::wait and the future can only be moved or destroyed after the underlying operation state is set.</p> <p>Note that this optimization is only possible if we can ensure the future cannot be moved or destroyed during task execution:</p> <ul> <li>Functions such as basic_future::wait_for will disable this optimization for deferred futures because the underlying   object might be moved after basic_future::wait_for times out and during task execution.</li> <li>This optimization can be enabled for eager futures that we know should not be moved or destroyed during task   execution. This is common in applications represented as classes that store their future instances. If we mistakenly   attempt to move or destroy the future during execution, it blocks the calling thread until the operation state is set.</li> <li>Similarly, this optimization can be enabled for shared futures if the future object from where the task is launched is   not moved or destroyed during execution.</li> </ul>"},{"location":"futures/launching/#executors","title":"Executors","text":"<p>The concept defined for an executor uses Asio executors as defined by P1393r0. This model for executors has been evolving for over a decade and is widely adopted in C++. If the C++ standard eventually adopts a common vocabulary for executors, the executor concept can be easily adjusted to handle these new executors types.</p> <p>Executors in C++</p> <p>The first clear problem identified with std::async is we cannot define its executor (or scheduler). That is, we cannot define where these tasks are executed. By default, every task is executed in a new thread in C++11, which is unacceptable to most applications. Common executors for these tasks would be thread pools, strands, or GPUs.</p> <p>Many models for standard executors have been proposed over time . In most current models, executors (or schedulers) are light handles representing an execution context where work can be executed. The context is usually called an execution context or execution resource. Executors might be constructed directly from execution contexts or adapted from other executors.</p> <p>Better future executors</p> <ul> <li>Support for custom executors<ul> <li>Its traits are currently a subset of existing Asio executors.</li> </ul> </li> <li>Customization points can make other executor types work with the library types</li> <li>Provides an alternative to std::async based on executors<ul> <li>Still adaptable to other executor or scheduler concepts, including senders and receivers.</li> <li>The default executor does NOT create a new thread for each task</li> </ul> </li> </ul>"},{"location":"futures/promises/","title":"Promises and Packaged Tasks","text":""},{"location":"futures/promises/#promises","title":"Promises","text":"<p>In some cases it might be necessary to have finer control over how the shared state is set. In these cases it might be useful to have direct control over the promises and shared tasks.</p> <p>A promise allows the user to directly control how the shared state should be set. By directly controlling the future and the promise, the user has complete control over how the shared state is set. For instance, the promise value can be set directly inline, returning a future whose value is immediately ready.</p> Inline promise <pre><code>promise&lt;int&gt; p1;\ncfuture&lt;int&gt; f1 = p1.get_future();\np1.set_value(2);\nassert(f1.get() == 2);\n</code></pre> <p>In fact, this is the pattern behind functions such as make_ready_future, which allows us to generate constant values as futures, so that they can interoperate with other value objects.</p> <p>In practice, the promise will usually be moved into a parallel execution context where its value will be set. This becomes useful when the functionalities for launching tasks such as async and schedule do not offer enough control over the process to set the promise value. With a promise, it is possible directly control or even bypass executors. For instance, a thread might be used to set the value of the shared state.</p> Promise set by new thread <pre><code>promise&lt;int&gt; p2;\ncfuture&lt;int&gt; f2 = p2.get_future();\nstd::thread t2([&amp;p2]() { p2.set_value(2); });\nassert(f2.get() == 2);\nt2.join();\n</code></pre> <p>This would be not directly possible with async because std::thread is not executor. This pattern can be replicated with other types, such as <code>boost::fiber</code>.</p> <p>This is equivalent to a more permanent solution which would be to define a custom executor that always launches tasks in new threads.</p> Promise set by new thread executor <pre><code>auto f3 = async(make_new_thread_executor(), []() { return 2; });\nassert(f3.get() == 2);\n</code></pre> <p>This is how promises are related to the shared state:</p>  graph LR M[[User code 1]] --&gt; |store|F[Future Value] N[[User code 2]] --&gt; |set|P[Value Promise] subgraph Futures and Promises F --&gt; |read|S[(Shared State)] P --&gt; |write|S end M --&gt; |store|P M -.-&gt; N[[User code 2]]  <p>With a promise another library could be used to make a web request or run a process whose results will only be available in the future.</p> <p>By calling executor functions directly, we can also achieve a pattern that is very similar to async:</p> Promise set by thread pool <pre><code>promise&lt;int&gt; p4;\ncfuture&lt;int&gt; f4 = p4.get_future();\nfutures::thread_pool pool(1);\npool.get_executor().execute([&amp;p4]() { p4.set_value(2); });\nassert(f4.get() == 2);\n</code></pre> <p>It's useful to note that promises allows us to define the functionalities of the future type via future_options. This defines the type returned by <code>get_future</code>.</p> Promise with custom options <pre><code>promise&lt;int, future_options&lt;&gt;&gt; p5;\nvfuture&lt;int&gt; f5 = p5.get_future();\nstd::thread t5([&amp;p5]() { p5.set_value(2); });\nassert(f5.get() == 2);\nt5.join();\n</code></pre> <p>In this example, we explicitly define the promise should return a future with empty options. That is, the future has no associated executor and does not support continuations. This is useful for immediately available futures because any continuation to this future would not be required to poll for its results with basic_future::wait.</p>"},{"location":"futures/promises/#packaged-tasks","title":"Packaged Tasks","text":"<p>The most common way to use promises is to wrap them in tasks that set their value. This pattern is simplified through a packaged_task, which stores a reference to the shared state and the task used to set its value.</p>  graph LR M[[User code 1]] --&gt; |store|F[Future Value] N[[User code 2]] --&gt; |invoke|P[Packaged Task] subgraph Futures and Promises F --&gt; |read|S[(Shared State)] P --&gt; |write|S end M --&gt; |store|P M -.-&gt; N[[User code 2]]  <p>The packaged task is a callable object that sets the shared state when invoked.</p> Inline packaged task <pre><code>packaged_task&lt;int()&gt; p1([]() { return 2; });\nauto f1 = p1.get_future();\np1();\nassert(f1.get() == 2);\n</code></pre> <p>In this example, we immediately set the future value inline by invoking the packaged task. Instead of returning the value of the task packaged_task stores, any value returned by the internal task is set as the future shared state.</p> <p>When we pass a packaged_task as a parameter it acts like any other callable, which makes it more convenient than promises for APIs that require callables such as when we create a std::thread:</p> Packaged task invoked by thread <pre><code>packaged_task&lt;int()&gt; p2([]() { return 2; });\nauto f2 = p2.get_future();\nstd::thread t(std::move(p2));\nassert(f2.get() == 2);\nt.join();\n</code></pre> <p>By providing a packaged_task directly to an executor, we have a pattern that is very similar to futures::async:</p> Packaged task invoked by executor <pre><code>packaged_task&lt;int()&gt; p3([]() { return 2; });\nauto f3 = p3.get_future();\nfutures::thread_pool pool(1);\npool.get_executor().execute(std::move(p3));\nassert(f3.get() == 2);\n</code></pre> <p>Like promises, a packaged_task allows us to define the functionalities of the future type via future_options. This defines the type to be returned later by <code>get_future</code> .</p>"},{"location":"futures/shared_futures/","title":"Shared Futures","text":"<p>In a shared future, multiple tasks are allowed to wait for and depend on the shared state with another promise.</p>  graph TB F1[Shared Future] --&gt; |read|S[(Shared State)] F2[Shared Future] --&gt; |read|S[(Shared State)] F3[...] --&gt; |read|S[(Shared State)] F4[Shared Future] --&gt; |read|S[(Shared State)] P[Promise] --&gt; |write|S  <p>A shared future can be created from a regular future with the function basic_future::share:</p> Creating a shared future <pre><code>cfuture&lt;int&gt; f1 = async([] { return 1; });\nshared_cfuture&lt;int&gt; f2 = f1.share();\n</code></pre> <p>When creating a shared future, the previous future value is consumed, and it becomes invalid.</p> Previous future is invalidated <pre><code>cfuture&lt;int&gt; f1 = async([] { return 1; });\nshared_cfuture&lt;int&gt; f2 = f1.share();\nassert(!f1.valid());\nassert(f2.valid());\n</code></pre> <p>For this reason, it's common to create shared futures in a single step.</p> Creating a shared future <pre><code>shared_cfuture&lt;int&gt; f = async([] { return 1; }).share();\nassert(f.get() == 1);\n</code></pre> <p>The main difference between a regular future and a shared future is that many valid futures might refer to the same shared state:</p> Sharing the future state <pre><code>shared_cfuture&lt;int&gt; f1 = async([] { return 1; }).share();\n\n// OK to copy\nshared_cfuture&lt;int&gt; f2 = f1;\n</code></pre> <p>While a regular future object is invalidated when its value is read, a value shared by many futures can be read multiple times.</p> Sharing the future state <pre><code>// OK to get\nassert(f1.get() == 1);\n\n// OK to call get on the other future\nassert(f2.get() == 1);\n\n// OK to call get twice\nassert(f1.get() == 1);\nassert(f2.get() == 1);\n</code></pre> <p>However, this comes at a cost. The main consideration when using a shared future is that the value returned by the <code>get</code> function is not moved outside the future.</p> Sharing the future state <pre><code>// OK to get\nassert(f1.get() == 1);\n\n// OK to call get on the other future\nassert(f2.get() == 1);\n\n// OK to call get twice\nassert(f1.get() == 1);\nassert(f2.get() == 1);\n</code></pre> <p>This means the reference returned by basic_future::get needs to be handled carefully. If its value is attributed to another object of the same time, this involves copying the value instead of moving it. For this reason, we always use unique futures as a default.</p> Future vector (value is moved)Shared vector (value is copied) <pre><code>cfuture&lt;std::vector&lt;int&gt;&gt; f = async([] {\nreturn std::vector&lt;int&gt;(1000, 0);\n});\nstd::vector&lt;int&gt; v = f.get(); // value is moved\nassert(!f.valid());           // future is now invalid\n</code></pre> <pre><code>shared_cfuture&lt;std::vector&lt;int&gt;&gt;\nf = async([] {\nreturn std::vector&lt;int&gt;(1000, 0);\n}).share();\nstd::vector&lt;int&gt; v = f.get();  // value is copied\nassert(f.valid());             // future is still valid\nstd::vector&lt;int&gt; v2 = f.get(); // value is copied again\n</code></pre> <p>Having said that, there are applications where sharing the results from the future are simply necessary. If multiple tasks depend on the result of the previous task, there might be no alternative to shared futures. In some applications, futures might contain only trivial values that are cheap to copy. In other applications, sharing a reference or a  shared pointer by value without making copies might also be acceptable.</p> <p>Like std::future and std::shared_future, the classes jfuture, cfuture, jcfuture also have their shared counterparts shared_jfuture, shared_cfuture, shared_jcfuture. In fact, any future defined by basic_future has its shared counterpart where its future_options define the state as shared.</p>"},{"location":"futures/stoppable_futures/","title":"Stoppable Futures","text":"<p>When calling async with a callable that can be called with a stop_token as its first argument, it returns jcfuture:</p> Stoppable task <pre><code>jcfuture&lt;void&gt; f = async([](stop_token s) {\nwhile (!s.stop_requested()) {\nstd::this_thread::sleep_for(std::chrono::milliseconds(20));\n}\n});\n</code></pre> <p>The stop_token defined by the library is similar to the standard defined for std::stop_token. In this example, the task won't be ready until we ask it to stop through the state stop_source.</p> <pre><code>std::this_thread::sleep_for(std::chrono::milliseconds(200));\nassert(!is_ready(f));\n</code></pre> <p>We can use the function basic_future::request_stop to ask the task to stop through its future object.</p> Requesting task to stop <pre><code>f.request_stop();\nf.wait();\nassert(is_ready(f));\n</code></pre> <p>The shared state of a jcfuture contains a stop_source which can be used to request the task to stop from another execution context:</p>  graph LR M[[Main Thread]] ==&gt; |store|F[Future Value] M -.-&gt; |request stop!|F E[[Executor]] --&gt; |run|T[Task] M -.-&gt; |launch|T subgraph Futures and Promises F --&gt; |read|S[(Shared State  +  Stop State)] F -.-&gt; |request stop!|S T[Task] --&gt; |write|S T -.-&gt; |should stop?|S end  <p>This feature is defined as an additional write permission for the future object to the stop state.</p>"},{"location":"futures/waiting/","title":"Waiting for futures","text":""},{"location":"futures/waiting/#waiting","title":"Waiting","text":"<p>The library includes a number of functions to wait for the result of future tasks. The simplest function we can use to wait for a task is basic_future::wait.</p> Waiting for task <pre><code>cfuture&lt;int&gt; f = async([]() { return long_task(); });\nf.wait();\nassert(f.get() == 0);\n</code></pre> <p>Although this is the function we have been using in most examples, basic_future::wait is very limited in practice because we cannot usually wait indefinitely for tasks. Also, basic_future::get will already wait for the task to be ready so basic_future::wait is often redundant.</p>"},{"location":"futures/waiting/#specifying-durations","title":"Specifying durations","text":"<p>In most applications, we launch long asynchronous tasks and cannot block another execution context indefinitely until the task is ready. We might have a timeout after which the task should stop, or we might decide to do other work if the task takes too long to get ready. We can limit the duration we will wait for with basic_future::wait_for:</p> Waiting for a specific duration <pre><code>cfuture&lt;int&gt; f = async([]() { return long_task(); });\nstd::chrono::seconds timeout(1);\nfuture_status s = f.wait_for(timeout);\nif (s == future_status::ready) {\nassert(f.get() == 0);\n} else {\n// do some other work\n}\n</code></pre> <p>Say we are making a network request. It would be impractical to allow this operation to continue indefinitely. It's common practice to continuously read data from the socket until the operation is complete but also cancel the whole operation if a specific timeout has been achieved. We can model this operation with a combination of a stoppable future and basic_future::wait_for.</p> Cancelling a network request <pre><code>jcfuture&lt;std::string&gt; f = async([](stop_token st) {\nstd::string res;\nwhile (!st.stop_requested()) {\nres += read_some();\n}\nreturn res;\n});\nstd::chrono::seconds timeout(1);\nfuture_status s = f.wait_for(timeout);\nif (s == future_status::ready) {\nhandle_success_vals(s);\n} else {\nf.request_stop();\nhandle_failed_request();\n}\n</code></pre> <p>In some applications, it might be easier to express how long we should wait through a time-point instead of a specific duration. For instance, say you have an operation that should be canceled if it's not ready by 12:00AM. We can achieve that with basic_future::wait_until:</p> Waiting until a time-point <pre><code>cfuture&lt;int&gt; f = async([]() { return long_task(); });\nstd::chrono::system_clock::time_point limit = noon();\nfuture_status s = f.wait_until(limit);\nif (s == future_status::ready) {\nassert(f.get() == 0);\n} else {\n// do some other work\n}\n</code></pre>"},{"location":"futures/waiting/#busy-waiting","title":"Busy waiting","text":"<p>The patterns described above are useful when we should block another execution context while the task is not ready. This is useful when we have no other tasks to do while the future task is still running.</p> <p>In other contexts, we might always have some other work to do even if our task graph is still running. This is common in graphical interfaces, where we need to keep rendering the interface even while the task we have been waiting for is not ready.</p> <p>In these cases, when using a basic_future provided by the library, we can use the basic_future::is_ready member function.</p> Checking if the future is ready <pre><code>cfuture&lt;int&gt; f = async([]() { return long_task(); });\nwhile (!should_close_window()) {\nif (f.is_ready()) {\n// Task results\nassert(f.get() == 0);\n}\nrender_window_contents();\n}\n</code></pre> <p>However, this member function is not defined for many other types, and we might need to make algorithms more generic. In these cases, we can use the free function is_ready, which works for any future type, including std::future.</p> Checking if any future is ready <pre><code>std::future&lt;int&gt; f = std::async([]() {\nreturn long_task();\n});\nwhile (!should_close_window()) {\nif (is_ready(f)) {\n// Task results\nassert(f.get() == 0);\n}\nrender_window_contents();\n}\n</code></pre>"},{"location":"futures/waiting/#await","title":"Await","text":"<p>We typically use the functions basic_future::get or basic_future::wait to wait for the result of future types. This is especially important for deferred futures, which might not start executing until we start waiting for their results.</p> <p>The free-function await can also be used to wait for and get results. This is some syntactic sugar that makes waiting more similar to other common programming languages, such as javascript.</p> Waiting for task <pre><code>auto f = async([]() { return long_task(); });\nassert(await(f) == 0);\n</code></pre> <p>This is a free function that works for any future type. The await can also be used for conjunctions. If more than one future object is provided, the result is returned as a std::tuple.</p> Waiting for multiple tasks <pre><code>auto f1 = async([]() { return long_task(); });\nauto f2 = async([]() { return long_task(); });\nauto f3 = async([]() { return long_task(); });\nstd::tuple&lt;int, int, int&gt; r = await(f1, f2, f3);\nassert(std::get&lt;0&gt;(r) == 0);\nassert(std::get&lt;1&gt;(r) == 0);\nassert(std::get&lt;2&gt;(r) == 0);\n</code></pre> <p>This is particularly convenient in C++17, where we can use structured bindings:</p> Waiting for multiple tasks <pre><code>auto [r1, r2, r3] = await(f1, f2, f3);\nassert(r1 == 0);\nassert(r2 == 0);\nassert(r3 == 0);\n</code></pre>"},{"location":"futures/waiting/#waiting-for-conjunctions","title":"Waiting for conjunctions","text":"<p>We can also wait for a future conjunction with wait_for_all. This function waits for all results in a range or tuple of futures without owning them. This is convenient when we need to synchronously wait for a set of futures.</p> Waiting for all futures <pre><code>cfuture&lt;int&gt; f1 = async([]() { return long_task(); });\ncfuture&lt;int&gt; f2 = async([]() { return long_task(); });\nwait_for_all(f1, f2);\nassert(f1.get() == 0);\nassert(f2.get() == 0);\n</code></pre> <p>Unlike await and basic_future::get, wait_for_all does not consume the results. The original future objects are still valid and their values might be obtained directly from them.</p> <p>The overloads of wait_for_all_for and wait_for_all_until are variants that might be used when we wish to specify a time limit.</p> Waiting for multiple tasks <pre><code>std::chrono::seconds d(1);\nfuture_status s = wait_for_all_for(d, f1, f2, f3);\nif (s == future_status::ready) {\nassert(f1.get() == 0);\nassert(f2.get() == 0);\nassert(f3.get() == 0);\n}\n</code></pre> <p>The overloads of these functions can accept ranges of futures, tuples of futures, or parameter packs. These functions return an instance of std::future_status indicating whether all futures are ready.</p> <p>wait_for_all != when_all</p> <p>wait_for_all should not be confused with the future adaptor when_all, which generates a future type.</p> <p>While when_all represents an asynchronous operation in a task graph, wait_for_all is an indication that the task graph should end at that point as an alternative to basic_future::wait for multiple tasks.</p>"},{"location":"futures/waiting/#waiting-for-disjunctions","title":"Waiting for disjunctions","text":"<p>We can also wait for a future disjunction with wait_for_any, wait_for_any_for, and wait_for_any_until. These functions wait for any result in a range or tuple of futures without owning them.</p> Waiting for multiple tasks <pre><code>std::chrono::seconds d(1);\nstd::size_t idx = wait_for_any_for(d, f1, f2, f3);\nswitch (idx) {\ncase 0:\nassert(f1.get() == 0);\nbreak;\ncase 1:\nassert(f2.get() == 0);\nbreak;\ncase 2:\nassert(f3.get() == 0);\nbreak;\ndefault:\nhandle_timeout();\n}\n</code></pre> <p>The overloads of these functions can accept ranges of futures, tuples of futures, or parameter packs. These functions return an iterator to or the index of the first future to get ready. If no task gets ready in the specified duration, an iterator to the last element or <code>std::size_t(-1)</code> is returned.</p> <p>wait_for_any != when_any</p> <p>wait_for_any should not be confused with the future adaptor when_any, which generates a future type.</p> <p>While when_any is an asynchronous operation in a task graph, wait_for_any is an indication that the task graph  should end at that point as an alternative to basic_future::wait for multiple tasks.</p> <p>It's important to note that waiting for disjunctions is more complex than waiting for conjunctions of future objects. While we can wait for a conjunction by waiting for each of its elements, we need set up and wait for a notification from any of the futures in order to know which future has finished first in a sequence of futures. When any of the future objects do not support these external notifiers, we need to poll the tasks until they are completed.</p>"},{"location":"futures/waiting/#adaptors","title":"Adaptors","text":"<p>A number of futures adaptors are provided by the library to compose task graphs. These adaptors can also be used as a more advanced form of waiting for futures implicitly in asynchronous task graphs.</p>"},{"location":"networking/asio/","title":"Asio","text":"<p>Asio is the predominant C++ library for asynchronous network programming.</p> Some applications that use Asio are... <ul> <li>libtorrent</li> <li>libbitcoin</li> <li>Rippled</li> <li>Restbed</li> <li>AbiWord</li> <li>Wt</li> <li>Dragon,</li> <li>reTurn Server</li> <li>WebSocket++</li> <li>Loggly</li> <li>BigLog</li> <li>Remobo</li> <li>OpenTibia</li> <li>PokerTH</li> <li>opendnp3</li> <li>Osiris</li> <li>P2Engine</li> <li>Pion</li> <li>Bit Factory</li> <li>CodeShop</li> <li>ReSP</li> <li>JukeFly</li> <li>QuickFAST</li> <li>Rep Invariant JAUS</li> <li>x0</li> <li>xiva</li> <li>Dr.Web</li> <li>Swift IM</li> <li>Blue Gene/Q,</li> <li>avhttp</li> <li>DDT3</li> <li>eScada</li> <li>ArangoDB</li> </ul> <p>Asio is also the basis for the \"C++ Extensions for Networking\", which benefited from its 15 years of existing practice.</p> <p>This library integrates with Asio to provide interoperability with Asio executors, future types for networking facilities, and as a form to extend existing Asio applications through future completion tokens.</p>"},{"location":"networking/asio/#integration","title":"Integration","text":"<p>Asio is available as both a standalone library or as part of the Boost libraries. This library works with both versions of Asio.</p> CMakeManual configuration <p>If this library has been integrated through CMake, the build script will already identify and integrate Asio. All you need to do is link the appropriate target:</p> Default versionStandalone AsioBoost.Asio <ul> <li>Futures with the preferred version of Asio</li> </ul> <pre><code>add_executable(your_target main.cpp)\ntarget_link_libraries(your_target PUBLIC futures::futures)\n</code></pre> <p>The preferred version of Asio is the version found when configuring the targets. If both versions are available, the CMake options <code>FUTURES_PREFER_STANDALONE_ASIO</code> and <code>FUTURES_PREFER_BOOST</code> can be used to influence that choice.</p> <ul> <li>Futures with standalone Asio</li> </ul> <pre><code>add_executable(your_target main.cpp)\ntarget_link_libraries(your_target PUBLIC futures::futures_asio)\n</code></pre> <p>This target is only available when the standalone Asio library is available. If no versions of Asio are  available, the configuration step will attempt to download a compatible version of the standalone Asio library. </p> <ul> <li>Futures with Boost.Asio</li> </ul> <pre><code>add_executable(your_target main.cpp)\ntarget_link_libraries(your_target PUBLIC futures::futures_boost)\n</code></pre> <p>This target is only available when the Boost.Asio library is available. If Boost cannot be found, the  configuration step will attempt to download a compatible version of the standalone Asio library. </p> <p>When using this library as header-only or using another build system, use the appropriate macros to choose the Asio version should be set:</p> <ul> <li>The macros <code>FUTURES_HAS_STANDALONE_ASIO</code> and <code>FUTURES_HAS_BOOST</code> can be used to indicate that Asio or Boost are    available. <ul> <li>Build systems should be automatically setting these macros</li> <li>If both are undefined, the bundled version of the libraries will be used</li> </ul> </li> <li>When both are available, the macros <code>FUTURES_PREFER_STANDALONE_ASIO</code> and <code>FUTURES_PREFER_BOOST</code> can be used to   indicate whether Asio or Boost.Asio is preferred. </li> </ul> <p>When the macros are undefined, the following steps will be performed to infer their values:        </p> <ul> <li>Identify whether any of dependencies has already been included before <code>futures</code> by checking for the   existence of macros. </li> <li>From C++17, the library can automatically identify the availability of dependencies with the    <code>__has_include</code> macro and set the appropriate   flags accordingly. </li> <li>On other compilers, the library can automatically identify the availability of dependencies with local fake   fake headers.</li> <li>If no dependency headers can be found, the library defaults to the bundled version of the libraries.</li> </ul> <p>Asio is provided as both a header-only or compiled library. To use the compiled version of Asio, the macro  <code>ASIO_SEPARATE_COMPILATION</code> should be defined.</p>"},{"location":"networking/asio/#asio-executors","title":"Asio executors","text":"<p>The Asio library resolves around the <code>io_context</code> execution context. An <code>io_context</code> can be used as any other executor in this library to create futures:</p> asio::io_context as a task queue <pre><code>futures::asio::io_context io;\nusing io_executor = futures::asio::io_context::executor_type;\nio_executor ex = io.get_executor();\ncfuture&lt;int, io_executor&gt; f = async(ex, []() { return 2; });\n</code></pre> <p>However, the <code>io_context</code> executors have two important properties:</p> <p>1) An <code>io_context</code> is a task queue</p> <p>We need to explicitly ask <code>io_context</code> to execute all its pending tasks:</p> asio::io_context as a task queue <pre><code>io.run();\nassert(f.get() == 2);\n</code></pre> <p>Tasks are pushed into the <code>io_context</code> queue which prevents them from being executed immediately. By executing the tasks in the queue, the future value was immediately set.</p> <p>This effectively defers execution until we pop tasks from the queue. The strategy allows parallel tasks on a single thread.</p> <p>2) An <code>io_context</code> supports networking tasks</p> <p>Say we have a server acceptor listening for connections.</p> Push a networking task <pre><code>asio::io_context io;\nasio::ip::tcp::acceptor acceptor(io,\nasio::ip::tcp::endpoint(asio::ip::tcp::v4(), 13));\nasio::ip::tcp::socket client_socket(io);\nacceptor.async_accept(client_socket, [](const asio::error_code&amp;) {\n// handle connection\n});\n</code></pre> <p>The listening task goes to the <code>io_context</code>. By executing the task, we effectively listen for the connections:</p> Pop task <pre><code>io.run();\n</code></pre> <p>In a practical application, we would probably handle this connection by pushing more tasks to the executor to read and write from the client through the client socket.</p>"},{"location":"reference/classes/","title":"Classes","text":"Class futures Main library namespace. (namespace) all_of_functor Functor representing the overloads for the all_of function. (class) always_deferred_opt Future option to determine the future is always_deferred. (struct) always_detached_opt Future option to determine the future is always_detached. (struct) any_executor An wrapper that type erases any non-heterogeneous executor. (class) any_of_functor Functor representing the overloads for the any_of function. (class) basic_future A basic future type with custom features. (class) binary_invoke_algorithm_functor Binary algorithm overloads. (class) broken_promise The state owner got destroyed before the promise has been fulfilled. (class) compare_three_way Function object for performing comparisons. (struct) continuable_opt Future option to determine the future is continuable. (struct) count_functor Functor representing the overloads for the count function. (class) count_if_functor Functor representing the overloads for the count_if function. (class) deferred_function_opt Type of the deferred function. (struct) equal_to A C++17 functor equivalent to the C++20 std::ranges::equal_to. (struct) error Class for errors in the futures library. (class) executor_opt Future option to identify the executor to be used by a future. (struct) find_functor Functor representing the overloads for the find function. (class) find_if_functor Functor representing the overloads for the find_if function. (class) find_if_not_functor Functor representing the overloads for the find_if_not function. (class) for_each_functor Functor representing the overloads for the for_each function. (class) future_already_retrieved Attempted to retrieve a unique future twice. (class) future_deferred Invalid operation on deferred future. (class) future_uninitialized The future hasn't been initialized yet. (class) greater A C++17 functor equivalent to the C++20 std::ranges::greater. (struct) greater_equal A C++17 functor equivalent to the C++20 std::ranges::greater_equal. (struct) halve_partitioner A partitioner that always splits the problem in half. (class) has_executor Determine if a future type has an executor. (struct) has_ready_notifier Customization point to determine if a type has a ready notifier. (struct) inline_executor An executor that runs anything inline. (class) is_always_deferred Customization point to define a future as always deferred. (struct) is_continuable Customization point to define future as supporting continuations. (struct) is_execution_policy Determines whether T is a standard or implementation-defined execution policy type. (struct) is_future_like Customization point to determine if a type is a future type. (struct) is_shared_future Customization point to determine if a type is a shared future type. (struct) less A C++17 functor equivalent to the C++20 std::ranges::less. (struct) less_equal A C++17 functor equivalent to the C++20 std::ranges::less_equal. (struct) new_thread_executor An executor that runs anything in a new thread, like std::async does. (class) no_state There is no shared state we can access. (class) none_of_functor Functor representing the overloads for the none_of function. (class) nostopstate_t Empty struct to initialize a stop_source without a shared stop state. (struct) not_equal_to A C++17 functor equivalent to the C++20 std::ranges::not_equal_to. (struct) packaged_task&lt; R(Args...), Options &gt; A packaged task that sets a shared state when done. (class) packaged_task_uninitialized The packaged task hasn't been initialized yet. (class) promise A shared state that will later be acquired by a future type. (class) promise_already_satisfied Promise has already been fulfilled. (class) promise_base Common members to promises of all types. (class) promise_uninitialized The promised hasn't been initialized yet. (class) reduce_functor Functor representing the overloads for the reduce function. (class) shared_opt Future option to determine the future is shared. (struct) stop_source Object used to issue a stop request. (class) stop_token Token to check if a stop request has been made. (class) stoppable_opt Future option to determine the future is stoppable. (struct) thread_partitioner A partitioner that always splits the problem when moving to new threads. (class) thread_pool A thread pool with the specified number of threads. (class) executor_type A executor that sends tasks to the thread pool. (class) unary_invoke_algorithm_functor Overloads for unary invoke algorithms. (class) value_cmp_algorithm_functor Value-compare algorithm overloads. (class) when_all_future Proxy future class referring to a conjunction of futures from when_all. (class) when_any_future Future object referring to the result of a disjunction of futures. (class) when_any_result Result type for when_any_future objects. (struct) <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1all__of__functor/","title":"futures::all_of_functor","text":"<p>Algorithms / Functions / all_of_functor</p> <p>Defined in header <code>&lt;futures/algorithm/all_of.hpp&gt;</code></p> <pre><code>class all_of_functor;\n</code></pre> <p>Functor representing the overloads for the all_of function. </p> <p>Inherits from unary_invoke_algorithm_functor&lt; Derived &gt;</p>"},{"location":"reference/classes/classfutures_1_1all__of__functor/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const Execute the underlying algorithm.  (function template)"},{"location":"reference/classes/classfutures_1_1all__of__functor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1all__of__functor/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/unary_invoke_algorithm.hpp&gt;</code></p> (1)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, I first, S last, Fun f) const;\n</code></pre> (2)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp;, P p, I first, S last, Fun f) const;\n</code></pre> (3)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (4)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (5)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, Fun f) const;\n</code></pre> (6)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (7)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (8)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (9)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (10)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (11)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, Fun f) const;\n</code></pre> (12)<pre><code>template &lt;\nstd::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, Fun f) const;\n</code></pre> <ol> <li>Execute the underlying algorithm. </li> <li>Execute the underlying algorithm with an execution policy. </li> <li>Execute the algorithm with a range of iterators. </li> <li>Execute the algorithm with a range of iterators and execution policy. </li> <li>Execute the underlying algorithm with a default executor. </li> <li>Execute the algorithm on a range with a default executor. </li> <li>Execute the underlying algorithm with a default partitioner. </li> <li>Execute the algorithm with execution policy and default partitioner. </li> <li>Execute the algorithm on a range with the default partitioner. </li> <li>Execute the algorithm on a range with policy and default partitioner. </li> <li>Execute the algorithm with default executor and partitioner. </li> <li>Execute algorithm on a range with default executor and partitioner. </li> </ol> <p>Template Parameters</p> <ul> <li>E - Executor type </li> <li>Fun - Function type </li> <li>I - Iterator type </li> <li>P - Partitioner type </li> <li>S - Sentinel type </li> </ul> <p>Parameters</p> <ul> <li>ex - An executor instance </li> <li>f - Function invocable with the return type of the iterator </li> <li>first - Iterator to first element in the range </li> <li>last - Sentinel iterator to one element past the last </li> <li>p - A partitioner instance </li> </ul> <p>Return value</p> <p>Result of the underlying algorithm </p> <p>Description</p> <p>The execution policy is converted into the corresponding executor </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1any__executor/","title":"futures::any_executor","text":"<p>Executors / any_executor</p> <p>Defined in header <code>&lt;futures/executor/any_executor.hpp&gt;</code></p> <pre><code>class any_executor;\n</code></pre> <p>An wrapper that type erases any non-heterogeneous executor. </p> <p>Description</p> <p>The wrapped executor should be copy-constructible. </p>"},{"location":"reference/classes/classfutures_1_1any__executor/#public-functions","title":"Public Functions","text":"Member Functions Description (destructor) = default Destructor.  (function) (constructor) Default constructor.  (function) operator= Assignment operator.  (function) execute const Execute the function on the target executor.  (function template)"},{"location":"reference/classes/classfutures_1_1any__executor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1any__executor/#function-any_executor","title":"function ~any_executor","text":"<p>Defined in header <code>&lt;futures/executor/any_executor.hpp&gt;</code></p> <pre><code>~any_executor() = default;\n</code></pre> <p>Destructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1any__executor/#function-any_executor_1","title":"function any_executor","text":"<p>Defined in header <code>&lt;futures/executor/any_executor.hpp&gt;</code></p> (1)<pre><code>any_executor() = default;\n</code></pre> (2)<pre><code>any_executor(any_executor const &amp; e) = default;\n</code></pre> (3)<pre><code>any_executor(any_executor &amp;&amp; e) = default;\n</code></pre> (4)<pre><code>template &lt;executor E&gt;\nrequires /* see requirements below */\nany_executor(E e);\n</code></pre> <ol> <li>Default constructor. </li> <li>Copy constructor. </li> <li>Move constructor. </li> <li>Construct a wrapper for the specified executor. </li> </ol> <p>Description</p> <p>The wrapper will hold no executor.</p> <p>Any task sent for execution will be execute inline. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1any__executor/#function-operator","title":"function operator=","text":"<p>Defined in header <code>&lt;futures/executor/any_executor.hpp&gt;</code></p> (1)<pre><code>any_executor &amp;\noperator=(any_executor const &amp; e) = default;\n</code></pre> (2)<pre><code>any_executor &amp;\noperator=(any_executor &amp;&amp; e) = default;\n</code></pre> (3)<pre><code>any_executor &amp;\noperator=(std::nullptr_t);\n</code></pre> (4)<pre><code>template &lt;executor E&gt;\nrequires /* see requirements below */\nany_executor &amp;\noperator=(E e);\n</code></pre> <ol> <li>Assignment operator. </li> <li>Move assignment operator. </li> <li>Assignment operator that sets the polymorphic wrapper to the empty state. </li> <li>Construct a wrapper for the specified executor. </li> </ol> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1any__executor/#function-execute","title":"function execute","text":"<p>Defined in header <code>&lt;futures/executor/any_executor.hpp&gt;</code></p> <pre><code>template &lt;class F&gt;\nvoid\nexecute(F &amp;&amp; f) const;\n</code></pre> <p>Execute the function on the target executor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1any__of__functor/","title":"futures::any_of_functor","text":"<p>Algorithms / Functions / any_of_functor</p> <p>Defined in header <code>&lt;futures/algorithm/any_of.hpp&gt;</code></p> <pre><code>class any_of_functor;\n</code></pre> <p>Functor representing the overloads for the any_of function. </p> <p>Inherits from unary_invoke_algorithm_functor&lt; Derived &gt;</p>"},{"location":"reference/classes/classfutures_1_1any__of__functor/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const Execute the underlying algorithm.  (function template)"},{"location":"reference/classes/classfutures_1_1any__of__functor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1any__of__functor/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/unary_invoke_algorithm.hpp&gt;</code></p> (1)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, I first, S last, Fun f) const;\n</code></pre> (2)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp;, P p, I first, S last, Fun f) const;\n</code></pre> (3)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (4)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (5)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, Fun f) const;\n</code></pre> (6)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (7)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (8)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (9)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (10)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (11)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, Fun f) const;\n</code></pre> (12)<pre><code>template &lt;\nstd::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, Fun f) const;\n</code></pre> <ol> <li>Execute the underlying algorithm. </li> <li>Execute the underlying algorithm with an execution policy. </li> <li>Execute the algorithm with a range of iterators. </li> <li>Execute the algorithm with a range of iterators and execution policy. </li> <li>Execute the underlying algorithm with a default executor. </li> <li>Execute the algorithm on a range with a default executor. </li> <li>Execute the underlying algorithm with a default partitioner. </li> <li>Execute the algorithm with execution policy and default partitioner. </li> <li>Execute the algorithm on a range with the default partitioner. </li> <li>Execute the algorithm on a range with policy and default partitioner. </li> <li>Execute the algorithm with default executor and partitioner. </li> <li>Execute algorithm on a range with default executor and partitioner. </li> </ol> <p>Template Parameters</p> <ul> <li>E - Executor type </li> <li>Fun - Function type </li> <li>I - Iterator type </li> <li>P - Partitioner type </li> <li>S - Sentinel type </li> </ul> <p>Parameters</p> <ul> <li>ex - An executor instance </li> <li>f - Function invocable with the return type of the iterator </li> <li>first - Iterator to first element in the range </li> <li>last - Sentinel iterator to one element past the last </li> <li>p - A partitioner instance </li> </ul> <p>Return value</p> <p>Result of the underlying algorithm </p> <p>Description</p> <p>The execution policy is converted into the corresponding executor </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1basic__future/","title":"futures::basic_future","text":"<p>Futures / Future types / basic_future</p> <p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>template &lt;class R, class Options = future_options&lt;&gt;&gt; class basic_future;\n</code></pre> <p>A basic future type with custom features. </p> <p>Template Parameters</p> <ul> <li>R - Type of element </li> <li>Options - Future value options </li> </ul> <p>Description</p> <p>Note that these classes only provide the capabilities of tracking these features, such as continuations.</p> <p>Setting up these capabilities (creating tokens or setting main future to run continuations) needs to be done when the future is created in a function such as async by creating the appropriate state for each feature.</p> <p>All this behavior is already encapsulated in the async function.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#public-types","title":"Public Types","text":"Member Types Definition value_type <code>R</code> (using)"},{"location":"reference/classes/classfutures_1_1basic__future/#public-functions","title":"Public Functions","text":"Getting the result Description get Returns the result.  (function) get_exception_ptr Get exception pointer without throwing an exception.  (function) Continuations Description then Attaches a continuation to a future.  (function template) Constructors Description (destructor) Destructor.  (function) (constructor) Constructor.  (function) operator= Copy assignment.  (function) Sharing Description share Create another future whose state is shared.  (function) Future state Description valid const Checks if the future refers to a valid operation state.  (function) wait const Waits for the result to become available.  (function) wait_for const Waits for the result, returns if it is unavailable for duration.  (function template) wait_until const Waits for the result, returns if it is unavailable for duration.  (function template) is_ready const Checks if the associated operation state is ready.  (function) detach Tell this future not to join at destruction.  (function) Private Functions Description unnotify_when_ready Cancel request to notify this condition variable when the future is ready.  (function) waiters_mutex Get a reference to the mutex in the underlying shared state.  (function) wait_if_last Wait if this is the last future referring to the operation state.  (function)"},{"location":"reference/classes/classfutures_1_1basic__future/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description state_ Whether this future should join at destruction.  (public variable) join_ Whether this future should join at destruction.  (public variable)"},{"location":"reference/classes/classfutures_1_1basic__future/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/classfutures_1_1basic__future/#using-value_type","title":"using value_type","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>using value_type = R;\n</code></pre></p>"},{"location":"reference/classes/classfutures_1_1basic__future/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1basic__future/#function-get","title":"function get","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>/* see return type below */\nget();\n</code></pre> <p>Returns the result. </p> <p>Description</p> <p>The get member function waits until the future has a valid result and retrieves it.</p> <p>It effectively calls wait() in order to wait for the result.</p> <p>The behavior is undefined if valid() is false before the call to this function.</p> <p>If the future is unique, any shared state is released and valid() is <code>false</code> after a call to this member function.</p> <ul> <li>Unique futures:<ul> <li><code>R</code> -&gt; return <code>R</code></li> <li><code>R&amp;</code> -&gt; return <code>R&amp;</code></li> <li><code>void</code> -&gt; return <code>void</code></li> </ul> </li> <li>Shared futures:<ul> <li><code>R</code> -&gt; return <code>const R&amp;</code></li> <li><code>R&amp;</code> -&gt; return <code>R&amp;</code></li> <li><code>void</code> -&gt; return <code>void</code></li> </ul> </li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-get_exception_ptr","title":"function get_exception_ptr","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>std::exception_ptr\nget_exception_ptr();\n</code></pre> <p>Get exception pointer without throwing an exception. </p> <p>Return value</p> <p>An exception pointer </p> <p>Description</p> <p>If the future does not hold an exception, the exception_ptr is nullptr.</p> <p>This extends future objects so that we can always check if the future contains an exception without throwing it.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-then","title":"function then","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> (1)<pre><code>template &lt;class Executor, class Fn&gt;\nrequires /* see requirements below */\n/* see return type below */\nthen(Executor const &amp; ex, Fn &amp;&amp; fn);\n</code></pre> (2)<pre><code>template &lt;class Fn&gt;\nrequires /* see requirements below */\n/* see return type below */\nthen(Fn &amp;&amp; fn);\n</code></pre> <ol> <li>Attaches a continuation to a future. </li> <li>Attaches a continuation to a future on the same executor. </li> </ol> <p>Template Parameters</p> <ul> <li>Executor - Executor type </li> <li>Fn - Function type</li> </ul> <p>Parameters</p> <ul> <li>ex - An executor </li> <li>fn - A continuation function</li> </ul> <p>Return value</p> <p>The continuation future </p> <p>Description</p> <p>(1) Attach the continuation function to this future object. The behavior is undefined if this future has no associated operation state (i.e., <code>valid() == false</code>).</p> <p>Creates an operation state associated with the future object to be returned.</p> <p>When the shared state currently associated with this future is ready, the continuation is called on the specified executor.</p> <p>Any value returned from the continuation is stored as the result in the operation state of the returned future object. Any exception propagated from the execution of the continuation is stored as the exceptional result in the operation state of the returned future object.</p> <p>A continuation to an eager future is also eager. If this future is eager, the continuation is attached to a list of continuations of this future.</p> <p>A continuation to a deferred future is also deferred. If this future is deferred, this future is stored as the parent future of the next future.</p> <p>If this future is ready, the continuation is directly launched or scheduled in the specified executor.</p> <p>(2) Attach the continuation function to this future object with the default executor.</p> <p>When the shared state currently associated with this future is ready, the continuation is called on the same executor as this future. If no executor is associated with this future, the default executor is used.</p> <p>Notes</p> <ul> <li>(1) This function only participates in overload resolution if the future supports continuations</li> <li>(2) </li> <li>Unlike <code>std::experimental::future</code>, when the return type of the continuation function is also a future, this function performs no implicit unwrapping on the return type with the <code>get</code> function. This (i) simplifies the development of generic algorithms with futures, (ii) makes the executor for the unwrapping task explicit, and (iii) allows the user to retrieve the returned type as a future or as its unwrapped type.</li> <li>This function only participates in overload resolution if the future supports continuations</li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-basic_future","title":"function ~basic_future","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>~basic_future();\n</code></pre> <p>Destructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-basic_future_1","title":"function basic_future","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> (1)<pre><code>basic_future() = default;\n</code></pre> (2)<pre><code>basic_future(basic_future const &amp; other) = default;\n</code></pre> (3)<pre><code>basic_future(basic_future &amp;&amp; other) noexcept;\n</code></pre> <ol> <li>Constructor. </li> <li>Copy constructor. </li> <li>Move constructor. </li> </ol> <p>Description</p> <p>(1) The default constructor creates an invalid future with no shared state.</p> <p>After construction, <code>valid() == false</code>. </p> <p>(2) Constructs a shared future that refers to the same shared state, if any, as other.</p> <p>(3) Constructs a basic_future with the operation state of other using move semantics.</p> <p>After construction, other.valid() == false. </p> <p>Notes</p> <p>The copy constructor only participates in overload resolution if <code>basic_future</code> is shared. </p> <p>Exception Safety</p> <ul> <li>(1) Basic exception guarantee.</li> <li> <p>(2) Basic exception guarantee.</p> </li> <li> <p>(3) Throws nothing.</p> </li> </ul>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-operator","title":"function operator=","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> (1)<pre><code>basic_future &amp;\noperator=(basic_future const &amp; other) = default;\n</code></pre> (2)<pre><code>basic_future &amp;\noperator=(basic_future &amp;&amp; other) noexcept;\n</code></pre> <ol> <li>Copy assignment. </li> <li>Move assignment. </li> </ol> <p>Description</p> <p>(1) Constructs a shared future that refers to the same shared state, if any, as other.</p> <p>(2) Constructs a basic_future with the operation state of other using move semantics.</p> <p>After construction, other.valid() == false. </p> <p>Notes</p> <p>The copy assignment only participates in overload resolution if <code>basic_future</code> is shared. </p> <p>Exception Safety</p> <ul> <li> <p>(1) Basic exception guarantee.</p> </li> <li> <p>(2) Throws nothing.</p> </li> </ul>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-share","title":"function share","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>basic_future&lt; R, detail::append_future_option_t&lt; shared_opt, Options &gt; &gt;\nshare();\n</code></pre> <p>Create another future whose state is shared. </p> <p>Return value</p> <p>A shared variant of this future </p> <p>Description</p> <p>Create a shared variant of the current future object.</p> <p>If the current type is not shared, the object becomes invalid.</p> <p>If the current type is already shared, the new object is equivalent to a copy.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-valid","title":"function valid","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>bool\nvalid() const;\n</code></pre> <p>Checks if the future refers to a valid operation state. </p> <p>Return value</p> <p>true if <code>*this</code> refers to a valid operation state </p> <p>Description</p> <p>This is the case only for futures that were not default-constructed or moved from until the first time get() or share() is called. If the future is shared, its state is not invalidated when get() is called.</p> <p>If any member function other than the destructor, the move-assignment operator, or <code>valid</code> is called on a future that does not refer a valid operation state, a future_error will be throw to indicate <code>no_state</code>.</p> <p>It is valid to move (or copy, for shared futures) from a future object for which <code>valid()</code> is <code>false</code>.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-wait","title":"function wait","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>void\nwait() const;\n</code></pre> <p>Waits for the result to become available. </p> <p>Description</p> <p>Blocks until the result becomes available.</p> <p><code>valid() == true</code> after the call.</p> <p>A <code>future_uninitialized</code> exception is thrown if <code>valid() == false</code> before the call to this function. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-wait_for","title":"function wait_for","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>template &lt;class Rep, class Period&gt;\nfuture_status\nwait_for(\nstd::chrono::duration&lt; Rep, Period &gt; const &amp; timeout_duration) const;\n</code></pre> <p>Waits for the result, returns if it is unavailable for duration. </p> <p>Parameters</p> <ul> <li>timeout_duration - maximum duration to block for</li> </ul> <p>Return value</p> <p>future status </p> <p>Description</p> <p>Waits for the result to become available. Blocks until specified timeout_duration has elapsed or the result becomes available, whichever comes first. The return value identifies the state of the result.</p> <p>If the future is deferred, the operation state might be converted into a shared operation state. This ensures that (i) the result will be computed only when explicitly requested, and (ii) the address of the operation state will not change once the result is requested.</p> <p>This function may block for longer than <code>timeout_duration</code> due to scheduling or resource contention delays.</p> <p>The behavior is undefined if valid() is false before the call to this function.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-wait_until","title":"function wait_until","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>template &lt;class Clock, class Duration&gt;\nfuture_status\nwait_until(\nstd::chrono::time_point&lt; Clock, Duration &gt; const &amp; timeout_time) const;\n</code></pre> <p>Waits for the result, returns if it is unavailable for duration. </p> <p>Parameters</p> <ul> <li>timeout_time - maximum time point to block until</li> </ul> <p>Return value</p> <p>future status </p> <p>Description</p> <p>Waits for a result to become available. It blocks until specified <code>timeout_time</code> has been reached or the result becomes available, whichever comes first. The return value indicates why <code>wait_until</code> returned.</p> <p>If the future is deferred, the operation state might be converted into a shared operation state. This ensures that (i) the result will be computed only when explicitly requested, and (ii) the address of the operation state will not change once the result is requested.</p> <p>This function may block until after <code>timeout_time</code> due to scheduling or resource contention delays.</p> <p>The behavior is undefined if valid() is false before the call to this function.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-is_ready","title":"function is_ready","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>bool\nis_ready() const;\n</code></pre> <p>Checks if the associated operation state is ready. </p> <p>Return value</p> <p><code>true</code> if the associated shared state is ready </p> <p>Description</p> <p>Checks if the associated shared state is ready.</p> <p>The behavior is undefined if valid() is false.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-detach","title":"function detach","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>void\ndetach();\n</code></pre> <p>Tell this future not to join at destruction. </p> <p>Description</p> <p>For safety, all futures wait at destruction by default.</p> <p>This function separates the execution from the future object, allowing execution to continue independently. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-unnotify_when_ready","title":"function unnotify_when_ready","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>void\nunnotify_when_ready(notify_when_ready_handle h);\n</code></pre> <p>Cancel request to notify this condition variable when the future is ready. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-waiters_mutex","title":"function waiters_mutex","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>std::mutex &amp;\nwaiters_mutex();\n</code></pre> <p>Get a reference to the mutex in the underlying shared state. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#function-wait_if_last","title":"function wait_if_last","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code></p> <pre><code>void\nwait_if_last();\n</code></pre> <p>Wait if this is the last future referring to the operation state. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1basic__future/#public-attributes_1","title":"Public Attributes","text":""},{"location":"reference/classes/classfutures_1_1basic__future/#variable-state_","title":"variable state_","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>future_state_type state_ {};\n</code></pre></p> <p>Whether this future should join at destruction. </p>"},{"location":"reference/classes/classfutures_1_1basic__future/#variable-join_","title":"variable join_","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>bool join_ { !Options::is_always_detached };\n</code></pre></p> <p>Whether this future should join at destruction. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1binary__invoke__algorithm__functor/","title":"futures::binary_invoke_algorithm_functor","text":"<p>Algorithms / Algorithm Traits / binary_invoke_algorithm_functor</p> <p>Defined in header <code>&lt;futures/algorithm/traits/binary_invoke_algorithm.hpp&gt;</code></p> <pre><code>template &lt;class Derived&gt; class binary_invoke_algorithm_functor;\n</code></pre> <p>Binary algorithm overloads. </p> <p>Description</p> <p>CRTP class with the overloads for algorithms that aggregate elements in a sequence with an binary function.</p> <p>This includes algorithms such as reduce and <code>accumulate</code>. </p> <p>Inherited by: <code>binary_invoke_algorithm_functor</code> is a base class for reduce_functor</p>"},{"location":"reference/classes/classfutures_1_1binary__invoke__algorithm__functor/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const Execute the underlying algorithm.  (function template)"},{"location":"reference/classes/classfutures_1_1binary__invoke__algorithm__functor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1binary__invoke__algorithm__functor/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/binary_invoke_algorithm.hpp&gt;</code></p> (1)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::convertible_to&lt; std::iter_value_t&lt; I &gt; &gt; T, std::indirect_binary_predicate&lt; I, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, P p, I first, S last, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (2)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, P p, I first, S last, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (3)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::convertible_to&lt; std::iter_value_t&lt; I &gt; &gt; T, std::indirect_binary_predicate&lt; I, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp;, P p, I first, S last, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (4)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp;, P p, I first, S last, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (5)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::convertible_to&lt; std::ranges::range_value_t&lt; R &gt; &gt; T, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, P p, R &amp;&amp; r, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (6)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::convertible_to&lt; std::ranges::range_value_t&lt; R &gt; &gt; T, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, P p, R &amp;&amp; r, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (7)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, std::ranges::iterator_t&lt; R &gt; &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (8)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, std::ranges::iterator_t&lt; R &gt; &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (9)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::convertible_to&lt; std::iter_value_t&lt; I &gt; &gt; T, std::indirect_binary_predicate&lt; I, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, T value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (10)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (11)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::convertible_to&lt; std::ranges::range_value_t&lt; R &gt; &gt; T, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (12)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, std::ranges::iterator_t&lt; R &gt; &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (13)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::convertible_to&lt; std::iter_value_t&lt; I &gt; &gt; T, std::indirect_binary_predicate&lt; I, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, I first, S last, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (14)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::convertible_to&lt; std::iter_value_t&lt; I &gt; &gt; T, std::indirect_binary_predicate&lt; I, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, I first, S last, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (15)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (16)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (17)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::convertible_to&lt; std::ranges::range_value_t&lt; R &gt; &gt; T, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, R &amp;&amp; r, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (18)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::convertible_to&lt; std::ranges::range_value_t&lt; R &gt; &gt; T, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, R &amp;&amp; r, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (19)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, std::ranges::iterator_t&lt; R &gt; &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (20)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, std::ranges::iterator_t&lt; R &gt; &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (21)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, std::convertible_to&lt; std::iter_value_t&lt; I &gt; &gt; T, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (22)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (23)<pre><code>template &lt;\nstd::ranges::input_range R, std::convertible_to&lt; std::ranges::range_value_t&lt; R &gt; &gt; T, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (24)<pre><code>template &lt;\nstd::ranges::input_range R, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, std::ranges::iterator_t&lt; R &gt; &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> <ol> <li>Execute the underlying algorithm. </li> <li>Execute the algorithm with the default initialization value. </li> <li>Execute the underlying algorithm with an execution policy. </li> <li>Execute the algorithm with an execution policy and default value. </li> <li>Execute the algorithm on a range of iterators. </li> <li>Execute the algorithm on a range with an execution policy. </li> <li>Execute algorithm on a range with default initialization value. </li> <li>Execute algorithm on a range with policy and default value. </li> <li>Execute underlying algorithm with default executor. </li> <li>Execute algorithm with default executor and default value. </li> <li>Execute algorithm on range with default executor. </li> <li>Execute algorithm on range with default executor and initialization. </li> <li>Execute algorithm with default partitioner. </li> <li>Execute algorithm with execution policy and default partitioner. </li> <li>Execute algorithm with default partitioner and initialization value. </li> <li>Execute algorithm with policy, default partitioner and default value. </li> <li>Execute algorithm on range with default partitioner. </li> <li>Execute algorithm on range with execution policy and default partitioner. </li> <li>Execute algorithm on range with default partitioner and value. </li> <li>Execute algorithm on range with policy, default partitioner and value. </li> <li>Execute algorithm with default executor and partitioner. </li> <li>Execute algorithm with default executor, partitioner, and value. </li> <li>Execute algorithm on range with default executor and partitioner. </li> <li>Execute algorithm on range with default executor, partitioner, and value. </li> </ol> <p>Template Parameters</p> <ul> <li>E - Executor type </li> <li>Fun - Function type </li> <li>I - Iterator type </li> <li>P - Partitioner type </li> <li>S - Sentinel type </li> <li>T - Type of value to aggregate the elements with </li> </ul> <p>Parameters</p> <ul> <li>ex - An executor instance </li> <li>f - Function invocable with the return type of the iterator </li> <li>first - Iterator to first element in the range </li> <li>last - Sentinel iterator to one element past the last </li> <li>p - A partitioner instance </li> <li>value - initial value to aggregate the elements with </li> </ul> <p>Return value</p> <p>Result of the underlying algorithm </p> <p>Description</p> <p>The default initialization value is always the first element in the sequence, while the algorithm is executed with other elements. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1broken__promise/","title":"futures::broken_promise","text":"<p>Futures / Error / broken_promise</p> <p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>class broken_promise;\n</code></pre> <p>The state owner got destroyed before the promise has been fulfilled. </p> <p>Inherits from error, <code>std::system_error</code></p>"},{"location":"reference/classes/classfutures_1_1broken__promise/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) (function)"},{"location":"reference/classes/classfutures_1_1broken__promise/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions(inherited from futures::error)</p> Member Functions Description error Constructor.  (function template) ~error override = default Destructor.  (function)"},{"location":"reference/classes/classfutures_1_1broken__promise/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1broken__promise/#function-broken_promise","title":"function broken_promise","text":"<p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>broken_promise();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1count__functor/","title":"futures::count_functor","text":"<p>Algorithms / Functions / count_functor</p> <p>Defined in header <code>&lt;futures/algorithm/count.hpp&gt;</code></p> <pre><code>class count_functor;\n</code></pre> <p>Functor representing the overloads for the count function. </p> <p>Inherits from value_cmp_algorithm_functor&lt; Derived &gt;</p>"},{"location":"reference/classes/classfutures_1_1count__functor/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const Execute the underlying algorithm.  (function template)"},{"location":"reference/classes/classfutures_1_1count__functor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1count__functor/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/value_cmp_algorithm.hpp&gt;</code></p> (1)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, I first, S last, T const &amp; value) const;\n</code></pre> (2)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp;, P p, I first, S last, T const &amp; value) const;\n</code></pre> (3)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (4)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (5)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, T const &amp; value) const;\n</code></pre> (6)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (7)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, T const &amp; value) const;\n</code></pre> (8)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, T const &amp; value) const;\n</code></pre> (9)<pre><code>template &lt;executor E, std::ranges::range R, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (10)<pre><code>template &lt;executor E, std::ranges::range R, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (11)<pre><code>template &lt;std::input_iterator I, std::sentinel_for&lt; I &gt; S, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, T const &amp; value) const;\n</code></pre> (12)<pre><code>template &lt;std::ranges::range R, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, T const &amp; value) const;\n</code></pre> <ol> <li>Execute the underlying algorithm. </li> <li>Execute the algorithm with an execution policy. </li> <li>Execute the underlying algorithm on a range of iterators. </li> <li>Execute the algorithm on a range of iterators and execution policy. </li> <li>Execute the underlying algorithm with the default executor. </li> <li>Execute the algorithm on a range with the default executor. </li> <li>Execute the algorithm with the default partitioner. </li> <li>Execute the algorithm with execution policy and default partitioner. </li> <li>Execute algorithm on a range with the default partitioner. </li> <li>Execute algorithm on a range with policy and default partitioner. </li> <li>Execute algorithm with default partitioner and executor. </li> <li>Execute algorithm on a range with default partitioner and executor. </li> </ol> <p>Template Parameters</p> <ul> <li>E - Executor type </li> <li>I - Iterator type </li> <li>P - Partitioner type </li> <li>S - Sentinel type </li> <li>T - Value to compare with the iterator value </li> </ul> <p>Parameters</p> <ul> <li>ex - An executor instance </li> <li>first - Iterator to first element in the range </li> <li>last - Sentinel iterator to one element past the last </li> <li>p - A partitioner instance </li> <li>value - value to compare the elements to </li> </ul> <p>Return value</p> <p>Result of the underlying algorithm </p> <p>Description</p> <p>The execution policy is converted into the corresponding executor </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1count__if__functor/","title":"futures::count_if_functor","text":"<p>Algorithms / Functions / count_if_functor</p> <p>Defined in header <code>&lt;futures/algorithm/count_if.hpp&gt;</code></p> <pre><code>class count_if_functor;\n</code></pre> <p>Functor representing the overloads for the count_if function. </p> <p>Inherits from unary_invoke_algorithm_functor&lt; Derived &gt;</p>"},{"location":"reference/classes/classfutures_1_1count__if__functor/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const Execute the underlying algorithm.  (function template)"},{"location":"reference/classes/classfutures_1_1count__if__functor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1count__if__functor/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/unary_invoke_algorithm.hpp&gt;</code></p> (1)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, I first, S last, Fun f) const;\n</code></pre> (2)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp;, P p, I first, S last, Fun f) const;\n</code></pre> (3)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (4)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (5)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, Fun f) const;\n</code></pre> (6)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (7)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (8)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (9)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (10)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (11)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, Fun f) const;\n</code></pre> (12)<pre><code>template &lt;\nstd::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, Fun f) const;\n</code></pre> <ol> <li>Execute the underlying algorithm. </li> <li>Execute the underlying algorithm with an execution policy. </li> <li>Execute the algorithm with a range of iterators. </li> <li>Execute the algorithm with a range of iterators and execution policy. </li> <li>Execute the underlying algorithm with a default executor. </li> <li>Execute the algorithm on a range with a default executor. </li> <li>Execute the underlying algorithm with a default partitioner. </li> <li>Execute the algorithm with execution policy and default partitioner. </li> <li>Execute the algorithm on a range with the default partitioner. </li> <li>Execute the algorithm on a range with policy and default partitioner. </li> <li>Execute the algorithm with default executor and partitioner. </li> <li>Execute algorithm on a range with default executor and partitioner. </li> </ol> <p>Template Parameters</p> <ul> <li>E - Executor type </li> <li>Fun - Function type </li> <li>I - Iterator type </li> <li>P - Partitioner type </li> <li>S - Sentinel type </li> </ul> <p>Parameters</p> <ul> <li>ex - An executor instance </li> <li>f - Function invocable with the return type of the iterator </li> <li>first - Iterator to first element in the range </li> <li>last - Sentinel iterator to one element past the last </li> <li>p - A partitioner instance </li> </ul> <p>Return value</p> <p>Result of the underlying algorithm </p> <p>Description</p> <p>The execution policy is converted into the corresponding executor </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1error/","title":"futures::error","text":"<p>Futures / Error / error</p> <p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>class error;\n</code></pre> <p>Class for errors in the futures library. </p> <p>Description</p> <p>All errors in the futures library derive from this class.</p> <p>The type carries a future_errc</p> <p>Inherits from <code>std::system_error</code></p> <p>Inherited by: <code>error</code> is a base class for broken_promise, future_already_retrieved, future_deferred, future_uninitialized, no_state, packaged_task_uninitialized, promise_already_satisfied,  and promise_uninitialized</p>"},{"location":"reference/classes/classfutures_1_1error/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) Constructor.  (function template) (destructor) override = default Destructor.  (function)"},{"location":"reference/classes/classfutures_1_1error/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1error/#function-error","title":"function error","text":"<p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> (1)<pre><code>template &lt;class ErrorCodeEnum&gt;\nrequires /* see requirements below */\nerror(ErrorCodeEnum ec);\n</code></pre> (2)<pre><code>template &lt;class ErrorCodeEnum&gt;\nrequires /* see requirements below */\nerror(ErrorCodeEnum ec, char const * what_arg);\n</code></pre> (3)<pre><code>template &lt;class ErrorCodeEnum&gt;\nrequires /* see requirements below */\nerror(ErrorCodeEnum ec, std::string const &amp; what_arg);\n</code></pre> <p>Constructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1error/#function-error_1","title":"function ~error","text":"<p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>~error() override = default;\n</code></pre> <p>Destructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1find__functor/","title":"futures::find_functor","text":"<p>Algorithms / Functions / find_functor</p> <p>Defined in header <code>&lt;futures/algorithm/find.hpp&gt;</code></p> <pre><code>class find_functor;\n</code></pre> <p>Functor representing the overloads for the find function. </p> <p>Inherits from value_cmp_algorithm_functor&lt; Derived &gt;</p>"},{"location":"reference/classes/classfutures_1_1find__functor/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const Execute the underlying algorithm.  (function template)"},{"location":"reference/classes/classfutures_1_1find__functor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1find__functor/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/value_cmp_algorithm.hpp&gt;</code></p> (1)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, I first, S last, T const &amp; value) const;\n</code></pre> (2)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp;, P p, I first, S last, T const &amp; value) const;\n</code></pre> (3)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (4)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (5)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, T const &amp; value) const;\n</code></pre> (6)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (7)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, T const &amp; value) const;\n</code></pre> (8)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, T const &amp; value) const;\n</code></pre> (9)<pre><code>template &lt;executor E, std::ranges::range R, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (10)<pre><code>template &lt;executor E, std::ranges::range R, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (11)<pre><code>template &lt;std::input_iterator I, std::sentinel_for&lt; I &gt; S, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, T const &amp; value) const;\n</code></pre> (12)<pre><code>template &lt;std::ranges::range R, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, T const &amp; value) const;\n</code></pre> <ol> <li>Execute the underlying algorithm. </li> <li>Execute the algorithm with an execution policy. </li> <li>Execute the underlying algorithm on a range of iterators. </li> <li>Execute the algorithm on a range of iterators and execution policy. </li> <li>Execute the underlying algorithm with the default executor. </li> <li>Execute the algorithm on a range with the default executor. </li> <li>Execute the algorithm with the default partitioner. </li> <li>Execute the algorithm with execution policy and default partitioner. </li> <li>Execute algorithm on a range with the default partitioner. </li> <li>Execute algorithm on a range with policy and default partitioner. </li> <li>Execute algorithm with default partitioner and executor. </li> <li>Execute algorithm on a range with default partitioner and executor. </li> </ol> <p>Template Parameters</p> <ul> <li>E - Executor type </li> <li>I - Iterator type </li> <li>P - Partitioner type </li> <li>S - Sentinel type </li> <li>T - Value to compare with the iterator value </li> </ul> <p>Parameters</p> <ul> <li>ex - An executor instance </li> <li>first - Iterator to first element in the range </li> <li>last - Sentinel iterator to one element past the last </li> <li>p - A partitioner instance </li> <li>value - value to compare the elements to </li> </ul> <p>Return value</p> <p>Result of the underlying algorithm </p> <p>Description</p> <p>The execution policy is converted into the corresponding executor </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1find__if__functor/","title":"futures::find_if_functor","text":"<p>Algorithms / Functions / find_if_functor</p> <p>Defined in header <code>&lt;futures/algorithm/find_if.hpp&gt;</code></p> <pre><code>class find_if_functor;\n</code></pre> <p>Functor representing the overloads for the find_if function. </p> <p>Inherits from unary_invoke_algorithm_functor&lt; Derived &gt;</p>"},{"location":"reference/classes/classfutures_1_1find__if__functor/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const Execute the underlying algorithm.  (function template)"},{"location":"reference/classes/classfutures_1_1find__if__functor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1find__if__functor/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/unary_invoke_algorithm.hpp&gt;</code></p> (1)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, I first, S last, Fun f) const;\n</code></pre> (2)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp;, P p, I first, S last, Fun f) const;\n</code></pre> (3)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (4)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (5)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, Fun f) const;\n</code></pre> (6)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (7)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (8)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (9)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (10)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (11)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, Fun f) const;\n</code></pre> (12)<pre><code>template &lt;\nstd::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, Fun f) const;\n</code></pre> <ol> <li>Execute the underlying algorithm. </li> <li>Execute the underlying algorithm with an execution policy. </li> <li>Execute the algorithm with a range of iterators. </li> <li>Execute the algorithm with a range of iterators and execution policy. </li> <li>Execute the underlying algorithm with a default executor. </li> <li>Execute the algorithm on a range with a default executor. </li> <li>Execute the underlying algorithm with a default partitioner. </li> <li>Execute the algorithm with execution policy and default partitioner. </li> <li>Execute the algorithm on a range with the default partitioner. </li> <li>Execute the algorithm on a range with policy and default partitioner. </li> <li>Execute the algorithm with default executor and partitioner. </li> <li>Execute algorithm on a range with default executor and partitioner. </li> </ol> <p>Template Parameters</p> <ul> <li>E - Executor type </li> <li>Fun - Function type </li> <li>I - Iterator type </li> <li>P - Partitioner type </li> <li>S - Sentinel type </li> </ul> <p>Parameters</p> <ul> <li>ex - An executor instance </li> <li>f - Function invocable with the return type of the iterator </li> <li>first - Iterator to first element in the range </li> <li>last - Sentinel iterator to one element past the last </li> <li>p - A partitioner instance </li> </ul> <p>Return value</p> <p>Result of the underlying algorithm </p> <p>Description</p> <p>The execution policy is converted into the corresponding executor </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1find__if__not__functor/","title":"futures::find_if_not_functor","text":"<p>Algorithms / Functions / find_if_not_functor</p> <p>Defined in header <code>&lt;futures/algorithm/find_if_not.hpp&gt;</code></p> <pre><code>class find_if_not_functor;\n</code></pre> <p>Functor representing the overloads for the find_if_not function. </p> <p>Inherits from unary_invoke_algorithm_functor&lt; Derived &gt;</p>"},{"location":"reference/classes/classfutures_1_1find__if__not__functor/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const Execute the underlying algorithm.  (function template)"},{"location":"reference/classes/classfutures_1_1find__if__not__functor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1find__if__not__functor/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/unary_invoke_algorithm.hpp&gt;</code></p> (1)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, I first, S last, Fun f) const;\n</code></pre> (2)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp;, P p, I first, S last, Fun f) const;\n</code></pre> (3)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (4)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (5)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, Fun f) const;\n</code></pre> (6)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (7)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (8)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (9)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (10)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (11)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, Fun f) const;\n</code></pre> (12)<pre><code>template &lt;\nstd::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, Fun f) const;\n</code></pre> <ol> <li>Execute the underlying algorithm. </li> <li>Execute the underlying algorithm with an execution policy. </li> <li>Execute the algorithm with a range of iterators. </li> <li>Execute the algorithm with a range of iterators and execution policy. </li> <li>Execute the underlying algorithm with a default executor. </li> <li>Execute the algorithm on a range with a default executor. </li> <li>Execute the underlying algorithm with a default partitioner. </li> <li>Execute the algorithm with execution policy and default partitioner. </li> <li>Execute the algorithm on a range with the default partitioner. </li> <li>Execute the algorithm on a range with policy and default partitioner. </li> <li>Execute the algorithm with default executor and partitioner. </li> <li>Execute algorithm on a range with default executor and partitioner. </li> </ol> <p>Template Parameters</p> <ul> <li>E - Executor type </li> <li>Fun - Function type </li> <li>I - Iterator type </li> <li>P - Partitioner type </li> <li>S - Sentinel type </li> </ul> <p>Parameters</p> <ul> <li>ex - An executor instance </li> <li>f - Function invocable with the return type of the iterator </li> <li>first - Iterator to first element in the range </li> <li>last - Sentinel iterator to one element past the last </li> <li>p - A partitioner instance </li> </ul> <p>Return value</p> <p>Result of the underlying algorithm </p> <p>Description</p> <p>The execution policy is converted into the corresponding executor </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1for__each__functor/","title":"futures::for_each_functor","text":"<p>Algorithms / Functions / for_each_functor</p> <p>Defined in header <code>&lt;futures/algorithm/for_each.hpp&gt;</code></p> <pre><code>class for_each_functor;\n</code></pre> <p>Functor representing the overloads for the for_each function. </p> <p>Inherits from unary_invoke_algorithm_functor&lt; Derived &gt;</p>"},{"location":"reference/classes/classfutures_1_1for__each__functor/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const Execute the underlying algorithm.  (function template)"},{"location":"reference/classes/classfutures_1_1for__each__functor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1for__each__functor/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/unary_invoke_algorithm.hpp&gt;</code></p> (1)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, I first, S last, Fun f) const;\n</code></pre> (2)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp;, P p, I first, S last, Fun f) const;\n</code></pre> (3)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (4)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (5)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, Fun f) const;\n</code></pre> (6)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (7)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (8)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (9)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (10)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (11)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, Fun f) const;\n</code></pre> (12)<pre><code>template &lt;\nstd::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, Fun f) const;\n</code></pre> <ol> <li>Execute the underlying algorithm. </li> <li>Execute the underlying algorithm with an execution policy. </li> <li>Execute the algorithm with a range of iterators. </li> <li>Execute the algorithm with a range of iterators and execution policy. </li> <li>Execute the underlying algorithm with a default executor. </li> <li>Execute the algorithm on a range with a default executor. </li> <li>Execute the underlying algorithm with a default partitioner. </li> <li>Execute the algorithm with execution policy and default partitioner. </li> <li>Execute the algorithm on a range with the default partitioner. </li> <li>Execute the algorithm on a range with policy and default partitioner. </li> <li>Execute the algorithm with default executor and partitioner. </li> <li>Execute algorithm on a range with default executor and partitioner. </li> </ol> <p>Template Parameters</p> <ul> <li>E - Executor type </li> <li>Fun - Function type </li> <li>I - Iterator type </li> <li>P - Partitioner type </li> <li>S - Sentinel type </li> </ul> <p>Parameters</p> <ul> <li>ex - An executor instance </li> <li>f - Function invocable with the return type of the iterator </li> <li>first - Iterator to first element in the range </li> <li>last - Sentinel iterator to one element past the last </li> <li>p - A partitioner instance </li> </ul> <p>Return value</p> <p>Result of the underlying algorithm </p> <p>Description</p> <p>The execution policy is converted into the corresponding executor </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1future__already__retrieved/","title":"futures::future_already_retrieved","text":"<p>Futures / Error / future_already_retrieved</p> <p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>class future_already_retrieved;\n</code></pre> <p>Attempted to retrieve a unique future twice. </p> <p>Inherits from error, <code>std::system_error</code></p>"},{"location":"reference/classes/classfutures_1_1future__already__retrieved/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) (function)"},{"location":"reference/classes/classfutures_1_1future__already__retrieved/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions(inherited from futures::error)</p> Member Functions Description error Constructor.  (function template) ~error override = default Destructor.  (function)"},{"location":"reference/classes/classfutures_1_1future__already__retrieved/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1future__already__retrieved/#function-future_already_retrieved","title":"function future_already_retrieved","text":"<p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>future_already_retrieved();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1future__deferred/","title":"futures::future_deferred","text":"<p>Futures / Error / future_deferred</p> <p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>class future_deferred;\n</code></pre> <p>Invalid operation on deferred future. </p> <p>Inherits from error, <code>std::system_error</code></p>"},{"location":"reference/classes/classfutures_1_1future__deferred/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) (function)"},{"location":"reference/classes/classfutures_1_1future__deferred/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions(inherited from futures::error)</p> Member Functions Description error Constructor.  (function template) ~error override = default Destructor.  (function)"},{"location":"reference/classes/classfutures_1_1future__deferred/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1future__deferred/#function-future_deferred","title":"function future_deferred","text":"<p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>future_deferred();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1future__uninitialized/","title":"futures::future_uninitialized","text":"<p>Futures / Error / future_uninitialized</p> <p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>class future_uninitialized;\n</code></pre> <p>The future hasn't been initialized yet. </p> <p>Inherits from error, <code>std::system_error</code></p>"},{"location":"reference/classes/classfutures_1_1future__uninitialized/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) (function)"},{"location":"reference/classes/classfutures_1_1future__uninitialized/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions(inherited from futures::error)</p> Member Functions Description error Constructor.  (function template) ~error override = default Destructor.  (function)"},{"location":"reference/classes/classfutures_1_1future__uninitialized/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1future__uninitialized/#function-future_uninitialized","title":"function future_uninitialized","text":"<p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>future_uninitialized();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1halve__partitioner/","title":"futures::halve_partitioner","text":"<p>Algorithms / Partitioners / halve_partitioner</p> <p>Defined in header <code>&lt;futures/algorithm/partitioner/halve_partitioner.hpp&gt;</code></p> <pre><code>class halve_partitioner;\n</code></pre> <p>A partitioner that always splits the problem in half. </p> <p>Description</p> <p>The halve partitioner always splits the sequence into two parts of roughly equal size</p> <p>The sequence is split up to a minimum grain size. As a concept, the result from the partitioner is considered a suggestion for parallelization. For algorithms such as for_each, a partitioner with a very small grain size might be appropriate if the operation is very expensive. Some algorithms, such as a binary search, might naturally adjust this suggestion so that the result makes sense. </p>"},{"location":"reference/classes/classfutures_1_1halve__partitioner/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) Constructor.  (function) operator() Split a range of elements.  (function template)"},{"location":"reference/classes/classfutures_1_1halve__partitioner/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1halve__partitioner/#function-halve_partitioner","title":"function halve_partitioner","text":"<p>Defined in header <code>&lt;futures/algorithm/partitioner/halve_partitioner.hpp&gt;</code></p> <pre><code>explicit constexpr\nhalve_partitioner(std::size_t min_grain_size_);\n</code></pre> <p>Constructor. </p> <p>Parameters</p> <ul> <li>min_grain_size_ - Minimum grain size used to split ranges </li> </ul> <p>Description</p> <p>The constructor has a minimum grain size after which the range should not be split.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1halve__partitioner/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/partitioner/halve_partitioner.hpp&gt;</code></p> <pre><code>template &lt;std::input_iterator I, std::sentinel_for&lt; I &gt; S&gt;\nI\noperator()(I first, S last);\n</code></pre> <p>Split a range of elements. </p> <p>Template Parameters</p> <ul> <li>I - Iterator type </li> <li>S - Sentinel type </li> </ul> <p>Parameters</p> <ul> <li>first - First element in range </li> <li>last - Last element in range </li> </ul> <p>Return value</p> <p>Iterator to point where sequence should be split </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1inline__executor/","title":"futures::inline_executor","text":"<p>Executors / inline_executor</p> <p>Defined in header <code>&lt;futures/executor/inline_executor.hpp&gt;</code></p> <pre><code>class inline_executor;\n</code></pre> <p>An executor that runs anything inline. </p> <p>Description</p> <p>Although simple, it needs to meet the executor requirements:</p> <ul> <li>Executor concept</li> <li>Ability to query the execution context<ul> <li>Result being derived from execution_context</li> </ul> </li> <li>The execute function https://think-async.com/Asio/asio-1.18.2/doc/asio/std_executors.html</li> </ul>"},{"location":"reference/classes/classfutures_1_1inline__executor/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) = default (function) execute const (function template)"},{"location":"reference/classes/classfutures_1_1inline__executor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1inline__executor/#function-inline_executor","title":"function inline_executor","text":"<p>Defined in header <code>&lt;futures/executor/inline_executor.hpp&gt;</code></p> <pre><code>constexpr\ninline_executor() = default;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1inline__executor/#function-execute","title":"function execute","text":"<p>Defined in header <code>&lt;futures/executor/inline_executor.hpp&gt;</code></p> <pre><code>template &lt;class F&gt;\nvoid\nexecute(F &amp;&amp; f) const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1new__thread__executor/","title":"futures::new_thread_executor","text":"<p>Executors / new_thread_executor</p> <p>Defined in header <code>&lt;futures/executor/new_thread_executor.hpp&gt;</code></p> <pre><code>class new_thread_executor;\n</code></pre> <p>An executor that runs anything in a new thread, like std::async does. </p>"},{"location":"reference/classes/classfutures_1_1new__thread__executor/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) = default (function) execute const (function template)"},{"location":"reference/classes/classfutures_1_1new__thread__executor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1new__thread__executor/#function-new_thread_executor","title":"function new_thread_executor","text":"<p>Defined in header <code>&lt;futures/executor/new_thread_executor.hpp&gt;</code></p> <pre><code>constexpr\nnew_thread_executor() = default;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1new__thread__executor/#function-execute","title":"function execute","text":"<p>Defined in header <code>&lt;futures/executor/new_thread_executor.hpp&gt;</code></p> <pre><code>template &lt;class F&gt;\nvoid\nexecute(F &amp;&amp; f) const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1no__state/","title":"futures::no_state","text":"<p>Futures / Error / no_state</p> <p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>class no_state;\n</code></pre> <p>There is no shared state we can access. </p> <p>Inherits from error, <code>std::system_error</code></p>"},{"location":"reference/classes/classfutures_1_1no__state/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) (function)"},{"location":"reference/classes/classfutures_1_1no__state/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions(inherited from futures::error)</p> Member Functions Description error Constructor.  (function template) ~error override = default Destructor.  (function)"},{"location":"reference/classes/classfutures_1_1no__state/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1no__state/#function-no_state","title":"function no_state","text":"<p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>no_state();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1none__of__functor/","title":"futures::none_of_functor","text":"<p>Algorithms / Functions / none_of_functor</p> <p>Defined in header <code>&lt;futures/algorithm/none_of.hpp&gt;</code></p> <pre><code>class none_of_functor;\n</code></pre> <p>Functor representing the overloads for the none_of function. </p> <p>Inherits from unary_invoke_algorithm_functor&lt; Derived &gt;</p>"},{"location":"reference/classes/classfutures_1_1none__of__functor/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const Execute the underlying algorithm.  (function template)"},{"location":"reference/classes/classfutures_1_1none__of__functor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1none__of__functor/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/unary_invoke_algorithm.hpp&gt;</code></p> (1)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, I first, S last, Fun f) const;\n</code></pre> (2)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp;, P p, I first, S last, Fun f) const;\n</code></pre> (3)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (4)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (5)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, Fun f) const;\n</code></pre> (6)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (7)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (8)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (9)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (10)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (11)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, Fun f) const;\n</code></pre> (12)<pre><code>template &lt;\nstd::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, Fun f) const;\n</code></pre> <ol> <li>Execute the underlying algorithm. </li> <li>Execute the underlying algorithm with an execution policy. </li> <li>Execute the algorithm with a range of iterators. </li> <li>Execute the algorithm with a range of iterators and execution policy. </li> <li>Execute the underlying algorithm with a default executor. </li> <li>Execute the algorithm on a range with a default executor. </li> <li>Execute the underlying algorithm with a default partitioner. </li> <li>Execute the algorithm with execution policy and default partitioner. </li> <li>Execute the algorithm on a range with the default partitioner. </li> <li>Execute the algorithm on a range with policy and default partitioner. </li> <li>Execute the algorithm with default executor and partitioner. </li> <li>Execute algorithm on a range with default executor and partitioner. </li> </ol> <p>Template Parameters</p> <ul> <li>E - Executor type </li> <li>Fun - Function type </li> <li>I - Iterator type </li> <li>P - Partitioner type </li> <li>S - Sentinel type </li> </ul> <p>Parameters</p> <ul> <li>ex - An executor instance </li> <li>f - Function invocable with the return type of the iterator </li> <li>first - Iterator to first element in the range </li> <li>last - Sentinel iterator to one element past the last </li> <li>p - A partitioner instance </li> </ul> <p>Return value</p> <p>Result of the underlying algorithm </p> <p>Description</p> <p>The execution policy is converted into the corresponding executor </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1packaged__task_3_01R_07Args_8_8_8_08_00_01Options_01_4/","title":"futures::packaged_task&lt; R(Args...), Options &gt;","text":"<p>Futures / Shared State / packaged_task&lt; R(Args...), Options &gt;</p> <p>Defined in header <code>&lt;futures/packaged_task.hpp&gt;</code></p> <pre><code>template &lt;typename Signature, Options&gt; class packaged_task&lt; R(Args...), Options &gt;;\n</code></pre> <p>A packaged task that sets a shared state when done. </p> <p>Template Parameters</p> <ul> <li>R - Return type </li> <li>Args - Task arguments </li> </ul> <p>Description</p> <p>A packaged task holds a task to be executed and a shared state for its result. It's very similar to a promise where the shared state is extended with a task to generate the state.</p>"},{"location":"reference/classes/classfutures_1_1packaged__task_3_01R_07Args_8_8_8_08_00_01Options_01_4/#public-functions","title":"Public Functions","text":"Member Functions Description packaged_task Constructs a std::packaged_task object with no task and no shared state.  (function) operator= The copy assignment is deleted, std::packaged_task is move-only.  (function) ~packaged_task Destructs the task object.  (function) valid const Checks if the task object has a valid function.  (function) swap Swaps two task objects.  (function) get_future Returns a future object associated with the promised result.  (function template) operator() Executes the function and set the shared state.  (function template) reset Resets the shared state abandoning any stored results of previous executions.  (function) set_wait_callback Set the task we should execute before waiting.  (function template)"},{"location":"reference/classes/classfutures_1_1packaged__task_3_01R_07Args_8_8_8_08_00_01Options_01_4/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1packaged__task_3_01R_07Args_8_8_8_08_00_01Options_01_4/#function-packaged_task","title":"function packaged_task","text":"<p>Defined in header <code>&lt;futures/packaged_task.hpp&gt;</code></p> (1)<pre><code>packaged_task() = default;\n</code></pre> (2)<pre><code>template &lt;class Fn&gt;\nrequires /* see requirements below */\nexplicit packaged_task(Fn &amp;&amp; fn);\n</code></pre> (3)<pre><code>template &lt;class Fn, class Allocator&gt;\nrequires /* see requirements below */\nexplicit packaged_task(std::allocator_arg_t, Allocator const &amp; alloc, Fn &amp;&amp; fn);\n</code></pre> (4)<pre><code>packaged_task(packaged_task const &amp;) = delete;\n</code></pre> (5)<pre><code>packaged_task(packaged_task &amp;&amp; other) noexcept;\n</code></pre> <ol> <li>Constructs a std::packaged_task object with no task and no shared state. </li> <li>Construct a packaged task from a function with the default std allocator. </li> <li>Constructs a std::packaged_task object with a shared state and a copy of the task. </li> <li>The copy constructor is deleted, std::packaged_task is move-only. </li> <li>Constructs a std::packaged_task with the shared state and task formerly owned by other. </li> </ol> <p>Template Parameters</p> <ul> <li>Allocator - Allocator type </li> <li>Fn - Function type </li> </ul> <p>Parameters</p> <ul> <li>alloc - The allocator to use when storing the task </li> <li>fn - The callable target to execute </li> </ul> <p>Description</p> <p>This function constructs a std::packaged_task object with a shared state and a copy of the task, initialized with std::forward(fn). It uses the provided allocator to allocate memory necessary to store the task. <p>Constraints</p> <p>(1) This constructor only participates in overload resolution if Fn is not a packaged task itself.</p> <p>(2) This constructor does not participate in overload resolution if std::decay::type is the same type as std::packaged_task. <p>Exception Safety</p> <ul> <li>(1) Basic exception guarantee.</li> <li>(2) Basic exception guarantee.</li> <li>(3) Basic exception guarantee.</li> <li> <p>(4) Basic exception guarantee.</p> </li> <li> <p>(5) Throws nothing.</p> </li> </ul>"},{"location":"reference/classes/classfutures_1_1packaged__task_3_01R_07Args_8_8_8_08_00_01Options_01_4/#function-operator","title":"function operator=","text":"<p>Defined in header <code>&lt;futures/packaged_task.hpp&gt;</code></p> (1)<pre><code>packaged_task &amp;\noperator=(packaged_task const &amp;) = delete;\n</code></pre> (2)<pre><code>packaged_task &amp;\noperator=(packaged_task &amp;&amp; other) noexcept;\n</code></pre> <ol> <li>The copy assignment is deleted, std::packaged_task is move-only. </li> <li>Assigns a std::packaged_task with the shared state and task formerly owned by other. </li> </ol> <p>Exception Safety</p> <ul> <li> <p>(1) Basic exception guarantee.</p> </li> <li> <p>(2) Throws nothing.</p> </li> </ul>"},{"location":"reference/classes/classfutures_1_1packaged__task_3_01R_07Args_8_8_8_08_00_01Options_01_4/#function-packaged_task_1","title":"function ~packaged_task","text":"<p>Defined in header <code>&lt;futures/packaged_task.hpp&gt;</code></p> <pre><code>~packaged_task();\n</code></pre> <p>Destructs the task object. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1packaged__task_3_01R_07Args_8_8_8_08_00_01Options_01_4/#function-valid","title":"function valid","text":"<p>Defined in header <code>&lt;futures/packaged_task.hpp&gt;</code></p> <pre><code>bool\nvalid() const noexcept;\n</code></pre> <p>Checks if the task object has a valid function. </p> <p>Return value</p> <p>true if *this has a shared state, false otherwise </p> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1packaged__task_3_01R_07Args_8_8_8_08_00_01Options_01_4/#function-swap","title":"function swap","text":"<p>Defined in header <code>&lt;futures/packaged_task.hpp&gt;</code></p> <pre><code>void\nswap(packaged_task &amp; other) noexcept;\n</code></pre> <p>Swaps two task objects. </p> <p>Parameters</p> <ul> <li>other - packaged task whose state to swap with </li> </ul> <p>Description</p> <p>This function exchanges the shared states and stored tasks of *this and other</p> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1packaged__task_3_01R_07Args_8_8_8_08_00_01Options_01_4/#function-get_future","title":"function get_future","text":"<p>Defined in header <code>&lt;futures/packaged_task.hpp&gt;</code></p> <pre><code>template &lt;class Future =basic_future&lt;R, Options&gt;&gt;\nFuture\nget_future();\n</code></pre> <p>Returns a future object associated with the promised result. </p> <p>Description</p> <p>This function constructs a future object that shares its state with this promise Because this library handles more than a single future type, the future type we want is a template parameter. This function expects future type constructors to accept pointers to shared states. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1packaged__task_3_01R_07Args_8_8_8_08_00_01Options_01_4/#function-operator_1","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/packaged_task.hpp&gt;</code></p> <pre><code>template &lt;class... OtherArgs&gt;\nvoid\noperator()(OtherArgs... args);\n</code></pre> <p>Executes the function and set the shared state. </p> <p>Parameters</p> <ul> <li>args - the parameters to pass on invocation of the stored task </li> </ul> <p>Description</p> <p>Calls the stored task with args as the arguments. The return value of the task or any exceptions thrown are stored in the shared state The shared state is made ready and any threads waiting for this are unblocked.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1packaged__task_3_01R_07Args_8_8_8_08_00_01Options_01_4/#function-reset","title":"function reset","text":"<p>Defined in header <code>&lt;futures/packaged_task.hpp&gt;</code></p> <pre><code>void\nreset();\n</code></pre> <p>Resets the shared state abandoning any stored results of previous executions. </p> <p>Description</p> <p>Resets the state abandoning the results of previous executions. A new shared state is constructed. Equivalent to *this = packaged_task(std::move(f)), where f is the stored task. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1packaged__task_3_01R_07Args_8_8_8_08_00_01Options_01_4/#function-set_wait_callback","title":"function set_wait_callback","text":"<p>Defined in header <code>&lt;futures/packaged_task.hpp&gt;</code></p> <pre><code>template &lt;typename F&gt;\nvoid\nset_wait_callback(F &amp;&amp; f);\n</code></pre> <p>Set the task we should execute before waiting. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1packaged__task__uninitialized/","title":"futures::packaged_task_uninitialized","text":"<p>Futures / Error / packaged_task_uninitialized</p> <p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>class packaged_task_uninitialized;\n</code></pre> <p>The packaged task hasn't been initialized yet. </p> <p>Inherits from error, <code>std::system_error</code></p>"},{"location":"reference/classes/classfutures_1_1packaged__task__uninitialized/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) (function)"},{"location":"reference/classes/classfutures_1_1packaged__task__uninitialized/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions(inherited from futures::error)</p> Member Functions Description error Constructor.  (function template) ~error override = default Destructor.  (function)"},{"location":"reference/classes/classfutures_1_1packaged__task__uninitialized/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1packaged__task__uninitialized/#function-packaged_task_uninitialized","title":"function packaged_task_uninitialized","text":"<p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>packaged_task_uninitialized();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1promise/","title":"futures::promise","text":"<p>Futures / Shared State / promise</p> <p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> <pre><code>template &lt;\nclass R, class Options = future_options&lt;executor_opt&lt;default_executor_type&gt;, continuable_opt&gt;&gt; class promise;\n</code></pre> <p>A shared state that will later be acquired by a future type. </p> <p>Template Parameters</p> <ul> <li>R - The shared state type </li> </ul> <p>Description</p> <p>The shared state is accessed by a future and a promise. The promise can write to the shared state while the future can read from it.</p> <p>The shared state is an implementation detail that takes advantages of the properties of futures and promises to avoid locking and wasteful memory allocations.</p> <p>Inherits from promise_base&lt; R, future_options&lt; executor_opt&lt; default_executor_type &gt;, continuable_opt &gt; &gt;</p>"},{"location":"reference/classes/classfutures_1_1promise/#public-functions","title":"Public Functions","text":"Member Functions Description set_value Set the promise value.  (function template) swap Swap the value of two promises.  (function) get_future Gets a future that shares its state with this promise.  (function) set_exception Set the promise result as an exception.  (function)"},{"location":"reference/classes/classfutures_1_1promise/#protected-functions","title":"Protected Functions","text":"Member Protected Functions Description swap (function) get_shared_state (function)"},{"location":"reference/classes/classfutures_1_1promise/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions(inherited from futures::promise_base&lt; R, future_options&lt; executor_opt&lt; default_executor_type &gt;, continuable_opt &gt; &gt;)</p> Member Functions Description promise_base Create the base promise with std::allocator.  (function) operator= No copy assignment.  (function) ~promise_base Destructor.  (virtual function)"},{"location":"reference/classes/classfutures_1_1promise/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1promise/#function-set_value","title":"function set_value","text":"<p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> <pre><code>template &lt;class... Args&gt;\nvoid\nset_value(Args &amp;&amp;... args);\n</code></pre> <p>Set the promise value. </p> <p>Parameters</p> <ul> <li>args - arguments to set the promise </li> </ul> <p>Description</p> <p>After this value is set, it can be obtained by the future object</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1promise/#function-swap","title":"function swap","text":"<p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> <pre><code>void\nswap(promise &amp; other) noexcept;\n</code></pre> <p>Swap the value of two promises. </p> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1promise/#function-get_future","title":"function get_future","text":"<p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> <pre><code>basic_future&lt; R, Options &gt;\nget_future();\n</code></pre> <p>Gets a future that shares its state with this promise. </p> <p>Description</p> <p>This function constructs a future object that shares its state with this promise. Because this library handles more than a single future type, the future type we want is a template parameter.</p> <p>This function expects future type constructors to accept pointers to shared states. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1promise/#function-set_exception","title":"function set_exception","text":"<p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> (1)<pre><code>void\nset_exception(std::exception_ptr p);\n</code></pre> (2)<pre><code>template &lt;class E&gt;\nrequires std::is_base_of_v&lt;std::exception, E&gt;\nvoid\nset_exception(E e);\n</code></pre> <p>Set the promise result as an exception. </p> <p>Notes</p> <p>The set_value operation is only available at the concrete derived class, where we know the class type </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1promise/#protected-functions_1","title":"Protected Functions","text":""},{"location":"reference/classes/classfutures_1_1promise/#function-swap_1","title":"function swap","text":"<p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> <pre><code>void\nswap(promise_base &amp; other) noexcept;\n</code></pre> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1promise/#function-get_shared_state","title":"function get_shared_state","text":"<p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> <pre><code>constexpr\n/* see return type below */\nget_shared_state();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1promise__already__satisfied/","title":"futures::promise_already_satisfied","text":"<p>Futures / Error / promise_already_satisfied</p> <p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>class promise_already_satisfied;\n</code></pre> <p>Promise has already been fulfilled. </p> <p>Inherits from error, <code>std::system_error</code></p>"},{"location":"reference/classes/classfutures_1_1promise__already__satisfied/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) (function)"},{"location":"reference/classes/classfutures_1_1promise__already__satisfied/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions(inherited from futures::error)</p> Member Functions Description error Constructor.  (function template) ~error override = default Destructor.  (function)"},{"location":"reference/classes/classfutures_1_1promise__already__satisfied/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1promise__already__satisfied/#function-promise_already_satisfied","title":"function promise_already_satisfied","text":"<p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>promise_already_satisfied();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1promise__base/","title":"futures::promise_base","text":"<p>Futures / Shared State / promise_base</p> <p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> <pre><code>template &lt;class R, class Options = future_options&lt;continuable_opt&gt;&gt; class promise_base;\n</code></pre> <p>Common members to promises of all types. </p> <p>Description</p> <p>This includes a pointer to the corresponding shared_state for the future and the functions to manage the promise.</p> <p>The specific promise specialization will only differ by their set_value functions. </p> <p>Inherited by: <code>promise_base</code> is a base class for promise&lt; R, Options &gt;</p>"},{"location":"reference/classes/classfutures_1_1promise__base/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) Create the base promise with std::allocator.  (function) operator= No copy assignment.  (function) (destructor) Destructor.  (virtual function) get_future Gets a future that shares its state with this promise.  (function) set_exception Set the promise result as an exception.  (function)"},{"location":"reference/classes/classfutures_1_1promise__base/#protected-functions","title":"Protected Functions","text":"Member Protected Functions Description swap (function) get_shared_state (function)"},{"location":"reference/classes/classfutures_1_1promise__base/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1promise__base/#function-promise_base","title":"function promise_base","text":"<p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> (1)<pre><code>promise_base();\n</code></pre> (2)<pre><code>template &lt;typename Allocator&gt;\npromise_base(std::allocator_arg_t, Allocator const &amp; alloc);\n</code></pre> (3)<pre><code>promise_base(promise_base const &amp;) = delete;\n</code></pre> (4)<pre><code>promise_base(promise_base &amp;&amp; other) noexcept;\n</code></pre> <ol> <li>Create the base promise with std::allocator. </li> <li>Create a base promise setting the shared state with the specified allocator. </li> <li>No copy constructor. </li> <li>Move constructor. </li> </ol> <p>Description</p> <p>(1) Use std::allocator_arg tag to dispatch and select allocator aware constructor </p> <p>(2) This function allocates memory for and allocates an initial promise_shared_state (the future value) with the specified allocator. This object is stored in the internal intrusive pointer as the future shared state. </p> <p>Exception Safety</p> <ul> <li>(1) Basic exception guarantee.</li> <li>(2) Basic exception guarantee.</li> <li> <p>(3) Basic exception guarantee.</p> </li> <li> <p>(4) Throws nothing.</p> </li> </ul>"},{"location":"reference/classes/classfutures_1_1promise__base/#function-operator","title":"function operator=","text":"<p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> (1)<pre><code>promise_base &amp;\noperator=(promise_base const &amp;) = delete;\n</code></pre> (2)<pre><code>promise_base &amp;\noperator=(promise_base &amp;&amp; other) noexcept;\n</code></pre> <ol> <li>No copy assignment. </li> <li>Move assignment. </li> </ol> <p>Exception Safety</p> <ul> <li> <p>(1) Basic exception guarantee.</p> </li> <li> <p>(2) Throws nothing.</p> </li> </ul>"},{"location":"reference/classes/classfutures_1_1promise__base/#function-promise_base_1","title":"function ~promise_base","text":"<p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> <pre><code>virtual ~promise_base();\n</code></pre> <p>Destructor. </p> <p>Description</p> <p>This promise owns the shared state, so we need to warn the shared state when it's destroyed. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1promise__base/#function-get_future","title":"function get_future","text":"<p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> <pre><code>basic_future&lt; R, Options &gt;\nget_future();\n</code></pre> <p>Gets a future that shares its state with this promise. </p> <p>Description</p> <p>This function constructs a future object that shares its state with this promise. Because this library handles more than a single future type, the future type we want is a template parameter.</p> <p>This function expects future type constructors to accept pointers to shared states. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1promise__base/#function-set_exception","title":"function set_exception","text":"<p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> (1)<pre><code>void\nset_exception(std::exception_ptr p);\n</code></pre> (2)<pre><code>template &lt;class E&gt;\nrequires std::is_base_of_v&lt;std::exception, E&gt;\nvoid\nset_exception(E e);\n</code></pre> <p>Set the promise result as an exception. </p> <p>Notes</p> <p>The set_value operation is only available at the concrete derived class, where we know the class type </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1promise__base/#protected-functions_1","title":"Protected Functions","text":""},{"location":"reference/classes/classfutures_1_1promise__base/#function-swap","title":"function swap","text":"<p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> <pre><code>void\nswap(promise_base &amp; other) noexcept;\n</code></pre> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1promise__base/#function-get_shared_state","title":"function get_shared_state","text":"<p>Defined in header <code>&lt;futures/promise.hpp&gt;</code></p> <pre><code>constexpr\n/* see return type below */\nget_shared_state();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1promise__uninitialized/","title":"futures::promise_uninitialized","text":"<p>Futures / Error / promise_uninitialized</p> <p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>class promise_uninitialized;\n</code></pre> <p>The promised hasn't been initialized yet. </p> <p>Inherits from error, <code>std::system_error</code></p>"},{"location":"reference/classes/classfutures_1_1promise__uninitialized/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) (function)"},{"location":"reference/classes/classfutures_1_1promise__uninitialized/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions(inherited from futures::error)</p> Member Functions Description error Constructor.  (function template) ~error override = default Destructor.  (function)"},{"location":"reference/classes/classfutures_1_1promise__uninitialized/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1promise__uninitialized/#function-promise_uninitialized","title":"function promise_uninitialized","text":"<p>Defined in header <code>&lt;futures/error.hpp&gt;</code></p> <pre><code>promise_uninitialized();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1reduce__functor/","title":"futures::reduce_functor","text":"<p>Algorithms / Functions / reduce_functor</p> <p>Defined in header <code>&lt;futures/algorithm/reduce.hpp&gt;</code></p> <pre><code>class reduce_functor;\n</code></pre> <p>Functor representing the overloads for the reduce function. </p> <p>Inherits from binary_invoke_algorithm_functor&lt; Derived &gt;</p>"},{"location":"reference/classes/classfutures_1_1reduce__functor/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const Execute the underlying algorithm.  (function template)"},{"location":"reference/classes/classfutures_1_1reduce__functor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1reduce__functor/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/binary_invoke_algorithm.hpp&gt;</code></p> (1)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::convertible_to&lt; std::iter_value_t&lt; I &gt; &gt; T, std::indirect_binary_predicate&lt; I, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, P p, I first, S last, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (2)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, P p, I first, S last, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (3)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::convertible_to&lt; std::iter_value_t&lt; I &gt; &gt; T, std::indirect_binary_predicate&lt; I, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp;, P p, I first, S last, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (4)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp;, P p, I first, S last, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (5)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::convertible_to&lt; std::ranges::range_value_t&lt; R &gt; &gt; T, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, P p, R &amp;&amp; r, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (6)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::convertible_to&lt; std::ranges::range_value_t&lt; R &gt; &gt; T, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, P p, R &amp;&amp; r, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (7)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, std::ranges::iterator_t&lt; R &gt; &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (8)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, std::ranges::iterator_t&lt; R &gt; &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (9)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::convertible_to&lt; std::iter_value_t&lt; I &gt; &gt; T, std::indirect_binary_predicate&lt; I, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, T value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (10)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (11)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::convertible_to&lt; std::ranges::range_value_t&lt; R &gt; &gt; T, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (12)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, std::ranges::iterator_t&lt; R &gt; &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (13)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::convertible_to&lt; std::iter_value_t&lt; I &gt; &gt; T, std::indirect_binary_predicate&lt; I, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, I first, S last, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (14)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::convertible_to&lt; std::iter_value_t&lt; I &gt; &gt; T, std::indirect_binary_predicate&lt; I, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, I first, S last, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (15)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (16)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (17)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::convertible_to&lt; std::ranges::range_value_t&lt; R &gt; &gt; T, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, R &amp;&amp; r, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (18)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::convertible_to&lt; std::ranges::range_value_t&lt; R &gt; &gt; T, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(\nE const &amp; ex, R &amp;&amp; r, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (19)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, std::ranges::iterator_t&lt; R &gt; &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (20)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, std::ranges::iterator_t&lt; R &gt; &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (21)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, std::convertible_to&lt; std::iter_value_t&lt; I &gt; &gt; T, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (22)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirect_binary_predicate&lt; I, I &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (23)<pre><code>template &lt;\nstd::ranges::input_range R, std::convertible_to&lt; std::ranges::range_value_t&lt; R &gt; &gt; T, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, T const * &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, T const &amp; value, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> (24)<pre><code>template &lt;\nstd::ranges::input_range R, std::indirect_binary_predicate&lt; std::ranges::iterator_t&lt; R &gt;, std::ranges::iterator_t&lt; R &gt; &gt; Fun =std::plus&lt;&gt;&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, Fun f =std::plus&lt;&gt;()) const;\n</code></pre> <ol> <li>Execute the underlying algorithm. </li> <li>Execute the algorithm with the default initialization value. </li> <li>Execute the underlying algorithm with an execution policy. </li> <li>Execute the algorithm with an execution policy and default value. </li> <li>Execute the algorithm on a range of iterators. </li> <li>Execute the algorithm on a range with an execution policy. </li> <li>Execute algorithm on a range with default initialization value. </li> <li>Execute algorithm on a range with policy and default value. </li> <li>Execute underlying algorithm with default executor. </li> <li>Execute algorithm with default executor and default value. </li> <li>Execute algorithm on range with default executor. </li> <li>Execute algorithm on range with default executor and initialization. </li> <li>Execute algorithm with default partitioner. </li> <li>Execute algorithm with execution policy and default partitioner. </li> <li>Execute algorithm with default partitioner and initialization value. </li> <li>Execute algorithm with policy, default partitioner and default value. </li> <li>Execute algorithm on range with default partitioner. </li> <li>Execute algorithm on range with execution policy and default partitioner. </li> <li>Execute algorithm on range with default partitioner and value. </li> <li>Execute algorithm on range with policy, default partitioner and value. </li> <li>Execute algorithm with default executor and partitioner. </li> <li>Execute algorithm with default executor, partitioner, and value. </li> <li>Execute algorithm on range with default executor and partitioner. </li> <li>Execute algorithm on range with default executor, partitioner, and value. </li> </ol> <p>Template Parameters</p> <ul> <li>E - Executor type </li> <li>Fun - Function type </li> <li>I - Iterator type </li> <li>P - Partitioner type </li> <li>S - Sentinel type </li> <li>T - Type of value to aggregate the elements with </li> </ul> <p>Parameters</p> <ul> <li>ex - An executor instance </li> <li>f - Function invocable with the return type of the iterator </li> <li>first - Iterator to first element in the range </li> <li>last - Sentinel iterator to one element past the last </li> <li>p - A partitioner instance </li> <li>value - initial value to aggregate the elements with </li> </ul> <p>Return value</p> <p>Result of the underlying algorithm </p> <p>Description</p> <p>The default initialization value is always the first element in the sequence, while the algorithm is executed with other elements. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1stop__source/","title":"futures::stop_source","text":"<p>Futures / Cancellation / stop_source</p> <p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>class stop_source;\n</code></pre> <p>Object used to issue a stop request. </p> <p>Description</p> <p>The stop_source class provides the means to issue a stop request, such as for <code>std::jthread</code> cancellation. A stop request made for one stop_source object is visible to all stop_sources and <code>std::stop_token</code>s of the same associated stop-state; any <code>std::stop_callback(s)</code> registered for associated <code>std::stop_token(s)</code> will be invoked, and any <code>std::condition_variable_any</code> objects waiting on associated <code>std::stop_token(s)</code> will be awoken. </p>"},{"location":"reference/classes/classfutures_1_1stop__source/#public-functions","title":"Public Functions","text":"Constructors Description (constructor) Constructs a stop_source with new stop-state.  (function) (destructor) = default Destroys the stop_source object.  (function) operator= Copy-assigns the stop-state of other.  (function) Modifiers Description request_stop Makes a stop request for the associated stop-state, if any.  (function) swap Swaps two stop_source objects.  (function) Non-member functions Description get_token const Returns a stop_token for the associated stop-state.  (function) stop_requested const Checks whether the associated stop-state has been requested to stop.  (function) stop_possible const Checks whether associated stop-state can be requested to stop.  (function)"},{"location":"reference/classes/classfutures_1_1stop__source/#friends","title":"Friends","text":"Friends Description operator== Returns a stop_token for the associated stop-state. (public friend bool) operator!= Returns a stop_token for the associated stop-state. (public friend bool)"},{"location":"reference/classes/classfutures_1_1stop__source/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1stop__source/#function-stop_source","title":"function stop_source","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> (1)<pre><code>stop_source();\n</code></pre> (2)<pre><code>explicit stop_source(nostopstate_t) noexcept;\n</code></pre> (3)<pre><code>stop_source(stop_source const &amp; other) = default;\n</code></pre> (4)<pre><code>stop_source(stop_source &amp;&amp; other) noexcept;\n</code></pre> <ol> <li>Constructs a stop_source with new stop-state. </li> <li>Constructs an empty stop_source with no associated stop-state. </li> <li>Copy constructor. </li> <li>Move constructor. </li> </ol> <p>Parameters</p> <ul> <li>other - another stop_source object to construct this stop_source object with </li> </ul> <p>Description</p> <p>(3) Constructs a stop_source whose associated stop-state is the same as that of other.</p> <p>(4) Constructs a stop_source whose associated stop-state is the same as that of other; other is left empty</p> <p>Post-Conditions</p> <ul> <li>(1) <code>*this</code> and other share the same associated stop-state and compare equal</li> <li>(2) <code>*this</code> has other's previously associated stop-state, and other.stop_possible() is false</li> <li>(3) stop_possible() and stop_requested() are both false </li> <li>(4) stop_possible() is true and stop_requested() is false </li> </ul> <p>Exception Safety</p> <ul> <li> <p>(1) Basic exception guarantee.</p> </li> <li> <p>(2) Throws nothing.</p> </li> <li> <p>(3) Basic exception guarantee.</p> </li> <li> <p>(4) Throws nothing.</p> </li> </ul>"},{"location":"reference/classes/classfutures_1_1stop__source/#function-stop_source_1","title":"function ~stop_source","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>~stop_source() = default;\n</code></pre> <p>Destroys the stop_source object. </p> <p>Description</p> <p>If <code>*this</code> has associated stop-state, releases ownership of it. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1stop__source/#function-operator","title":"function operator=","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> (1)<pre><code>stop_source &amp;\noperator=(stop_source &amp;&amp; other) noexcept;\n</code></pre> (2)<pre><code>stop_source &amp;\noperator=(stop_source const &amp; other) noexcept;\n</code></pre> <ol> <li>Copy-assigns the stop-state of other. </li> <li>Move-assigns the stop-state of other. </li> </ol> <p>Parameters</p> <ul> <li>other - another stop_source object acquire the stop-state from </li> </ul> <p>Description</p> <p>(1) Equivalent to <code>stop_source(other).swap(*this)</code></p> <p>(2) Equivalent to <code>stop_source(std::move(other)).swap(*this)</code></p> <p>Post-Conditions</p> <ul> <li>(1) After the assignment, <code>*this</code> contains the previous stop-state of other, and other has no stop-state.</li> <li>(2) After the assignment, <code>*this</code> contains the previous stop-state of other.</li> </ul> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1stop__source/#function-request_stop","title":"function request_stop","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>bool\nrequest_stop() noexcept;\n</code></pre> <p>Makes a stop request for the associated stop-state, if any. </p> <p>Return value</p> <p>true if the stop_source object has a stop-state and this invocation made a stop request (the underlying atomic value was successfully changed), otherwise false </p> <p>Description</p> <p>Issues a stop request to the stop-state, if the stop_source object has a stop-state, and it has not yet already had stop requested.</p> <p>The determination is made atomically, and if stop was requested, the stop-state is atomically updated to avoid race conditions, such that:</p> <ul> <li>stop_requested() and stop_possible() can be concurrently invoked on other stop_tokens and stop_sources of the same stop-state</li> <li>request_stop() can be concurrently invoked on other stop_source objects, and only one will actually perform the stop request.</li> </ul> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1stop__source/#function-swap","title":"function swap","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>void\nswap(stop_source &amp; other) noexcept;\n</code></pre> <p>Swaps two stop_source objects. </p> <p>Parameters</p> <ul> <li>other - stop_source to exchange the contents with </li> </ul> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1stop__source/#function-get_token","title":"function get_token","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>stop_token\nget_token() const noexcept;\n</code></pre> <p>Returns a stop_token for the associated stop-state. </p> <p>Return value</p> <p>A stop_token object, which will be empty if this-&gt;stop_possible() == false </p> <p>Description</p> <p>Returns a stop_token object associated with the stop_source's stop-state, if the stop_source has stop-state, otherwise returns a default-constructed (empty) stop_token.</p> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1stop__source/#function-stop_requested","title":"function stop_requested","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>bool\nstop_requested() const noexcept;\n</code></pre> <p>Checks whether the associated stop-state has been requested to stop. </p> <p>Return value</p> <p>true if the stop_token object has a stop-state, and it has received a stop request, false otherwise </p> <p>Description</p> <p>Checks if the stop_source object has a stop-state and that state has received a stop request.</p> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1stop__source/#function-stop_possible","title":"function stop_possible","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>bool\nstop_possible() const noexcept;\n</code></pre> <p>Checks whether associated stop-state can be requested to stop. </p> <p>Return value</p> <p>true if the stop_source object has a stop-state, otherwise false </p> <p>Description</p> <p>Checks if the stop_source object has a stop-state.</p> <p>Notes</p> <p>If the stop_source object has a stop-state and a stop request has already been made, this function still returns true.</p> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1stop__source/#friends_1","title":"Friends","text":""},{"location":"reference/classes/classfutures_1_1stop__source/#friend-operator","title":"friend operator==","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code> <pre><code>friend\nbool operator==(stop_source const &amp; a, stop_source const &amp; b);\n</code></pre></p> <p>Returns a stop_token for the associated stop-state. </p> <p>Return: A stop_token object, which will be empty if this-&gt;stop_possible() == false </p> <p>Description</p> <p>Returns a stop_token object associated with the stop_source's stop-state, if the stop_source has stop-state, otherwise returns a default-constructed (empty) stop_token.</p>"},{"location":"reference/classes/classfutures_1_1stop__source/#friend-operator_1","title":"friend operator!=","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code> <pre><code>friend\nbool operator!=(stop_source const &amp; a, stop_source const &amp; b);\n</code></pre></p> <p>Returns a stop_token for the associated stop-state. </p> <p>Return: A stop_token object, which will be empty if this-&gt;stop_possible() == false </p> <p>Description</p> <p>Returns a stop_token object associated with the stop_source's stop-state, if the stop_source has stop-state, otherwise returns a default-constructed (empty) stop_token.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1stop__token/","title":"futures::stop_token","text":"<p>Futures / Cancellation / stop_token</p> <p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>class stop_token;\n</code></pre> <p>Token to check if a stop request has been made. </p> <p>Description</p> <p>The stop_token class provides the means to check if a stop request has been made or can be made, for its associated std::stop_source object. It is essentially a thread-safe \"view\" of the associated stop-state. </p>"},{"location":"reference/classes/classfutures_1_1stop__token/#public-functions","title":"Public Functions","text":"Constructors Description (constructor) Constructs an empty stop_token with no associated stop-state.  (function) (destructor) = default Destroys the stop_token object.  (function) operator= Copy-assigns the associated stop-state of other to that of <code>*this</code> (function) Modifiers Description swap Exchanges the associated stop-state of *this and other.  (function) Observers Description stop_requested const Checks whether the associated stop-state has been requested to stop.  (function) stop_possible const Checks whether associated stop-state can be requested to stop.  (function)"},{"location":"reference/classes/classfutures_1_1stop__token/#friends","title":"Friends","text":"Friends Description stop_source (private friend class)"},{"location":"reference/classes/classfutures_1_1stop__token/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1stop__token/#function-stop_token","title":"function stop_token","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> (1)<pre><code>stop_token() = default;\n</code></pre> (2)<pre><code>stop_token(stop_token const &amp; other) = default;\n</code></pre> (3)<pre><code>stop_token(stop_token &amp;&amp; other) noexcept;\n</code></pre> <ol> <li>Constructs an empty stop_token with no associated stop-state. </li> <li>Copy constructor. </li> <li>Move constructor. </li> </ol> <p>Parameters</p> <ul> <li>other - another stop_token object to construct this stop_token object </li> </ul> <p>Description</p> <p>(2) Constructs a stop_token whose associated stop-state is the same as that of other.</p> <p>(3) Constructs a stop_token whose associated stop-state is the same as that of other; other is left empty</p> <p>Post-Conditions</p> <ul> <li>(1) <code>*this</code> and other share the same associated stop-state and compare equal</li> <li>(2) <code>*this</code> has other's previously associated stop-state, and other.stop_possible() is false</li> <li>(3) stop_possible() and stop_requested() are both false </li> </ul> <p>Exception Safety</p> <ul> <li>(1) Basic exception guarantee.</li> <li> <p>(2) Basic exception guarantee.</p> </li> <li> <p>(3) Throws nothing.</p> </li> </ul>"},{"location":"reference/classes/classfutures_1_1stop__token/#function-stop_token_1","title":"function ~stop_token","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>~stop_token() = default;\n</code></pre> <p>Destroys the stop_token object. </p> <p>Post-Conditions</p> <p>If <code>*this</code> has associated stop-state, releases ownership of it. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1stop__token/#function-operator","title":"function operator=","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> (1)<pre><code>stop_token &amp;\noperator=(stop_token const &amp; other) noexcept;\n</code></pre> (2)<pre><code>stop_token &amp;\noperator=(stop_token &amp;&amp; other) noexcept;\n</code></pre> <ol> <li>Copy-assigns the associated stop-state of other to that of <code>*this</code></li> <li>Move-assigns the associated stop-state of other to that of <code>*this</code></li> </ol> <p>Parameters</p> <ul> <li>other - Another stop_token object to share the stop-state with to or acquire the stop-state from </li> </ul> <p>Description</p> <p>(1) Equivalent to stop_token(other).swap(*this)</p> <p>(2) After the assignment, *this contains the previous associated stop-state of other, and other has no associated stop-state</p> <p>Equivalent to <code>stop_token(std::move(other)).swap(*this)</code></p> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1stop__token/#function-swap","title":"function swap","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>void\nswap(stop_token &amp; other) noexcept;\n</code></pre> <p>Exchanges the associated stop-state of *this and other. </p> <p>Parameters</p> <ul> <li>other - stop_token to exchange the contents with </li> </ul> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1stop__token/#function-stop_requested","title":"function stop_requested","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>bool\nstop_requested() const noexcept;\n</code></pre> <p>Checks whether the associated stop-state has been requested to stop. </p> <p>Return value</p> <p>true if the stop_token object has associated stop-state and it received a stop request, false otherwise. </p> <p>Description</p> <p>Checks if the stop_token object has associated stop-state and that state has received a stop request. A default constructed stop_token has no associated stop-state, and thus has not had stop requested</p> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1stop__token/#function-stop_possible","title":"function stop_possible","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>bool\nstop_possible() const noexcept;\n</code></pre> <p>Checks whether associated stop-state can be requested to stop. </p> <p>Return value</p> <p>false if the stop_token object has no associated stop-state, or it did not yet receive a stop request and there are no associated std::stop_source object(s); true otherwise </p> <p>Description</p> <p>Checks if the stop_token object has associated stop-state, and that state either has already had a stop requested or it has associated std::stop_source object(s).</p> <p>A default constructed stop_token has no associated <code>stop-state</code>, and thus cannot be stopped. the associated stop-state for which no std::stop_source object(s) exist can also not be stopped if such a request has not already been made.</p> <p>Notes</p> <p>If the stop_token object has associated stop-state and a stop request has already been made, this function still returns true.</p> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1stop__token/#friends_1","title":"Friends","text":""},{"location":"reference/classes/classfutures_1_1stop__token/#friend-stop_source","title":"friend stop_source","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code> <pre><code>friend\nclass stop_source(stop_source);\n</code></pre></p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1thread__partitioner/","title":"futures::thread_partitioner","text":"<p>Algorithms / Partitioners / thread_partitioner</p> <p>Defined in header <code>&lt;futures/algorithm/partitioner/thread_partitioner.hpp&gt;</code></p> <pre><code>class thread_partitioner;\n</code></pre> <p>A partitioner that always splits the problem when moving to new threads. </p> <p>Description</p> <p>A partitioner that splits the ranges until it identifies we are not moving to new threads.</p> <p>This partitioner splits the ranges until it identifies we are not moving to new threads. Apart from that, it behaves as a halve_partitioner, splitting the range up to a minimum grain size. </p>"},{"location":"reference/classes/classfutures_1_1thread__partitioner/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) (function) operator() (function template)"},{"location":"reference/classes/classfutures_1_1thread__partitioner/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1thread__partitioner/#function-thread_partitioner","title":"function thread_partitioner","text":"<p>Defined in header <code>&lt;futures/algorithm/partitioner/thread_partitioner.hpp&gt;</code></p> <pre><code>explicit thread_partitioner(std::size_t min_grain_size);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1thread__partitioner/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/partitioner/thread_partitioner.hpp&gt;</code></p> <pre><code>template &lt;std::input_iterator I, std::sentinel_for&lt; I &gt; S&gt;\nI\noperator()(I first, S last);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1thread__pool/","title":"futures::thread_pool","text":"<p>Executors / thread_pool</p> <p>Defined in header <code>&lt;futures/executor/thread_pool.hpp&gt;</code></p> <pre><code>class thread_pool;\n</code></pre> <p>A thread pool with the specified number of threads. </p>"},{"location":"reference/classes/classfutures_1_1thread__pool/#public-classes","title":"Public Classes","text":"Name class executor_type A executor that sends tasks to the thread pool."},{"location":"reference/classes/classfutures_1_1thread__pool/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) Construct a thread pool.  (function) get_executor (function) join (function)"},{"location":"reference/classes/classfutures_1_1thread__pool/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1thread__pool/#function-thread_pool","title":"function thread_pool","text":"<p>Defined in header <code>&lt;futures/executor/thread_pool.hpp&gt;</code></p> (1)<pre><code>thread_pool();\n</code></pre> (2)<pre><code>thread_pool(unsigned int threads);\n</code></pre> (3)<pre><code>thread_pool(thread_pool &amp;) = delete;\n</code></pre> (4)<pre><code>thread_pool(thread_pool &amp;&amp;) = delete;\n</code></pre> <ol> <li>Construct a thread pool. </li> <li>Construct a thread pool with specified number of threads. </li> <li>Thread pools cannot be copied. </li> <li>Thread pools cannot be moved. </li> </ol> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1thread__pool/#function-get_executor","title":"function get_executor","text":"<p>Defined in header <code>&lt;futures/executor/thread_pool.hpp&gt;</code></p> <pre><code>executor_type\nget_executor();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1thread__pool/#function-join","title":"function join","text":"<p>Defined in header <code>&lt;futures/executor/thread_pool.hpp&gt;</code></p> <pre><code>void\njoin();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1thread__pool_1_1executor__type/","title":"futures::thread_pool::executor_type","text":"<p>Defined in header <code>&lt;futures/executor/thread_pool.hpp&gt;</code></p> <pre><code>class executor_type;\n</code></pre> <p>A executor that sends tasks to the thread pool. </p>"},{"location":"reference/classes/classfutures_1_1thread__pool_1_1executor__type/#public-functions","title":"Public Functions","text":"Member Functions Description execute const (function template)"},{"location":"reference/classes/classfutures_1_1thread__pool_1_1executor__type/#friends","title":"Friends","text":"Friends Description thread_pool (private friend class)"},{"location":"reference/classes/classfutures_1_1thread__pool_1_1executor__type/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1thread__pool_1_1executor__type/#function-execute","title":"function execute","text":"<p>Defined in header <code>&lt;futures/executor/thread_pool.hpp&gt;</code></p> <pre><code>template &lt;class F&gt;\nvoid\nexecute(F &amp;&amp; f) const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1thread__pool_1_1executor__type/#friends_1","title":"Friends","text":""},{"location":"reference/classes/classfutures_1_1thread__pool_1_1executor__type/#friend-thread_pool","title":"friend thread_pool","text":"<p>Defined in header <code>&lt;futures/executor/thread_pool.hpp&gt;</code> <pre><code>friend\nclass thread_pool(thread_pool);\n</code></pre></p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1unary__invoke__algorithm__functor/","title":"futures::unary_invoke_algorithm_functor","text":"<p>Algorithms / Algorithm Traits / unary_invoke_algorithm_functor</p> <p>Defined in header <code>&lt;futures/algorithm/traits/unary_invoke_algorithm.hpp&gt;</code></p> <pre><code>template &lt;class Derived&gt; class unary_invoke_algorithm_functor;\n</code></pre> <p>Overloads for unary invoke algorithms. </p> <p>Description</p> <p>CRTP class with the overloads for algorithm functors that iterate elements in a sequence with an unary function.</p> <p>This includes algorithms such as for_each and any_of. </p> <p>Inherited by: <code>unary_invoke_algorithm_functor</code> is a base class for all_of_functor, any_of_functor, count_if_functor, find_if_functor, find_if_not_functor, for_each_functor,  and none_of_functor</p>"},{"location":"reference/classes/classfutures_1_1unary__invoke__algorithm__functor/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const Execute the underlying algorithm.  (function template)"},{"location":"reference/classes/classfutures_1_1unary__invoke__algorithm__functor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1unary__invoke__algorithm__functor/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/unary_invoke_algorithm.hpp&gt;</code></p> (1)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, I first, S last, Fun f) const;\n</code></pre> (2)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp;, P p, I first, S last, Fun f) const;\n</code></pre> (3)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (4)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (5)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, Fun f) const;\n</code></pre> (6)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, Fun f) const;\n</code></pre> (7)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (8)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, Fun f) const;\n</code></pre> (9)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (10)<pre><code>template &lt;\nexecutor E, std::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, Fun f) const;\n</code></pre> (11)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, std::indirectly_unary_invocable&lt; I &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, Fun f) const;\n</code></pre> (12)<pre><code>template &lt;\nstd::ranges::input_range R, std::indirectly_unary_invocable&lt; std::ranges::iterator_t&lt; R &gt; &gt; Fun&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, Fun f) const;\n</code></pre> <ol> <li>Execute the underlying algorithm. </li> <li>Execute the underlying algorithm with an execution policy. </li> <li>Execute the algorithm with a range of iterators. </li> <li>Execute the algorithm with a range of iterators and execution policy. </li> <li>Execute the underlying algorithm with a default executor. </li> <li>Execute the algorithm on a range with a default executor. </li> <li>Execute the underlying algorithm with a default partitioner. </li> <li>Execute the algorithm with execution policy and default partitioner. </li> <li>Execute the algorithm on a range with the default partitioner. </li> <li>Execute the algorithm on a range with policy and default partitioner. </li> <li>Execute the algorithm with default executor and partitioner. </li> <li>Execute algorithm on a range with default executor and partitioner. </li> </ol> <p>Template Parameters</p> <ul> <li>E - Executor type </li> <li>Fun - Function type </li> <li>I - Iterator type </li> <li>P - Partitioner type </li> <li>S - Sentinel type </li> </ul> <p>Parameters</p> <ul> <li>ex - An executor instance </li> <li>f - Function invocable with the return type of the iterator </li> <li>first - Iterator to first element in the range </li> <li>last - Sentinel iterator to one element past the last </li> <li>p - A partitioner instance </li> </ul> <p>Return value</p> <p>Result of the underlying algorithm </p> <p>Description</p> <p>The execution policy is converted into the corresponding executor </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1value__cmp__algorithm__functor/","title":"futures::value_cmp_algorithm_functor","text":"<p>Algorithms / Algorithm Traits / value_cmp_algorithm_functor</p> <p>Defined in header <code>&lt;futures/algorithm/traits/value_cmp_algorithm.hpp&gt;</code></p> <pre><code>template &lt;class Derived&gt; class value_cmp_algorithm_functor;\n</code></pre> <p>Value-compare algorithm overloads. </p> <p>Description</p> <p>CRTP class with the overloads for classes that look for elements in a sequence with an unary function.</p> <p>This includes algorithms such as count and find. </p> <p>Inherited by: <code>value_cmp_algorithm_functor</code> is a base class for count_functor and find_functor</p>"},{"location":"reference/classes/classfutures_1_1value__cmp__algorithm__functor/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const Execute the underlying algorithm.  (function template)"},{"location":"reference/classes/classfutures_1_1value__cmp__algorithm__functor/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1value__cmp__algorithm__functor/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/value_cmp_algorithm.hpp&gt;</code></p> (1)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, I first, S last, T const &amp; value) const;\n</code></pre> (2)<pre><code>template &lt;\nexecution_policy E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp;, P p, I first, S last, T const &amp; value) const;\n</code></pre> (3)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (4)<pre><code>template &lt;\nexecutor E, std::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, P p, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (5)<pre><code>template &lt;\nstd::input_iterator I, std::sentinel_for&lt; I &gt; S, partitioner_for&lt; I, S &gt; P, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(P p, I first, S last, T const &amp; value) const;\n</code></pre> (6)<pre><code>template &lt;\nstd::ranges::range R, partitioner_for&lt; std::ranges::iterator_t&lt; R &gt; &gt; P, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(P p, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (7)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, T const &amp; value) const;\n</code></pre> (8)<pre><code>template &lt;\nexecutor E, std::input_iterator I, std::sentinel_for&lt; I &gt; S, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, I first, S last, T const &amp; value) const;\n</code></pre> (9)<pre><code>template &lt;executor E, std::ranges::range R, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (10)<pre><code>template &lt;executor E, std::ranges::range R, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(E const &amp; ex, R &amp;&amp; r, T const &amp; value) const;\n</code></pre> (11)<pre><code>template &lt;std::input_iterator I, std::sentinel_for&lt; I &gt; S, class T&gt;\nrequires std:: indirect_binary_predicate&lt;std::ranges::equal_to, I, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(I first, S last, T const &amp; value) const;\n</code></pre> (12)<pre><code>template &lt;std::ranges::range R, class T&gt;\nrequires std::indirect_binary_predicate&lt; std::ranges::equal_to, std::ranges::iterator_t&lt;R&gt;, T const *&gt;\nconstexpr\n/* see return type below */\noperator()(R &amp;&amp; r, T const &amp; value) const;\n</code></pre> <ol> <li>Execute the underlying algorithm. </li> <li>Execute the algorithm with an execution policy. </li> <li>Execute the underlying algorithm on a range of iterators. </li> <li>Execute the algorithm on a range of iterators and execution policy. </li> <li>Execute the underlying algorithm with the default executor. </li> <li>Execute the algorithm on a range with the default executor. </li> <li>Execute the algorithm with the default partitioner. </li> <li>Execute the algorithm with execution policy and default partitioner. </li> <li>Execute algorithm on a range with the default partitioner. </li> <li>Execute algorithm on a range with policy and default partitioner. </li> <li>Execute algorithm with default partitioner and executor. </li> <li>Execute algorithm on a range with default partitioner and executor. </li> </ol> <p>Template Parameters</p> <ul> <li>E - Executor type </li> <li>I - Iterator type </li> <li>P - Partitioner type </li> <li>S - Sentinel type </li> <li>T - Value to compare with the iterator value </li> </ul> <p>Parameters</p> <ul> <li>ex - An executor instance </li> <li>first - Iterator to first element in the range </li> <li>last - Sentinel iterator to one element past the last </li> <li>p - A partitioner instance </li> <li>value - value to compare the elements to </li> </ul> <p>Return value</p> <p>Result of the underlying algorithm </p> <p>Description</p> <p>The execution policy is converted into the corresponding executor </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1when__all__future/","title":"futures::when_all_future","text":"<p>Adaptors / when_all_future</p> <p>Defined in header <code>&lt;futures/adaptor/when_all.hpp&gt;</code></p> <pre><code>template &lt;class Sequence&gt; class when_all_future;\n</code></pre> <p>Proxy future class referring to a conjunction of futures from when_all. </p> <p>Description</p> <p>This class implements the behavior of the <code>when_all</code> operation as another future type, which can handle heterogeneous future objects.</p> <p>This future type logically checks the results of other futures in place to avoid creating a real conjunction of futures that would need to be polling (or be a lazy continuation) on another thread.</p> <p>If the user does want to poll on another thread, then this can be converted into a cfuture as usual with async. If the other future holds the when_all_state as part of its state, then it can become another future. </p>"},{"location":"reference/classes/classfutures_1_1when__all__future/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) Constructor.  (function) (destructor) = default Releases any shared state.  (function) operator= Assigns the contents of another future object.  (function) get Wait until all futures have a valid result and retrieves it.  (function) valid const Checks if the future refers to a shared state.  (function) wait const Blocks until the result becomes available.  (function) wait_for const Waits for the result to become available.  (function template) wait_until const Waits for a result to become available.  (function template) release Allow move the underlying sequence somewhere else.  (function) request_stop Request the stoppable futures to stop.  (function)"},{"location":"reference/classes/classfutures_1_1when__all__future/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1when__all__future/#function-when_all_future","title":"function when_all_future","text":"<p>Defined in header <code>&lt;futures/adaptor/when_all.hpp&gt;</code></p> (1)<pre><code>when_all_future() = default;\n</code></pre> (2)<pre><code>explicit when_all_future(\nsequence_type &amp;&amp; v);\n</code></pre> (3)<pre><code>when_all_future(\nwhen_all_future &amp;&amp; other);\n</code></pre> (4)<pre><code>when_all_future(when_all_future const &amp; other) = delete;\n</code></pre> <ol> <li>Constructor. </li> <li>Move a sequence of futures into the when_all_future. </li> <li>Move constructor. </li> <li>when_all_future is not CopyConstructible </li> </ol> <p>Description</p> <p>(1) Constructs a when_all_future with no shared state. After construction, valid() == false </p> <p>(2) The sequence is moved into this future object and the objects from which the sequence was created get invalidated </p> <p>(3) Constructs a when_all_future with the shared state of other using move semantics. After construction, other.valid() == false </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__all__future/#function-when_all_future_1","title":"function ~when_all_future","text":"<p>Defined in header <code>&lt;futures/adaptor/when_all.hpp&gt;</code></p> <pre><code>~when_all_future() = default;\n</code></pre> <p>Releases any shared state. </p> <p>Description</p> <ul> <li>If the return object or provider holds the last reference to its shared state, the shared state is destroyed</li> <li>the return object or provider gives up its reference to its shared state This means we just need to let the internal futures destroy themselves </li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__all__future/#function-operator","title":"function operator=","text":"<p>Defined in header <code>&lt;futures/adaptor/when_all.hpp&gt;</code></p> (1)<pre><code>when_all_future &amp;\noperator=(\nwhen_all_future &amp;&amp; other);\n</code></pre> (2)<pre><code>when_all_future &amp;\noperator=(when_all_future const &amp; other) = delete;\n</code></pre> <ol> <li>Assigns the contents of another future object. </li> <li>when_all_future is not CopyAssignable. </li> </ol> <p>Description</p> <p>Releases any shared state and move-assigns the contents of other to *this. After the assignment, other.valid() == false and this-&gt;valid() will yield the same value as other.valid() before the assignment. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__all__future/#function-get","title":"function get","text":"<p>Defined in header <code>&lt;futures/adaptor/when_all.hpp&gt;</code></p> <pre><code>sequence_type\nget();\n</code></pre> <p>Wait until all futures have a valid result and retrieves it. </p> <p>Description</p> <p>It effectively calls wait() in order to wait for the result. The behavior is undefined if valid() is false before the call to this function. Any shared state is released. valid() is false after a call to this method. The value v stored in the shared state, as std::move(v) </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__all__future/#function-valid","title":"function valid","text":"<p>Defined in header <code>&lt;futures/adaptor/when_all.hpp&gt;</code></p> <pre><code>bool\nvalid() const noexcept;\n</code></pre> <p>Checks if the future refers to a shared state. </p> <p>Exception Safety</p> <p>Throws nothing.</p>"},{"location":"reference/classes/classfutures_1_1when__all__future/#function-wait","title":"function wait","text":"<p>Defined in header <code>&lt;futures/adaptor/when_all.hpp&gt;</code></p> <pre><code>void\nwait() const;\n</code></pre> <p>Blocks until the result becomes available. </p> <p>Description</p> <p>valid() == true after the call. The behavior is undefined if valid() == false before the call to this function </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__all__future/#function-wait_for","title":"function wait_for","text":"<p>Defined in header <code>&lt;futures/adaptor/when_all.hpp&gt;</code></p> <pre><code>template &lt;class Rep, class Period&gt;\nfuture_status\nwait_for(\nstd::chrono::duration&lt; Rep, Period &gt; const &amp; timeout_duration) const;\n</code></pre> <p>Waits for the result to become available. </p> <p>Parameters</p> <ul> <li>timeout_duration - Time to wait </li> </ul> <p>Return value</p> <p>Status of the future after the specified duration </p> <p>Description</p> <p>Blocks until specified timeout_duration has elapsed or the result becomes available, whichever comes first.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__all__future/#function-wait_until","title":"function wait_until","text":"<p>Defined in header <code>&lt;futures/adaptor/when_all.hpp&gt;</code></p> <pre><code>template &lt;class Clock, class Duration&gt;\nfuture_status\nwait_until(\nstd::chrono::time_point&lt; Clock, Duration &gt; const &amp; timeout_time) const;\n</code></pre> <p>Waits for a result to become available. </p> <p>Parameters</p> <ul> <li>timeout_time - The timepoint to wait until </li> </ul> <p>Return value</p> <p>Status of the future after the specified duration </p> <p>Description</p> <p>It blocks until specified timeout_time has been reached or the result becomes available, whichever comes first</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__all__future/#function-release","title":"function release","text":"<p>Defined in header <code>&lt;futures/adaptor/when_all.hpp&gt;</code></p> <pre><code>sequence_type &amp;&amp;\nrelease();\n</code></pre> <p>Allow move the underlying sequence somewhere else. </p> <p>Description</p> <p>The when_all_future is left empty and should now be considered invalid. This is useful for the algorithm that merges two wait_all_future objects without forcing encapsulation of the merge function. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__all__future/#function-request_stop","title":"function request_stop","text":"<p>Defined in header <code>&lt;futures/adaptor/when_all.hpp&gt;</code></p> <pre><code>bool\nrequest_stop() noexcept;\n</code></pre> <p>Request the stoppable futures to stop. </p> <p>Exception Safety</p> <p>Throws nothing.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/classfutures_1_1when__any__future/","title":"futures::when_any_future","text":"<p>Adaptors / when_any_future</p> <p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> <pre><code>template &lt;class Sequence&gt; class when_any_future;\n</code></pre> <p>Future object referring to the result of a disjunction of futures. </p> <p>Description</p> <p>This class implements another future type to identify when one of a list of tasks is over.</p> <p>As with when_all, this class acts as a future that checks the results of other futures to avoid creating a real disjunction of futures that would need another thread for polling.</p> <p>Not-polling is easier to emulate for future conjunctions (when_all) because we can sleep on each task until they are all done, since we need all of them anyway. </p>"},{"location":"reference/classes/classfutures_1_1when__any__future/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) Default constructor.  (function) (destructor) = default Releases any shared state.  (function) operator= Assigns the contents of another future object.  (function) get Wait until any future has a valid result and retrieves it.  (function) valid const Checks if the future refers to a shared state.  (function) wait Blocks until the result becomes available.  (function) wait_for Waits for the result to become available.  (function template) wait_until Waits for a result to become available.  (function template) is_ready const Check if it's ready.  (function) release Move the underlying sequence somewhere else.  (function) lazy_continuable_size const Get number of internal futures with lazy continuations.  (function) all_lazy_continuable const Check if all internal types are lazy continuable.  (function) compile_time_size Get size, if we know that at compile time.  (function)"},{"location":"reference/classes/classfutures_1_1when__any__future/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classfutures_1_1when__any__future/#function-when_any_future","title":"function when_any_future","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> (1)<pre><code>when_any_future() = default;\n</code></pre> (2)<pre><code>explicit when_any_future(\nsequence_type &amp;&amp; v);\n</code></pre> (3)<pre><code>when_any_future(\nwhen_any_future &amp;&amp; other);\n</code></pre> (4)<pre><code>when_any_future(when_any_future const &amp; other) = delete;\n</code></pre> <ol> <li>Default constructor. </li> <li>Move a sequence of futures into the when_any_future constructor. </li> <li>Move constructor. </li> <li>when_any_future is not CopyConstructible </li> </ol> <p>Description</p> <p>(1) Constructs a when_any_future with no shared state. After construction, valid() == false </p> <p>(2) The sequence is moved into this future object and the objects from which the sequence was created get invalidated.</p> <p>We immediately set up the notifiers for any input future that supports lazy continuations. </p> <p>(3) Constructs a when_any_future with the shared state of other using move semantics. After construction, other.valid() == false</p> <p>This is a class that controls resources, and their behavior needs to be moved. However, unlike a vector, some notifier resources cannot be moved and might need to be recreated, because they expect the underlying futures to be in a given address to work.</p> <p>We cannot move the notifiers because these expect things to be notified at certain addresses. This means the notifiers in <code>other</code> have to be stopped and we have to be sure of that before its destructor gets called.</p> <p>There are two in operations here.</p> <ul> <li>Asking the notifiers to stop and waiting<ul> <li>This is what we need to do at the destructor because we can't destruct \"this\" until we are sure no notifiers are going to try to notify this object</li> </ul> </li> <li>Asking the notifiers to stop<ul> <li>This is what we need to do when moving, because we know we won't need these notifiers anymore. When the moved object gets destructed, it will ensure its notifiers are stopped and finish the task. </li> </ul> </li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__any__future/#function-when_any_future_1","title":"function ~when_any_future","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> <pre><code>~when_any_future() = default;\n</code></pre> <p>Releases any shared state. </p> <p>Description</p> <ul> <li>If the return object or provider holds the last reference to its shared state, the shared state is destroyed.</li> <li>the return object or provider gives up its reference to its shared state</li> </ul> <p>This means we just need to let the internal futures destroy themselves, but we have to stop notifiers if we have any, because these notifiers might later try to set tokens in a future that no longer exists. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__any__future/#function-operator","title":"function operator=","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> (1)<pre><code>when_any_future &amp;\noperator=(\nwhen_any_future &amp;&amp; other);\n</code></pre> (2)<pre><code>when_any_future &amp;\noperator=(when_any_future const &amp; other) = delete;\n</code></pre> <ol> <li>Assigns the contents of another future object. </li> <li>Copy assigns the contents of another when_any_future object. </li> </ol> <p>Description</p> <p>(1) Releases any shared state and move-assigns the contents of other to *this.</p> <p>After the assignment, other.valid() == false and this-&gt;valid() will yield the same value as other.valid() before the assignment. </p> <p>(2) when_any_future is not copy assignable. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__any__future/#function-get","title":"function get","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> <pre><code>when_any_result&lt; sequence_type &gt;\nget();\n</code></pre> <p>Wait until any future has a valid result and retrieves it. </p> <p>Return value</p> <p>A when_any_result holding the future objects </p> <p>Description</p> <p>It effectively calls wait() in order to wait for the result. This avoids replicating the logic behind continuations, polling, and notifiers.</p> <p>The behavior is undefined if valid() is false before the call to this function. Any shared state is released. valid() is false after a call to this method. The value v stored in the shared state, as std::move(v)</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__any__future/#function-valid","title":"function valid","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> <pre><code>bool\nvalid() const noexcept;\n</code></pre> <p>Checks if the future refers to a shared state. </p> <p>Return value</p> <p>Return <code>true</code> if underlying futures are valid </p> <p>Description</p> <p>This future is always valid() unless there are tasks and they are all invalid</p> <p>Exception Safety</p> <p>Throws nothing.</p> <p>See Also</p> <ul> <li><code>std::experimental::when_any</code></li> </ul>"},{"location":"reference/classes/classfutures_1_1when__any__future/#function-wait","title":"function wait","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> <pre><code>void\nwait();\n</code></pre> <p>Blocks until the result becomes available. </p> <p>Description</p> <p>valid() == true after the call. The behavior is undefined if valid() == false before the call to this function </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__any__future/#function-wait_for","title":"function wait_for","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> <pre><code>template &lt;class Rep, class Period&gt;\nfuture_status\nwait_for(\nstd::chrono::duration&lt; Rep, Period &gt; const &amp; timeout_duration);\n</code></pre> <p>Waits for the result to become available. </p> <p>Parameters</p> <ul> <li>timeout_duration - Time to wait </li> </ul> <p>Return value</p> <p>Status of the future after the specified duration</p> <p>Description</p> <p>Blocks until specified timeout_duration has elapsed or the result becomes available, whichever comes first. Not-polling is easier to emulate for future conjunctions (when_all) because we can sleep on each task until they are all done, since we need all of them anyway.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>See Also</p> <ul> <li>https://en.m.wikipedia.org/wiki/Exponential_backoff</li> </ul>"},{"location":"reference/classes/classfutures_1_1when__any__future/#function-wait_until","title":"function wait_until","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> <pre><code>template &lt;class Clock, class Duration&gt;\nfuture_status\nwait_until(\nstd::chrono::time_point&lt; Clock, Duration &gt; const &amp; timeout_time);\n</code></pre> <p>Waits for a result to become available. </p> <p>Parameters</p> <ul> <li>timeout_time - The timepoint to wait until </li> </ul> <p>Return value</p> <p>Status of the future after the specified duration </p> <p>Description</p> <p>It blocks until specified timeout_time has been reached or the result becomes available, whichever comes first</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__any__future/#function-is_ready","title":"function is_ready","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> (1)<pre><code>bool\nis_ready() const;\n</code></pre> (2)<pre><code>bool\nis_ready(size_t index) const;\n</code></pre> <ol> <li>Check if it's ready. </li> <li>Check if the i-th future is ready. </li> </ol> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__any__future/#function-release","title":"function release","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> <pre><code>sequence_type &amp;&amp;\nrelease();\n</code></pre> <p>Move the underlying sequence somewhere else. </p> <p>Description</p> <p>The when_any_future is left empty and should now be considered invalid. This is useful for any algorithm that merges two wait_any_future objects without forcing encapsulation of the merge function. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__any__future/#function-lazy_continuable_size","title":"function lazy_continuable_size","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> <pre><code>constexpr size_t\nlazy_continuable_size() const;\n</code></pre> <p>Get number of internal futures with lazy continuations. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__any__future/#function-all_lazy_continuable","title":"function all_lazy_continuable","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> <pre><code>constexpr bool\nall_lazy_continuable() const;\n</code></pre> <p>Check if all internal types are lazy continuable. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classfutures_1_1when__any__future/#function-compile_time_size","title":"function compile_time_size","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> <pre><code>static constexpr size_t\ncompile_time_size();\n</code></pre> <p>Get size, if we know that at compile time. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1always__deferred__opt/","title":"futures::always_deferred_opt","text":"<p>Futures / Future options / always_deferred_opt</p> <p>Defined in header <code>&lt;futures/future_options_args.hpp&gt;</code></p> <pre><code>struct always_deferred_opt;\n</code></pre> <p>Future option to determine the future is always_deferred. </p> <p>Description</p> <p>A future that is known to always be deferred can implement a number of optimizations a regular future cannot. For instance,</p> <ul> <li>continuations can happen without the continuation list because the next future can simply hold the previous future.</li> <li>Continuations lists and the base operation state also don't need any synchronization because the task* is known to not have been launched when these primitives are being set.</li> <li>The operation state might be stored inline without any dynamic memory allocations because we can assume the calling thread will be locked when waiting for the future so the address of the operation state cannot change. </li> </ul> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1always__detached__opt/","title":"futures::always_detached_opt","text":"<p>Futures / Future options / always_detached_opt</p> <p>Defined in header <code>&lt;futures/future_options_args.hpp&gt;</code></p> <pre><code>struct always_detached_opt;\n</code></pre> <p>Future option to determine the future is always_detached. </p> <p>Description</p> <p>A future with this option is considered to always be detached. The detach() function does nothing and the future will not wait for the promise to be set at destruction. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1compare__three__way/","title":"futures::compare_three_way","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/compare_three_way.hpp&gt;</code></p> <pre><code>struct compare_three_way;\n</code></pre> <p>Function object for performing comparisons. </p> <p>Description</p> <p>This class defines functor equivalent to the C++20 <code>std::ranges::compare_three_way</code>. If C++20 is available, it represents an alias to <code>std::ranges::compare_three_way</code>.</p> <p>See Also: <code>std::compare_three_way</code></p>"},{"location":"reference/classes/structfutures_1_1compare__three__way/#public-types","title":"Public Types","text":"Member Types Definition is_transparent <code>void</code> (using)"},{"location":"reference/classes/structfutures_1_1compare__three__way/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const (function template)"},{"location":"reference/classes/structfutures_1_1compare__three__way/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/structfutures_1_1compare__three__way/#using-is_transparent","title":"using is_transparent","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/compare_three_way.hpp&gt;</code> <pre><code>using is_transparent = void;\n</code></pre></p>"},{"location":"reference/classes/structfutures_1_1compare__three__way/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/structfutures_1_1compare__three__way/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/compare_three_way.hpp&gt;</code></p> <pre><code>template &lt;class T, class U&gt;\nconstexpr partial_ordering\noperator()(T &amp;&amp; t, U &amp;&amp; u) const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1continuable__opt/","title":"futures::continuable_opt","text":"<p>Futures / Future options / continuable_opt</p> <p>Defined in header <code>&lt;futures/future_options_args.hpp&gt;</code></p> <pre><code>struct continuable_opt;\n</code></pre> <p>Future option to determine the future is continuable. </p> <p>Description</p> <p>The operation state of a continuable futures holds a list of continuations to the task related to that future. The continuations are executed as soon as the future main task is ready. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1deferred__function__opt/","title":"futures::deferred_function_opt","text":"<p>Futures / Future options / deferred_function_opt</p> <p>Defined in header <code>&lt;futures/future_options_args.hpp&gt;</code></p> <pre><code>template &lt;class Function&gt; struct deferred_function_opt;\n</code></pre> <p>Type of the deferred function. </p>"},{"location":"reference/classes/structfutures_1_1deferred__function__opt/#public-types","title":"Public Types","text":"Member Types Definition type <code>Function</code> (using)"},{"location":"reference/classes/structfutures_1_1deferred__function__opt/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/structfutures_1_1deferred__function__opt/#using-type","title":"using type","text":"<p>Defined in header <code>&lt;futures/future_options_args.hpp&gt;</code> <pre><code>using type = Function;\n</code></pre></p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1equal__to/","title":"futures::equal_to","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/equal_to.hpp&gt;</code></p> <pre><code>struct equal_to;\n</code></pre> <p>A C++17 functor equivalent to the C++20 std::ranges::equal_to. </p> <p>See Also: <code>std::equal_to</code></p>"},{"location":"reference/classes/structfutures_1_1equal__to/#public-types","title":"Public Types","text":"Member Types Definition is_transparent <code>void</code> (using)"},{"location":"reference/classes/structfutures_1_1equal__to/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const (function template)"},{"location":"reference/classes/structfutures_1_1equal__to/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/structfutures_1_1equal__to/#using-is_transparent","title":"using is_transparent","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/equal_to.hpp&gt;</code> <pre><code>using is_transparent = void;\n</code></pre></p>"},{"location":"reference/classes/structfutures_1_1equal__to/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/structfutures_1_1equal__to/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/equal_to.hpp&gt;</code></p> <pre><code>template &lt;class T, class U&gt;\nconstexpr bool\noperator()(T &amp;&amp; t, U &amp;&amp; u) const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1executor__opt/","title":"futures::executor_opt","text":"<p>Futures / Future options / executor_opt</p> <p>Defined in header <code>&lt;futures/future_options_args.hpp&gt;</code></p> <pre><code>template &lt;class Executor&gt; struct executor_opt;\n</code></pre> <p>Future option to identify the executor to be used by a future. </p> <p>Template Parameters</p> <ul> <li>Executor - Executor type </li> </ul> <p>Description</p> <p>This identifies the executor a deferred future will use to launch the task and the executor where continuations will be launched by default.</p>"},{"location":"reference/classes/structfutures_1_1executor__opt/#public-types","title":"Public Types","text":"Member Types Definition type <code>Executor</code> (using)"},{"location":"reference/classes/structfutures_1_1executor__opt/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/structfutures_1_1executor__opt/#using-type","title":"using type","text":"<p>Defined in header <code>&lt;futures/future_options_args.hpp&gt;</code> <pre><code>using type = Executor;\n</code></pre></p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1greater/","title":"futures::greater","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/greater.hpp&gt;</code></p> <pre><code>struct greater;\n</code></pre> <p>A C++17 functor equivalent to the C++20 std::ranges::greater. </p> <p>See Also: <code>std::greater</code></p>"},{"location":"reference/classes/structfutures_1_1greater/#public-types","title":"Public Types","text":"Member Types Definition is_transparent <code>void</code> (using)"},{"location":"reference/classes/structfutures_1_1greater/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const (function template)"},{"location":"reference/classes/structfutures_1_1greater/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/structfutures_1_1greater/#using-is_transparent","title":"using is_transparent","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/greater.hpp&gt;</code> <pre><code>using is_transparent = void;\n</code></pre></p>"},{"location":"reference/classes/structfutures_1_1greater/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/structfutures_1_1greater/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/greater.hpp&gt;</code></p> <pre><code>template &lt;class T, class U&gt;\nconstexpr bool\noperator()(T &amp;&amp; t, U &amp;&amp; u) const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1greater__equal/","title":"futures::greater_equal","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/greater_equal.hpp&gt;</code></p> <pre><code>struct greater_equal;\n</code></pre> <p>A C++17 functor equivalent to the C++20 std::ranges::greater_equal. </p> <p>See Also: <code>std::greater_equal</code></p>"},{"location":"reference/classes/structfutures_1_1greater__equal/#public-types","title":"Public Types","text":"Member Types Definition is_transparent <code>void</code> (using)"},{"location":"reference/classes/structfutures_1_1greater__equal/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const (function template)"},{"location":"reference/classes/structfutures_1_1greater__equal/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/structfutures_1_1greater__equal/#using-is_transparent","title":"using is_transparent","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/greater_equal.hpp&gt;</code> <pre><code>using is_transparent = void;\n</code></pre></p>"},{"location":"reference/classes/structfutures_1_1greater__equal/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/structfutures_1_1greater__equal/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/greater_equal.hpp&gt;</code></p> <pre><code>template &lt;class T, class U&gt;\nconstexpr bool\noperator()(T &amp;&amp; t, U &amp;&amp; u) const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1has__executor/","title":"futures::has_executor","text":"<p>Futures / Future Traits / has_executor</p> <p>Defined in header <code>&lt;futures/traits/has_executor.hpp&gt;</code></p> <pre><code>template &lt;typename&gt; struct has_executor;\n</code></pre> <p>Determine if a future type has an executor. </p> <p>Inherits from <code>std::false_type</code></p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1has__ready__notifier/","title":"futures::has_ready_notifier","text":"<p>Futures / Future Traits / has_ready_notifier</p> <p>Defined in header <code>&lt;futures/traits/has_ready_notifier.hpp&gt;</code></p> <pre><code>template &lt;typename&gt; struct has_ready_notifier;\n</code></pre> <p>Customization point to determine if a type has a ready notifier. </p> <p>Description</p> <p>The ready notifier is an external handle used to identify when the future is ready. </p> <p>Inherits from <code>std::false_type</code></p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1is__always__deferred/","title":"futures::is_always_deferred","text":"<p>Futures / Future Traits / is_always_deferred</p> <p>Defined in header <code>&lt;futures/traits/is_always_deferred.hpp&gt;</code></p> <pre><code>template &lt;typename&gt; struct is_always_deferred;\n</code></pre> <p>Customization point to define a future as always deferred. </p> <p>Description</p> <p>Deferred futures allow optimizations that make it worth indicating at compile time whether they can be applied. They can carry their tasks, avoid dynamic memory allocations, and attach continuations without any extra synchronization cost.</p> <p>Unless this trait is specialized, a type is considered to not be always deferred. </p> <p>Inherits from <code>std::false_type</code></p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1is__continuable/","title":"futures::is_continuable","text":"<p>Futures / Future Traits / is_continuable</p> <p>Defined in header <code>&lt;futures/traits/is_continuable.hpp&gt;</code></p> <pre><code>template &lt;typename&gt; struct is_continuable;\n</code></pre> <p>Customization point to define future as supporting continuations. </p> <p>Inherits from <code>std::false_type</code></p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1is__execution__policy/","title":"futures::is_execution_policy","text":"<p>Algorithms / Execution Policies / is_execution_policy</p> <p>Defined in header <code>&lt;futures/algorithm/policies.hpp&gt;</code></p> <pre><code>template &lt;class T&gt; struct is_execution_policy;\n</code></pre> <p>Determines whether T is a standard or implementation-defined execution policy type. </p> <p>Inherits from <code>detail::disjunction&lt; std::is_same&lt; T, sequenced_policy &gt;, std::is_same&lt; T, parallel_policy &gt;, std::is_same&lt; T, parallel_unsequenced_policy &gt;, std::is_same&lt; T, unsequenced_policy &gt; &gt;</code></p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1is__future__like/","title":"futures::is_future_like","text":"<p>Futures / Future Traits / is_future_like</p> <p>Defined in header <code>&lt;futures/traits/is_future_like.hpp&gt;</code></p> <pre><code>template &lt;class T&gt; struct is_future_like;\n</code></pre> <p>Customization point to determine if a type is a future type. </p> <p>Description</p> <p>This trait identifies whether the type represents a future value.</p> <p>Unless the trait is specialized, a type is considered future-like if it has the <code>get()</code> member function.</p> <p>See Also: </p> <ul> <li>has_stop_token </li> </ul> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1is__shared__future/","title":"futures::is_shared_future","text":"<p>Futures / Future Traits / is_shared_future</p> <p>Defined in header <code>&lt;futures/traits/is_shared_future.hpp&gt;</code></p> <pre><code>template &lt;typename&gt; struct is_shared_future;\n</code></pre> <p>Customization point to determine if a type is a shared future type. </p> <p>Inherits from <code>std::false_type</code></p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1less/","title":"futures::less","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/less.hpp&gt;</code></p> <pre><code>struct less;\n</code></pre> <p>A C++17 functor equivalent to the C++20 std::ranges::less. </p> <p>See Also: <code>std::less</code></p>"},{"location":"reference/classes/structfutures_1_1less/#public-types","title":"Public Types","text":"Member Types Definition is_transparent <code>void</code> (using)"},{"location":"reference/classes/structfutures_1_1less/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const (function template)"},{"location":"reference/classes/structfutures_1_1less/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/structfutures_1_1less/#using-is_transparent","title":"using is_transparent","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/less.hpp&gt;</code> <pre><code>using is_transparent = void;\n</code></pre></p>"},{"location":"reference/classes/structfutures_1_1less/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/structfutures_1_1less/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/less.hpp&gt;</code></p> <pre><code>template &lt;class T, class U&gt;\nconstexpr bool\noperator()(T &amp;&amp; t, U &amp;&amp; u) const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1less__equal/","title":"futures::less_equal","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/less_equal.hpp&gt;</code></p> <pre><code>struct less_equal;\n</code></pre> <p>A C++17 functor equivalent to the C++20 std::ranges::less_equal. </p> <p>See Also: <code>std::less</code></p>"},{"location":"reference/classes/structfutures_1_1less__equal/#public-types","title":"Public Types","text":"Member Types Definition is_transparent <code>void</code> (using)"},{"location":"reference/classes/structfutures_1_1less__equal/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const (function template)"},{"location":"reference/classes/structfutures_1_1less__equal/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/structfutures_1_1less__equal/#using-is_transparent","title":"using is_transparent","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/less_equal.hpp&gt;</code> <pre><code>using is_transparent = void;\n</code></pre></p>"},{"location":"reference/classes/structfutures_1_1less__equal/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/structfutures_1_1less__equal/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/less_equal.hpp&gt;</code></p> <pre><code>template &lt;class T, class U&gt;\nconstexpr bool\noperator()(T &amp;&amp; t, U &amp;&amp; u) const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1nostopstate__t/","title":"futures::nostopstate_t","text":"<p>Futures / Cancellation / nostopstate_t</p> <p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>struct nostopstate_t;\n</code></pre> <p>Empty struct to initialize a stop_source without a shared stop state. </p>"},{"location":"reference/classes/structfutures_1_1nostopstate__t/#public-functions","title":"Public Functions","text":"Member Functions Description (constructor) = default (function)"},{"location":"reference/classes/structfutures_1_1nostopstate__t/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/structfutures_1_1nostopstate__t/#function-nostopstate_t","title":"function nostopstate_t","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code></p> <pre><code>explicit nostopstate_t() = default;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1not__equal__to/","title":"futures::not_equal_to","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/not_equal_to.hpp&gt;</code></p> <pre><code>struct not_equal_to;\n</code></pre> <p>A C++17 functor equivalent to the C++20 std::ranges::not_equal_to. </p> <p>See Also: <code>std::not_equal_to</code></p>"},{"location":"reference/classes/structfutures_1_1not__equal__to/#public-types","title":"Public Types","text":"Member Types Definition is_transparent <code>void</code> (using)"},{"location":"reference/classes/structfutures_1_1not__equal__to/#public-functions","title":"Public Functions","text":"Member Functions Description operator() const (function template)"},{"location":"reference/classes/structfutures_1_1not__equal__to/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/structfutures_1_1not__equal__to/#using-is_transparent","title":"using is_transparent","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/not_equal_to.hpp&gt;</code> <pre><code>using is_transparent = void;\n</code></pre></p>"},{"location":"reference/classes/structfutures_1_1not__equal__to/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/structfutures_1_1not__equal__to/#function-operator","title":"function operator()","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/not_equal_to.hpp&gt;</code></p> <pre><code>template &lt;class T, class U&gt;\nconstexpr bool\noperator()(T &amp;&amp; t, U &amp;&amp; u) const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1shared__opt/","title":"futures::shared_opt","text":"<p>Futures / Future options / shared_opt</p> <p>Defined in header <code>&lt;futures/future_options_args.hpp&gt;</code></p> <pre><code>struct shared_opt;\n</code></pre> <p>Future option to determine the future is shared. </p> <p>Description</p> <p>Shared futures refer to the same operation state. The result of the future operation is not moved from the future so that other tasks can depend on it. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1stoppable__opt/","title":"futures::stoppable_opt","text":"<p>Futures / Future options / stoppable_opt</p> <p>Defined in header <code>&lt;futures/future_options_args.hpp&gt;</code></p> <pre><code>struct stoppable_opt;\n</code></pre> <p>Future option to determine the future is stoppable. </p> <p>Description</p> <p>The operation state of a stoppable future holds a stop token we can use to request the main operation to stop. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/classes/structfutures_1_1when__any__result/","title":"futures::when_any_result","text":"<p>Adaptors / when_any_result</p> <p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> <pre><code>template &lt;class Sequence&gt; struct when_any_result;\n</code></pre> <p>Result type for when_any_future objects. </p> <p>Description</p> <p>This is defined in a separate file because many other concepts depend on this definition, especially the inferences for unwrapping <code>then</code> continuations, regardless of the when_any algorithm. </p>"},{"location":"reference/classes/structfutures_1_1when__any__result/#public-types","title":"Public Types","text":"Member Types Definition size_type Type used to represent the number of futures in the result.  (using) sequence_type A sequence type with all the futures.  (using)"},{"location":"reference/classes/structfutures_1_1when__any__result/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description index Index of the element whose result was ready first.  (public variable) tasks The sequence of future objects waited for.  (public variable)"},{"location":"reference/classes/structfutures_1_1when__any__result/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/structfutures_1_1when__any__result/#using-size_type","title":"using size_type","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code> <pre><code>using size_type = std::size_t;\n</code></pre></p> <p>Type used to represent the number of futures in the result. </p>"},{"location":"reference/classes/structfutures_1_1when__any__result/#using-sequence_type","title":"using sequence_type","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code> <pre><code>using sequence_type = Sequence;\n</code></pre></p> <p>A sequence type with all the futures. </p> <p>Description</p> <p>This sequence might be a range or a tuple. </p>"},{"location":"reference/classes/structfutures_1_1when__any__result/#public-attributes_1","title":"Public Attributes","text":""},{"location":"reference/classes/structfutures_1_1when__any__result/#variable-index","title":"variable index","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code> <pre><code>size_type index { static_cast&lt;size_type&gt;(-1) };\n</code></pre></p> <p>Index of the element whose result was ready first. </p>"},{"location":"reference/classes/structfutures_1_1when__any__result/#variable-tasks","title":"variable tasks","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code> <pre><code>sequence_type tasks;\n</code></pre></p> <p>The sequence of future objects waited for. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/","title":"Files","text":"File futures Root library directory. (directory) futures/adaptor.hpp All Adaptors. (file) futures/algorithm.hpp All Algorithms. (file) futures/await.hpp Helper function to wait for futures. (file) futures/config.hpp Public configuration macros. (file) futures/error.hpp Future error types. (file) futures/executor.hpp All Executors. (file) futures/future.hpp Future types. (file) futures/future_options.hpp Future options. (file) futures/future_options_args.hpp Arguments for future options. (file) futures/future_status.hpp Future types. (file) futures/futures.hpp All functionality in the library. (file) futures/adaptor Root adaptors directory. (directory) futures/adaptor/bind_executor_to_lambda.hpp Attach executor to callable. (file) futures/adaptor/make_ready_future.hpp Make future object with value. (file) futures/adaptor/then.hpp Continuation adaptors. (file) futures/adaptor/when_all.hpp Conjunction adaptors. (file) futures/adaptor/when_any.hpp Disjunction adaptors. (file) futures/algorithm Root algorithms directory. (directory) futures/algorithm/all_of.hpp <code>all_of</code> algorithm (file) futures/algorithm/any_of.hpp <code>any_of</code> algorithm (file) futures/algorithm/compare.hpp All comparisons. (file) futures/algorithm/count.hpp <code>count</code> algorithm (file) futures/algorithm/count_if.hpp <code>count_if</code> algorithm (file) futures/algorithm/find.hpp <code>find</code> algorithm (file) futures/algorithm/find_if.hpp <code>find_if</code> algorithm (file) futures/algorithm/find_if_not.hpp <code>find_if_not</code> algorithm (file) futures/algorithm/for_each.hpp <code>for_each</code> algorithm (file) futures/algorithm/compare Root comparisons directory. (directory) futures/algorithm/compare/compare_three_way.hpp Spaceship comparison functor. (file) futures/algorithm/compare/equal_to.hpp Equality comparison functor. (file) futures/algorithm/compare/greater.hpp Greater comparison functor. (file) futures/algorithm/compare/greater_equal.hpp Greater or equal comparison functor. (file) futures/algorithm/compare/less.hpp Less comparison functor. (file) futures/algorithm/compare/less_equal.hpp Less or equal comparison functor. (file) futures/algorithm/compare/not_equal_to.hpp Not equal comparison functor. (file) futures/algorithm/compare/partial_ordering.hpp Result of partial ordering comparison. (file) futures/algorithm/compare/strong_ordering.hpp (file) futures/algorithm/compare/weak_ordering.hpp (file) futures/algorithm/partitioner Root partitioners directory. (directory) futures/algorithm/partitioner/default_partitioner.hpp Default Partitioner. (file) futures/algorithm/partitioner/halve_partitioner.hpp Halve Partitioner. (file) futures/algorithm/partitioner/partitioner_for.hpp Concepts and traits for partitioners. (file) futures/algorithm/partitioner/thread_partitioner.hpp Thread Partitioner. (file) futures/algorithm/traits Root traits directory. (directory) futures/algorithm/traits/binary_invoke_algorithm.hpp <code>binary_invoke_algorithm</code> trait (file) futures/algorithm/traits/common_comparison_category.hpp <code>common_comparison_category</code> trait (file) futures/algorithm/traits/is_assignable_from.hpp <code>is_assignable_from</code> trait (file) futures/algorithm/traits/is_bidirectional_iterator.hpp <code>is_bidirectional_iterator</code> trait (file) futures/algorithm/traits/is_constructible_from.hpp <code>is_constructible_from</code> trait (file) futures/algorithm/traits/is_convertible_to.hpp <code>is_convertible_to</code> trait (file) futures/algorithm/traits/is_copyable.hpp <code>is_copyable</code> trait (file) futures/algorithm/traits/is_default_initializable.hpp <code>is_default_initializable</code> trait (file) futures/algorithm/traits/is_derived_from.hpp <code>is_derived_from</code> trait (file) futures/algorithm/traits/is_equality_comparable.hpp <code>is_equality_comparable</code> trait (file) futures/algorithm/traits/is_equality_comparable_with.hpp <code>is_equality_comparable_with</code> trait (file) futures/algorithm/traits/is_forward_iterator.hpp <code>is_forward_iterator</code> trait (file) futures/algorithm/traits/is_incrementable.hpp <code>is_incrementable</code> trait (file) futures/algorithm/traits/is_indirectly_binary_invocable.hpp <code>is_indirectly_binary_invocable</code> trait (file) futures/algorithm/traits/is_indirectly_readable.hpp <code>is_indirectly_readable</code> trait (file) futures/algorithm/traits/is_indirectly_unary_invocable.hpp <code>is_indirectly_unary_invocable</code> trait (file) futures/algorithm/traits/is_input_iterator.hpp <code>is_input_iterator</code> trait (file) futures/algorithm/traits/is_input_or_output_iterator.hpp <code>is_input_or_output_iterator</code> trait (file) futures/algorithm/traits/is_input_range.hpp <code>is_input_range</code> trait (file) futures/algorithm/traits/is_movable.hpp <code>is_movable</code> trait (file) futures/algorithm/traits/is_move_constructible.hpp <code>is_move_constructible</code> trait (file) futures/algorithm/traits/is_random_access_iterator.hpp <code>is_random_access_iterator</code> trait (file) futures/algorithm/traits/is_range.hpp <code>is_range</code> trait (file) futures/algorithm/traits/is_regular.hpp <code>is_regular</code> trait (file) futures/algorithm/traits/is_semiregular.hpp <code>is_semiregular</code> trait (file) futures/algorithm/traits/is_sentinel_for.hpp <code>is_sentinel_for</code> trait (file) futures/algorithm/traits/is_swappable.hpp <code>is_swappable</code> trait (file) futures/algorithm/traits/is_three_way_comparable.hpp <code>is_three_way_comparable</code> trait (file) futures/algorithm/traits/is_three_way_comparable_with.hpp <code>is_three_way_comparable_with</code> trait (file) futures/algorithm/traits/is_totally_ordered.hpp <code>is_totally_ordered</code> trait (file) futures/algorithm/traits/is_totally_ordered_with.hpp <code>is_totally_ordered_with</code> trait (file) futures/algorithm/traits/is_weakly_incrementable.hpp <code>is_weakly_incrementable</code> trait (file) futures/algorithm/traits/iter_difference.hpp <code>iter_difference</code> trait (file) futures/algorithm/traits/iter_reference.hpp <code>iter_reference</code> trait (file) futures/algorithm/traits/iter_rvalue_reference.hpp <code>iter_rvalue_reference</code> trait (file) futures/algorithm/traits/iter_value.hpp <code>iter_value</code> trait (file) futures/algorithm/traits/iterator.hpp <code>iterator</code> trait (file) futures/algorithm/traits/range_value.hpp <code>range_value</code> trait (file) futures/algorithm/traits/remove_cvref.hpp <code>remove_cvref</code> trait (file) futures/algorithm/traits/unary_invoke_algorithm.hpp <code>unary_invoke_algorithm</code> trait (file) futures/algorithm/traits/value_cmp_algorithm.hpp <code>value_cmp_algorithm</code> trait (file) futures/algorithm/none_of.hpp <code>none_of</code> algorithm (file) futures/algorithm/partitioner.hpp All partitioners. (file) futures/algorithm/policies.hpp Algorithm execution policies. (file) futures/algorithm/reduce.hpp <code>reduce</code> algorithm (file) futures/algorithm/traits.hpp All algorithm traits. (file) futures/executor Root executors directory. (directory) futures/executor/any_executor.hpp Any executor. (file) futures/executor/default_executor.hpp Default executor and related functions. (file) futures/executor/execute.hpp (file) futures/executor/hardware_concurrency.hpp Hardware concurrency function. (file) futures/executor/inline_executor.hpp Inline executor. (file) futures/executor/is_execution_context.hpp Execution context traits. (file) futures/executor/is_executor.hpp Executor traits. (file) futures/executor/new_thread_executor.hpp New thread executor. (file) futures/executor/thread_pool.hpp Inline executor. (file) futures/traits Root traits directory. (directory) futures/traits/future_value.hpp <code>future_value</code> trait (file) futures/traits/has_executor.hpp <code>has_executor</code> trait (file) futures/traits/has_ready_notifier.hpp <code>has_ready_notifier</code> trait (file) futures/traits/has_stop_token.hpp <code>has_stop_token</code> trait (file) futures/traits/is_always_deferred.hpp <code>is_always_deferred</code> trait (file) futures/traits/is_continuable.hpp <code>is_continuable</code> trait (file) futures/traits/is_future_like.hpp <code>is_future_like</code> trait (file) futures/traits/is_shared_future.hpp <code>is_shared_future</code> trait (file) futures/traits/is_stoppable.hpp <code>is_stoppable</code> trait (file) futures/is_ready.hpp Free functions to check whether a future is ready. (file) futures/launch.hpp Functions to launch new tasks. (file) futures/packaged_task.hpp Packaged task as a promise. (file) futures/promise.hpp Promises. (file) futures/stop_token.hpp Stop tokens. (file) futures/throw.hpp Functions to handle exceptions. (file) futures/traits.hpp All Futures Traits. (file) futures/wait_for_all.hpp Functions to wait for all futures in a sequence. (file) futures/wait_for_any.hpp Functions to wait for any futures in a sequence. (file) <p>Updated on 2023-01-19</p>"},{"location":"reference/files/adaptor_8hpp/","title":"futures/adaptor.hpp","text":"<p>All Adaptors. </p> <pre><code>#include &lt;futures/adaptor.hpp&gt;\n</code></pre>"},{"location":"reference/files/adaptor_8hpp/#description","title":"Description","text":"<p>Use this header to include all functionalities of the algorithms module at once. In most cases, however, we recommend only including the headers for the functionality you need. Use the reference to identify these files. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/algorithm_2traits_8hpp/","title":"futures/algorithm/traits.hpp","text":"<p>All algorithm traits. </p> <pre><code>#include &lt;futures/algorithm/traits.hpp&gt;\n</code></pre>"},{"location":"reference/files/algorithm_2traits_8hpp/#description","title":"Description","text":"<p>Use this header to include all functionalities of the algorithm traits submodule at once. In most cases, however, we recommend only including the headers for the functionality you need. Use the reference to identify these files. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/algorithm_8hpp/","title":"futures/algorithm.hpp","text":"<p>All Algorithms. </p> <pre><code>#include &lt;futures/algorithm.hpp&gt;\n</code></pre>"},{"location":"reference/files/algorithm_8hpp/#description","title":"Description","text":"<p>Use this header to include all functionalities of the adaptors module at once. In most cases, however, we recommend only including the headers for the functionality you need. Use the reference to identify these files. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/all__of_8hpp/","title":"futures/algorithm/all_of.hpp","text":"<p><code>all_of</code> algorithm </p> <pre><code>#include &lt;futures/algorithm/all_of.hpp&gt;\n</code></pre>"},{"location":"reference/files/all__of_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/all__of_8hpp/#classes","title":"Classes","text":"Classes Description all_of_functor Functor representing the overloads for the all_of function.  (class)"},{"location":"reference/files/all__of_8hpp/#description","title":"Description","text":"<p>This file defines the functor and callable for a parallel version of the <code>all_of</code> algorithm. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/any__executor_8hpp/","title":"futures/executor/any_executor.hpp","text":"<p>Any executor. </p> <pre><code>#include &lt;futures/executor/any_executor.hpp&gt;\n</code></pre>"},{"location":"reference/files/any__executor_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/any__executor_8hpp/#classes","title":"Classes","text":"Classes Description any_executor An wrapper that type erases any non-heterogeneous executor.  (class)"},{"location":"reference/files/any__executor_8hpp/#description","title":"Description","text":"<p>This file defines the any executor, which wraps and typeany erases other executors. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/any__of_8hpp/","title":"futures/algorithm/any_of.hpp","text":"<p><code>any_of</code> algorithm </p> <pre><code>#include &lt;futures/algorithm/any_of.hpp&gt;\n</code></pre>"},{"location":"reference/files/any__of_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/any__of_8hpp/#classes","title":"Classes","text":"Classes Description any_of_functor Functor representing the overloads for the any_of function.  (class)"},{"location":"reference/files/any__of_8hpp/#description","title":"Description","text":"<p>This file defines the functor and callable for a parallel version of the <code>any_of</code> algorithm. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/await_8hpp/","title":"futures/await.hpp","text":"<p>Helper function to wait for futures. </p> <pre><code>#include &lt;futures/await.hpp&gt;\n</code></pre>"},{"location":"reference/files/await_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/await_8hpp/#description","title":"Description","text":"<p>This file defines syntax sugar to wait for futures. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/binary__invoke__algorithm_8hpp/","title":"futures/algorithm/traits/binary_invoke_algorithm.hpp","text":"<p><code>binary_invoke_algorithm</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/binary_invoke_algorithm.hpp&gt;\n</code></pre>"},{"location":"reference/files/binary__invoke__algorithm_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/binary__invoke__algorithm_8hpp/#classes","title":"Classes","text":"Classes Description binary_invoke_algorithm_functor Binary algorithm overloads.  (class)"},{"location":"reference/files/binary__invoke__algorithm_8hpp/#description","title":"Description","text":"<p>This file defines the <code>binary_invoke_algorithm</code> trait.</p> <p>This file defines the <code>binary_invoke_algorithm</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/bind__executor__to__lambda_8hpp/","title":"futures/adaptor/bind_executor_to_lambda.hpp","text":"<p>Attach executor to callable. </p> <pre><code>#include &lt;futures/adaptor/bind_executor_to_lambda.hpp&gt;\n</code></pre>"},{"location":"reference/files/bind__executor__to__lambda_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/bind__executor__to__lambda_8hpp/#description","title":"Description","text":"<p>This file defines the operator we can use to bind an executor to a callable. This is an intermediary step for executors. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/common__comparison__category_8hpp/","title":"futures/algorithm/traits/common_comparison_category.hpp","text":"<p><code>common_comparison_category</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/common_comparison_category.hpp&gt;\n</code></pre>"},{"location":"reference/files/common__comparison__category_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/common__comparison__category_8hpp/#description","title":"Description","text":"<p>This file defines the <code>common_comparison_category</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/compare_8hpp/","title":"futures/algorithm/compare.hpp","text":"<p>All comparisons. </p> <pre><code>#include &lt;futures/algorithm/compare.hpp&gt;\n</code></pre>"},{"location":"reference/files/compare_8hpp/#description","title":"Description","text":"<p>Use this header to include all functionalities of the algorithm comparisons submodule at once. In most cases, however, we recommend only including the headers for the functionality you need. Use the reference to identify these files. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/compare__three__way_8hpp/","title":"futures/algorithm/compare/compare_three_way.hpp","text":"<p>Spaceship comparison functor. </p> <pre><code>#include &lt;futures/algorithm/compare/compare_three_way.hpp&gt;\n</code></pre>"},{"location":"reference/files/compare__three__way_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/compare__three__way_8hpp/#classes","title":"Classes","text":"Classes Description compare_three_way Function object for performing comparisons.  (struct)"},{"location":"reference/files/compare__three__way_8hpp/#description","title":"Description","text":"<p>This file defines the spaceship comparison as a functor. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/config_8hpp/","title":"futures/config.hpp","text":"<p>Public configuration macros. </p> <pre><code>#include &lt;futures/config.hpp&gt;\n</code></pre>"},{"location":"reference/files/config_8hpp/#description","title":"Description","text":"<p>This file defines public configuration macros. These are the macros the user is allowed to define to change how the library is compiled. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/count_8hpp/","title":"futures/algorithm/count.hpp","text":"<p><code>count</code> algorithm </p> <pre><code>#include &lt;futures/algorithm/count.hpp&gt;\n</code></pre>"},{"location":"reference/files/count_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/count_8hpp/#classes","title":"Classes","text":"Classes Description count_functor Functor representing the overloads for the count function.  (class)"},{"location":"reference/files/count_8hpp/#description","title":"Description","text":"<p>This file defines the functor and callable for a parallel version of the <code>count</code> algorithm. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/count__if_8hpp/","title":"futures/algorithm/count_if.hpp","text":"<p><code>count_if</code> algorithm </p> <pre><code>#include &lt;futures/algorithm/count_if.hpp&gt;\n</code></pre>"},{"location":"reference/files/count__if_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/count__if_8hpp/#classes","title":"Classes","text":"Classes Description count_if_functor Functor representing the overloads for the count_if function.  (class)"},{"location":"reference/files/count__if_8hpp/#description","title":"Description","text":"<p>This file defines the functor and callable for a parallel version of the <code>count_if</code> algorithm. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/default__executor_8hpp/","title":"futures/executor/default_executor.hpp","text":"<p>Default executor and related functions. </p> <pre><code>#include &lt;futures/executor/default_executor.hpp&gt;\n</code></pre>"},{"location":"reference/files/default__executor_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/default__executor_8hpp/#description","title":"Description","text":"<p>This file defines the default executor and related functions. The default executor is a dynamic thread pool. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/default__partitioner_8hpp/","title":"futures/algorithm/partitioner/default_partitioner.hpp","text":"<p>Default Partitioner. </p> <pre><code>#include &lt;futures/algorithm/partitioner/default_partitioner.hpp&gt;\n</code></pre>"},{"location":"reference/files/default__partitioner_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/default__partitioner_8hpp/#description","title":"Description","text":"<p>Define the default partitioner </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/dir_04dc2de138a37a89cd3cb54fe1e11cf0/","title":"futures/traits","text":"<p>Root traits directory. </p>"},{"location":"reference/files/dir_04dc2de138a37a89cd3cb54fe1e11cf0/#files","title":"Files","text":"Files Description futures/traits/future_value.hpp <code>future_value</code> trait futures/traits/has_executor.hpp <code>has_executor</code> trait futures/traits/has_ready_notifier.hpp <code>has_ready_notifier</code> trait futures/traits/has_stop_token.hpp <code>has_stop_token</code> trait futures/traits/is_always_deferred.hpp <code>is_always_deferred</code> trait futures/traits/is_continuable.hpp <code>is_continuable</code> trait futures/traits/is_future_like.hpp <code>is_future_like</code> trait futures/traits/is_shared_future.hpp <code>is_shared_future</code> trait futures/traits/is_stoppable.hpp <code>is_stoppable</code> trait"},{"location":"reference/files/dir_04dc2de138a37a89cd3cb54fe1e11cf0/#description","title":"Description","text":"<p>Root traits directory. </p> <p>Description</p> <p>This directory contains headers related to the future traits module. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/dir_1cd73713a542b57572a4ff9fdd4ed6a7/","title":"futures","text":"<p>Root library directory. </p>"},{"location":"reference/files/dir_1cd73713a542b57572a4ff9fdd4ed6a7/#directories","title":"Directories","text":"Directories Description futures/adaptor Root adaptors directory. futures/algorithm Root algorithms directory. futures/executor Root executors directory. futures/traits Root traits directory."},{"location":"reference/files/dir_1cd73713a542b57572a4ff9fdd4ed6a7/#files","title":"Files","text":"Files Description futures/adaptor.hpp All Adaptors. futures/algorithm.hpp All Algorithms. futures/await.hpp Helper function to wait for futures. futures/config.hpp Public configuration macros. futures/error.hpp Future error types. futures/executor.hpp All Executors. futures/future.hpp Future types. futures/future_options.hpp Future options. futures/future_options_args.hpp Arguments for future options. futures/future_status.hpp Future types. futures/futures.hpp All functionality in the library. futures/is_ready.hpp Free functions to check whether a future is ready. futures/launch.hpp Functions to launch new tasks. futures/packaged_task.hpp Packaged task as a promise. futures/promise.hpp Promises. futures/stop_token.hpp Stop tokens. futures/throw.hpp Functions to handle exceptions. futures/traits.hpp All Futures Traits. futures/wait_for_all.hpp Functions to wait for all futures in a sequence. futures/wait_for_any.hpp Functions to wait for any futures in a sequence."},{"location":"reference/files/dir_1cd73713a542b57572a4ff9fdd4ed6a7/#description","title":"Description","text":"<p>Root library directory. </p> <p>Description</p> <p>The root directory contains headers related to the main module, including futures and basic functionality. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/dir_34b5388a361cceed2f002017f04883fe/","title":"futures/algorithm/compare","text":"<p>Root comparisons directory. </p>"},{"location":"reference/files/dir_34b5388a361cceed2f002017f04883fe/#files","title":"Files","text":"Files Description futures/algorithm/compare/compare_three_way.hpp Spaceship comparison functor. futures/algorithm/compare/equal_to.hpp Equality comparison functor. futures/algorithm/compare/greater.hpp Greater comparison functor. futures/algorithm/compare/greater_equal.hpp Greater or equal comparison functor. futures/algorithm/compare/less.hpp Less comparison functor. futures/algorithm/compare/less_equal.hpp Less or equal comparison functor. futures/algorithm/compare/not_equal_to.hpp Not equal comparison functor. futures/algorithm/compare/partial_ordering.hpp Result of partial ordering comparison. futures/algorithm/compare/strong_ordering.hpp futures/algorithm/compare/weak_ordering.hpp"},{"location":"reference/files/dir_34b5388a361cceed2f002017f04883fe/#description","title":"Description","text":"<p>Root comparisons directory. </p> <p>Description</p> <p>This directory contains all headers related to the algorithm comparisons module. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/dir_7600b8ee04eb55a58ff8852c23efb638/","title":"futures/adaptor","text":"<p>Root adaptors directory. </p>"},{"location":"reference/files/dir_7600b8ee04eb55a58ff8852c23efb638/#files","title":"Files","text":"Files Description futures/adaptor/bind_executor_to_lambda.hpp Attach executor to callable. futures/adaptor/make_ready_future.hpp Make future object with value. futures/adaptor/then.hpp Continuation adaptors. futures/adaptor/when_all.hpp Conjunction adaptors. futures/adaptor/when_any.hpp Disjunction adaptors."},{"location":"reference/files/dir_7600b8ee04eb55a58ff8852c23efb638/#description","title":"Description","text":"<p>Root adaptors directory. </p> <p>Description</p> <p>The root directory contains headers related to the adaptor module, including conjunctions, disjunctions, and continuations. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/dir_df6dfc4d57e7b6f5a7fc1dc1541dbff4/","title":"futures/executor","text":"<p>Root executors directory. </p>"},{"location":"reference/files/dir_df6dfc4d57e7b6f5a7fc1dc1541dbff4/#files","title":"Files","text":"Files Description futures/executor/any_executor.hpp Any executor. futures/executor/default_executor.hpp Default executor and related functions. futures/executor/execute.hpp futures/executor/hardware_concurrency.hpp Hardware concurrency function. futures/executor/inline_executor.hpp Inline executor. futures/executor/is_execution_context.hpp Execution context traits. futures/executor/is_executor.hpp Executor traits. futures/executor/new_thread_executor.hpp New thread executor. futures/executor/thread_pool.hpp Inline executor."},{"location":"reference/files/dir_df6dfc4d57e7b6f5a7fc1dc1541dbff4/#description","title":"Description","text":"<p>Root executors directory. </p> <p>Description</p> <p>The root directory contains headers related to the executor module, including executors and traits. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/dir_e0a1cc086a107475864c8fa8ce1ca572/","title":"futures/algorithm/partitioner","text":"<p>Root partitioners directory. </p>"},{"location":"reference/files/dir_e0a1cc086a107475864c8fa8ce1ca572/#files","title":"Files","text":"Files Description futures/algorithm/partitioner/default_partitioner.hpp Default Partitioner. futures/algorithm/partitioner/halve_partitioner.hpp Halve Partitioner. futures/algorithm/partitioner/partitioner_for.hpp Concepts and traits for partitioners. futures/algorithm/partitioner/thread_partitioner.hpp Thread Partitioner."},{"location":"reference/files/dir_e0a1cc086a107475864c8fa8ce1ca572/#description","title":"Description","text":"<p>Root partitioners directory. </p> <p>Description</p> <p>This root directory contains all headers related to the partitioner module. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/dir_e7b4090e56732c0d3902af1e1fd5618b/","title":"futures/algorithm","text":"<p>Root algorithms directory. </p>"},{"location":"reference/files/dir_e7b4090e56732c0d3902af1e1fd5618b/#directories","title":"Directories","text":"Directories Description futures/algorithm/compare Root comparisons directory. futures/algorithm/partitioner Root partitioners directory. futures/algorithm/traits Root traits directory."},{"location":"reference/files/dir_e7b4090e56732c0d3902af1e1fd5618b/#files","title":"Files","text":"Files Description futures/algorithm/all_of.hpp <code>all_of</code> algorithm futures/algorithm/any_of.hpp <code>any_of</code> algorithm futures/algorithm/compare.hpp All comparisons. futures/algorithm/count.hpp <code>count</code> algorithm futures/algorithm/count_if.hpp <code>count_if</code> algorithm futures/algorithm/find.hpp <code>find</code> algorithm futures/algorithm/find_if.hpp <code>find_if</code> algorithm futures/algorithm/find_if_not.hpp <code>find_if_not</code> algorithm futures/algorithm/for_each.hpp <code>for_each</code> algorithm futures/algorithm/none_of.hpp <code>none_of</code> algorithm futures/algorithm/partitioner.hpp All partitioners. futures/algorithm/policies.hpp Algorithm execution policies. futures/algorithm/reduce.hpp <code>reduce</code> algorithm futures/algorithm/traits.hpp All algorithm traits."},{"location":"reference/files/dir_e7b4090e56732c0d3902af1e1fd5618b/#description","title":"Description","text":"<p>Root algorithms directory. </p> <p>Description</p> <p>The root directory contains headers related to the algorithm module, including algorithms, partitioners, and traits. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/dir_f487c0495566dbafde251364b6bff68f/","title":"futures/algorithm/traits","text":"<p>Root traits directory. </p>"},{"location":"reference/files/dir_f487c0495566dbafde251364b6bff68f/#files","title":"Files","text":"Files Description futures/algorithm/traits/binary_invoke_algorithm.hpp <code>binary_invoke_algorithm</code> trait futures/algorithm/traits/common_comparison_category.hpp <code>common_comparison_category</code> trait futures/algorithm/traits/is_assignable_from.hpp <code>is_assignable_from</code> trait futures/algorithm/traits/is_bidirectional_iterator.hpp <code>is_bidirectional_iterator</code> trait futures/algorithm/traits/is_constructible_from.hpp <code>is_constructible_from</code> trait futures/algorithm/traits/is_convertible_to.hpp <code>is_convertible_to</code> trait futures/algorithm/traits/is_copyable.hpp <code>is_copyable</code> trait futures/algorithm/traits/is_default_initializable.hpp <code>is_default_initializable</code> trait futures/algorithm/traits/is_derived_from.hpp <code>is_derived_from</code> trait futures/algorithm/traits/is_equality_comparable.hpp <code>is_equality_comparable</code> trait futures/algorithm/traits/is_equality_comparable_with.hpp <code>is_equality_comparable_with</code> trait futures/algorithm/traits/is_forward_iterator.hpp <code>is_forward_iterator</code> trait futures/algorithm/traits/is_incrementable.hpp <code>is_incrementable</code> trait futures/algorithm/traits/is_indirectly_binary_invocable.hpp <code>is_indirectly_binary_invocable</code> trait futures/algorithm/traits/is_indirectly_readable.hpp <code>is_indirectly_readable</code> trait futures/algorithm/traits/is_indirectly_unary_invocable.hpp <code>is_indirectly_unary_invocable</code> trait futures/algorithm/traits/is_input_iterator.hpp <code>is_input_iterator</code> trait futures/algorithm/traits/is_input_or_output_iterator.hpp <code>is_input_or_output_iterator</code> trait futures/algorithm/traits/is_input_range.hpp <code>is_input_range</code> trait futures/algorithm/traits/is_movable.hpp <code>is_movable</code> trait futures/algorithm/traits/is_move_constructible.hpp <code>is_move_constructible</code> trait futures/algorithm/traits/is_random_access_iterator.hpp <code>is_random_access_iterator</code> trait futures/algorithm/traits/is_range.hpp <code>is_range</code> trait futures/algorithm/traits/is_regular.hpp <code>is_regular</code> trait futures/algorithm/traits/is_semiregular.hpp <code>is_semiregular</code> trait futures/algorithm/traits/is_sentinel_for.hpp <code>is_sentinel_for</code> trait futures/algorithm/traits/is_swappable.hpp <code>is_swappable</code> trait futures/algorithm/traits/is_three_way_comparable.hpp <code>is_three_way_comparable</code> trait futures/algorithm/traits/is_three_way_comparable_with.hpp <code>is_three_way_comparable_with</code> trait futures/algorithm/traits/is_totally_ordered.hpp <code>is_totally_ordered</code> trait futures/algorithm/traits/is_totally_ordered_with.hpp <code>is_totally_ordered_with</code> trait futures/algorithm/traits/is_weakly_incrementable.hpp <code>is_weakly_incrementable</code> trait futures/algorithm/traits/iter_difference.hpp <code>iter_difference</code> trait futures/algorithm/traits/iter_reference.hpp <code>iter_reference</code> trait futures/algorithm/traits/iter_rvalue_reference.hpp <code>iter_rvalue_reference</code> trait futures/algorithm/traits/iter_value.hpp <code>iter_value</code> trait futures/algorithm/traits/iterator.hpp <code>iterator</code> trait futures/algorithm/traits/range_value.hpp <code>range_value</code> trait futures/algorithm/traits/remove_cvref.hpp <code>remove_cvref</code> trait futures/algorithm/traits/unary_invoke_algorithm.hpp <code>unary_invoke_algorithm</code> trait futures/algorithm/traits/value_cmp_algorithm.hpp <code>value_cmp_algorithm</code> trait"},{"location":"reference/files/dir_f487c0495566dbafde251364b6bff68f/#description","title":"Description","text":"<p>Root traits directory. </p> <p>Description</p> <p>This root directory contains all headers related to the algorithm traits module. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/equal__to_8hpp/","title":"futures/algorithm/compare/equal_to.hpp","text":"<p>Equality comparison functor. </p> <pre><code>#include &lt;futures/algorithm/compare/equal_to.hpp&gt;\n</code></pre>"},{"location":"reference/files/equal__to_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/equal__to_8hpp/#classes","title":"Classes","text":"Classes Description equal_to A C++17 functor equivalent to the C++20 std::ranges::equal_to.  (struct)"},{"location":"reference/files/equal__to_8hpp/#description","title":"Description","text":"<p>This file defines the equality operator as a functor. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/error_8hpp/","title":"futures/error.hpp","text":"<p>Future error types. </p> <pre><code>#include &lt;futures/error.hpp&gt;\n</code></pre>"},{"location":"reference/files/error_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/error_8hpp/#classes","title":"Classes","text":"Classes Description error Class for errors in the futures library.  (class) broken_promise The state owner got destroyed before the promise has been fulfilled.  (class) future_already_retrieved Attempted to retrieve a unique future twice.  (class) promise_already_satisfied Promise has already been fulfilled.  (class) no_state There is no shared state we can access.  (class) promise_uninitialized The promised hasn't been initialized yet.  (class) packaged_task_uninitialized The packaged task hasn't been initialized yet.  (class) future_uninitialized The future hasn't been initialized yet.  (class) future_deferred Invalid operation on deferred future.  (class)"},{"location":"reference/files/error_8hpp/#description","title":"Description","text":"<p>This file defines error types used by futures types and algorithms. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/execute_8hpp/","title":"futures/executor/execute.hpp","text":"<pre><code>#include &lt;futures/executor/execute.hpp&gt;\n</code></pre>"},{"location":"reference/files/execute_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace. <p>Updated on 2023-01-19</p>"},{"location":"reference/files/executor_8hpp/","title":"futures/executor.hpp","text":"<p>All Executors. </p> <pre><code>#include &lt;futures/executor.hpp&gt;\n</code></pre>"},{"location":"reference/files/executor_8hpp/#description","title":"Description","text":"<p>Use this header to include all functionalities of the executors module at once. In most cases, however, we recommend only including the headers for the functionality you need. Use the reference to identify these files. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/find_8hpp/","title":"futures/algorithm/find.hpp","text":"<p><code>find</code> algorithm </p> <pre><code>#include &lt;futures/algorithm/find.hpp&gt;\n</code></pre>"},{"location":"reference/files/find_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/find_8hpp/#classes","title":"Classes","text":"Classes Description find_functor Functor representing the overloads for the find function.  (class)"},{"location":"reference/files/find_8hpp/#description","title":"Description","text":"<p>This file defines the functor and callable for a parallel version of the <code>find</code> algorithm. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/find__if_8hpp/","title":"futures/algorithm/find_if.hpp","text":"<p><code>find_if</code> algorithm </p> <pre><code>#include &lt;futures/algorithm/find_if.hpp&gt;\n</code></pre>"},{"location":"reference/files/find__if_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/find__if_8hpp/#classes","title":"Classes","text":"Classes Description find_if_functor Functor representing the overloads for the find_if function.  (class)"},{"location":"reference/files/find__if_8hpp/#description","title":"Description","text":"<p>This file defines the functor and callable for a parallel version of the <code>find_if</code> algorithm. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/find__if__not_8hpp/","title":"futures/algorithm/find_if_not.hpp","text":"<p><code>find_if_not</code> algorithm </p> <pre><code>#include &lt;futures/algorithm/find_if_not.hpp&gt;\n</code></pre>"},{"location":"reference/files/find__if__not_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/find__if__not_8hpp/#classes","title":"Classes","text":"Classes Description find_if_not_functor Functor representing the overloads for the find_if_not function.  (class)"},{"location":"reference/files/find__if__not_8hpp/#description","title":"Description","text":"<p>This file defines the functor and callable for a parallel version of the <code>find_if_not</code> algorithm. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/for__each_8hpp/","title":"futures/algorithm/for_each.hpp","text":"<p><code>for_each</code> algorithm </p> <pre><code>#include &lt;futures/algorithm/for_each.hpp&gt;\n</code></pre>"},{"location":"reference/files/for__each_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/for__each_8hpp/#classes","title":"Classes","text":"Classes Description for_each_functor Functor representing the overloads for the for_each function.  (class)"},{"location":"reference/files/for__each_8hpp/#description","title":"Description","text":"<p>This file defines the functor and callable for a parallel version of the <code>for_each</code> algorithm. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/future_8hpp/","title":"futures/future.hpp","text":"<p>Future types. </p> <pre><code>#include &lt;futures/future.hpp&gt;\n</code></pre>"},{"location":"reference/files/future_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/future_8hpp/#classes","title":"Classes","text":"Classes Description basic_future A basic future type with custom features.  (class)"},{"location":"reference/files/future_8hpp/#description","title":"Description","text":"<p>These future types support extensions such as:</p> <ul> <li>continuations</li> <li>stop tokens</li> <li>deferred tasks</li> </ul> <p>Many of the ideas for these functions are based on:</p> <ul> <li>extensions for concurrency (ISO/IEC TS 19571:2016)</li> <li>async++</li> <li>continuable</li> <li>TBB</li> </ul> <p>However, we use concepts and the ASIO proposed standard executors (P0443r13, P1348r0, and P1393r0) to allow for better interoperability with the C++ standard and other future types, such as <code>std::future</code> and <code>boost::future</code>.</p> <p>A few other relevant differences are:</p> <ul> <li>the <code>async</code> function can accept any executor</li> <li>the <code>async</code> function uses a reasonable dynamic thread pool by default</li> <li>future-concepts allows new future classes with extensions</li> <li>algorithms can be reused with other future types</li> <li>a cancellable future class is provided for more sensitive use cases</li> <li>the API can be updated as the standard gets updated</li> <li>standard parallel algorithms are provided with the executors</li> </ul> <p>This interoperability comes at a price for continuations, as we might need to poll for <code>when_all</code>/<code>when_any</code>/<code>then</code> events, because <code>std::future</code> does not support internal continuations.</p> <p>A number of heuristics to avoid polling for <code>when_all</code>/<code>when_any</code>/<code>then</code>:</p> <ul> <li>future-like classes that satisfy the <code>is_future</code> concept can be mixed</li> <li><code>when_all</code> (or <code>operator&amp;&amp;</code>) returns a <code>when_all_future</code> class, which does not create a new <code>future</code> at all and can check directly if futures are ready</li> <li><code>when_any</code> (or <code>operator||</code>) returns a <code>when_any_future</code> class, which implements a number of heuristics to avoid polling, such as limited polling time, increased pooling intervals, and only launching the necessary continuation futures for long tasks.</li> <li><code>then</code> (or <code>operator&gt;&gt;</code>) returns a new future object that sleeps while the previous future isn't ready</li> <li>when the standard supports that, this approach based on concepts also serve as extension points to allow for these proxy classes to change their behavior to some other algorithm that makes more sense for futures that support continuations, cancellation, progress, and queries.</li> <li>the concepts allow for all possible future types to interoperate.</li> </ul> <p>Note that although <code>when_all</code> always takes longer than <code>when_any</code>, <code>when_any</code> involves a number of heuristics that influence its performance.</p> <p>See Also: </p> <ul> <li><code>std::experimental::concurrency</code></li> <li>https://think-async.com/Asio/asio-1.18.2/doc/asio/std_executors.html</li> <li>https://github.com/Amanieu/asyncplusplus</li> </ul> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/future__options_8hpp/","title":"futures/future_options.hpp","text":"<p>Future options. </p> <pre><code>#include &lt;futures/future_options.hpp&gt;\n</code></pre>"},{"location":"reference/files/future__options_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/future__options_8hpp/#description","title":"Description","text":"<p>This file defines objects we can use to determine the compile-time options for a future type. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/future__options__args_8hpp/","title":"futures/future_options_args.hpp","text":"<p>Arguments for future options. </p> <pre><code>#include &lt;futures/future_options_args.hpp&gt;\n</code></pre>"},{"location":"reference/files/future__options__args_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/future__options__args_8hpp/#classes","title":"Classes","text":"Classes Description executor_opt Future option to identify the executor to be used by a future.  (struct) continuable_opt Future option to determine the future is continuable.  (struct) stoppable_opt Future option to determine the future is stoppable.  (struct) always_detached_opt Future option to determine the future is always_detached.  (struct) always_deferred_opt Future option to determine the future is always_deferred.  (struct) deferred_function_opt Type of the deferred function.  (struct) shared_opt Future option to determine the future is shared.  (struct)"},{"location":"reference/files/future__options__args_8hpp/#description","title":"Description","text":"<p>This file defines objects arguments we can use in future options to determine the compile-time properties of a future type. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/future__status_8hpp/","title":"futures/future_status.hpp","text":"<p>Future types. </p> <pre><code>#include &lt;futures/future_status.hpp&gt;\n</code></pre>"},{"location":"reference/files/future__status_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/future__status_8hpp/#description","title":"Description","text":"<p>Define future status enumeration </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/future__value_8hpp/","title":"futures/traits/future_value.hpp","text":"<p><code>future_value</code> trait </p> <pre><code>#include &lt;futures/traits/future_value.hpp&gt;\n</code></pre>"},{"location":"reference/files/future__value_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/future__value_8hpp/#description","title":"Description","text":"<p>This file defines the <code>future_value</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/futures_8hpp/","title":"futures/futures.hpp","text":"<p>All functionality in the library. </p> <pre><code>#include &lt;futures/futures.hpp&gt;\n</code></pre>"},{"location":"reference/files/futures_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/futures_8hpp/#description","title":"Description","text":"<p>Use this header to include all the library functionalities at once. In most cases, however, we recommend only including the headers for the functionality you need. Use the reference to identify these files. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/greater_8hpp/","title":"futures/algorithm/compare/greater.hpp","text":"<p>Greater comparison functor. </p> <pre><code>#include &lt;futures/algorithm/compare/greater.hpp&gt;\n</code></pre>"},{"location":"reference/files/greater_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/greater_8hpp/#classes","title":"Classes","text":"Classes Description greater A C++17 functor equivalent to the C++20 std::ranges::greater.  (struct)"},{"location":"reference/files/greater_8hpp/#description","title":"Description","text":"<p>This file defines the greater operator as a functor. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/greater__equal_8hpp/","title":"futures/algorithm/compare/greater_equal.hpp","text":"<p>Greater or equal comparison functor. </p> <pre><code>#include &lt;futures/algorithm/compare/greater_equal.hpp&gt;\n</code></pre>"},{"location":"reference/files/greater__equal_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/greater__equal_8hpp/#classes","title":"Classes","text":"Classes Description greater_equal A C++17 functor equivalent to the C++20 std::ranges::greater_equal.  (struct)"},{"location":"reference/files/greater__equal_8hpp/#description","title":"Description","text":"<p>This file defines the greater or equal operator as a functor. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/halve__partitioner_8hpp/","title":"futures/algorithm/partitioner/halve_partitioner.hpp","text":"<p>Halve Partitioner. </p> <pre><code>#include &lt;futures/algorithm/partitioner/halve_partitioner.hpp&gt;\n</code></pre>"},{"location":"reference/files/halve__partitioner_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/halve__partitioner_8hpp/#classes","title":"Classes","text":"Classes Description halve_partitioner A partitioner that always splits the problem in half.  (class)"},{"location":"reference/files/halve__partitioner_8hpp/#description","title":"Description","text":"<p>Define the halve_partitioner class </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/hardware__concurrency_8hpp/","title":"futures/executor/hardware_concurrency.hpp","text":"<p>Hardware concurrency function. </p> <pre><code>#include &lt;futures/executor/hardware_concurrency.hpp&gt;\n</code></pre>"},{"location":"reference/files/hardware__concurrency_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/hardware__concurrency_8hpp/#description","title":"Description","text":"<p>This file defines the hardware_concurrency used in futures. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/has__executor_8hpp/","title":"futures/traits/has_executor.hpp","text":"<p><code>has_executor</code> trait </p> <pre><code>#include &lt;futures/traits/has_executor.hpp&gt;\n</code></pre>"},{"location":"reference/files/has__executor_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/has__executor_8hpp/#classes","title":"Classes","text":"Classes Description has_executor Determine if a future type has an executor.  (struct)"},{"location":"reference/files/has__executor_8hpp/#description","title":"Description","text":"<p>This file defines the <code>has_executor</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/has__ready__notifier_8hpp/","title":"futures/traits/has_ready_notifier.hpp","text":"<p><code>has_ready_notifier</code> trait </p> <pre><code>#include &lt;futures/traits/has_ready_notifier.hpp&gt;\n</code></pre>"},{"location":"reference/files/has__ready__notifier_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/has__ready__notifier_8hpp/#classes","title":"Classes","text":"Classes Description has_ready_notifier Customization point to determine if a type has a ready notifier.  (struct)"},{"location":"reference/files/has__ready__notifier_8hpp/#description","title":"Description","text":"<p>This file defines the <code>has_ready_notifier</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/has__stop__token_8hpp/","title":"futures/traits/has_stop_token.hpp","text":"<p><code>has_stop_token</code> trait </p> <pre><code>#include &lt;futures/traits/has_stop_token.hpp&gt;\n</code></pre>"},{"location":"reference/files/has__stop__token_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/has__stop__token_8hpp/#description","title":"Description","text":"<p>This file defines the has_stop_token trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/inline__executor_8hpp/","title":"futures/executor/inline_executor.hpp","text":"<p>Inline executor. </p> <pre><code>#include &lt;futures/executor/inline_executor.hpp&gt;\n</code></pre>"},{"location":"reference/files/inline__executor_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/inline__executor_8hpp/#classes","title":"Classes","text":"Classes Description inline_executor An executor that runs anything inline.  (class)"},{"location":"reference/files/inline__executor_8hpp/#description","title":"Description","text":"<p>This file defines the inline executor, which executes tasks synchronously. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__always__deferred_8hpp/","title":"futures/traits/is_always_deferred.hpp","text":"<p><code>is_always_deferred</code> trait </p> <pre><code>#include &lt;futures/traits/is_always_deferred.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__always__deferred_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__always__deferred_8hpp/#classes","title":"Classes","text":"Classes Description is_always_deferred Customization point to define a future as always deferred.  (struct)"},{"location":"reference/files/is__always__deferred_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_always_deferred</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__assignable__from_8hpp/","title":"futures/algorithm/traits/is_assignable_from.hpp","text":"<p><code>is_assignable_from</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_assignable_from.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__assignable__from_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__assignable__from_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_assignable_from</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__bidirectional__iterator_8hpp/","title":"futures/algorithm/traits/is_bidirectional_iterator.hpp","text":"<p><code>is_bidirectional_iterator</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_bidirectional_iterator.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__bidirectional__iterator_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__bidirectional__iterator_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_bidirectional_iterator</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__constructible__from_8hpp/","title":"futures/algorithm/traits/is_constructible_from.hpp","text":"<p><code>is_constructible_from</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_constructible_from.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__constructible__from_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__constructible__from_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_constructible_from</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__continuable_8hpp/","title":"futures/traits/is_continuable.hpp","text":"<p><code>is_continuable</code> trait </p> <pre><code>#include &lt;futures/traits/is_continuable.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__continuable_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__continuable_8hpp/#classes","title":"Classes","text":"Classes Description is_continuable Customization point to define future as supporting continuations.  (struct)"},{"location":"reference/files/is__continuable_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_continuable</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__convertible__to_8hpp/","title":"futures/algorithm/traits/is_convertible_to.hpp","text":"<p><code>is_convertible_to</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_convertible_to.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__convertible__to_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__convertible__to_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_convertible_to</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__copyable_8hpp/","title":"futures/algorithm/traits/is_copyable.hpp","text":"<p><code>is_copyable</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_copyable.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__copyable_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__copyable_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_copyable</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__default__initializable_8hpp/","title":"futures/algorithm/traits/is_default_initializable.hpp","text":"<p><code>is_default_initializable</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_default_initializable.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__default__initializable_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__default__initializable_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_default_initializable</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__derived__from_8hpp/","title":"futures/algorithm/traits/is_derived_from.hpp","text":"<p><code>is_derived_from</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_derived_from.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__derived__from_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__derived__from_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_derived_from</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__equality__comparable_8hpp/","title":"futures/algorithm/traits/is_equality_comparable.hpp","text":"<p><code>is_equality_comparable</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_equality_comparable.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__equality__comparable_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__equality__comparable_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_equality_comparable</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__equality__comparable__with_8hpp/","title":"futures/algorithm/traits/is_equality_comparable_with.hpp","text":"<p><code>is_equality_comparable_with</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_equality_comparable_with.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__equality__comparable__with_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__equality__comparable__with_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_equality_comparable_with</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__execution__context_8hpp/","title":"futures/executor/is_execution_context.hpp","text":"<p>Execution context traits. </p> <pre><code>#include &lt;futures/executor/is_execution_context.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__execution__context_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__execution__context_8hpp/#description","title":"Description","text":"<p>This file defines the trait to identify whether a type represents an executor. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__executor_8hpp/","title":"futures/executor/is_executor.hpp","text":"<p>Executor traits. </p> <pre><code>#include &lt;futures/executor/is_executor.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__executor_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__executor_8hpp/#description","title":"Description","text":"<p>This file defines the trait to identify whether a type represents an executor. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__forward__iterator_8hpp/","title":"futures/algorithm/traits/is_forward_iterator.hpp","text":"<p><code>is_forward_iterator</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_forward_iterator.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__forward__iterator_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__forward__iterator_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_forward_iterator</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__future__like_8hpp/","title":"futures/traits/is_future_like.hpp","text":"<p><code>is_future_like</code> trait </p> <pre><code>#include &lt;futures/traits/is_future_like.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__future__like_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__future__like_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_future_like</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__incrementable_8hpp/","title":"futures/algorithm/traits/is_incrementable.hpp","text":"<p><code>is_incrementable</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_incrementable.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__incrementable_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__incrementable_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_incrementable</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__indirectly__binary__invocable_8hpp/","title":"futures/algorithm/traits/is_indirectly_binary_invocable.hpp","text":"<p><code>is_indirectly_binary_invocable</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_indirectly_binary_invocable.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__indirectly__binary__invocable_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__indirectly__binary__invocable_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_indirectly_binary_invocable</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__indirectly__readable_8hpp/","title":"futures/algorithm/traits/is_indirectly_readable.hpp","text":"<p><code>is_indirectly_readable</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_indirectly_readable.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__indirectly__readable_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__indirectly__readable_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_indirectly_readable</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__indirectly__unary__invocable_8hpp/","title":"futures/algorithm/traits/is_indirectly_unary_invocable.hpp","text":"<p><code>is_indirectly_unary_invocable</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_indirectly_unary_invocable.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__indirectly__unary__invocable_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__indirectly__unary__invocable_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_indirectly_unary_invocable</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__input__iterator_8hpp/","title":"futures/algorithm/traits/is_input_iterator.hpp","text":"<p><code>is_input_iterator</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_input_iterator.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__input__iterator_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__input__iterator_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_input_iterator</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__input__or__output__iterator_8hpp/","title":"futures/algorithm/traits/is_input_or_output_iterator.hpp","text":"<p><code>is_input_or_output_iterator</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_input_or_output_iterator.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__input__or__output__iterator_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__input__or__output__iterator_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_input_or_output_iterator</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__input__range_8hpp/","title":"futures/algorithm/traits/is_input_range.hpp","text":"<p><code>is_input_range</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_input_range.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__input__range_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__input__range_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_input_range</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__movable_8hpp/","title":"futures/algorithm/traits/is_movable.hpp","text":"<p><code>is_movable</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_movable.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__movable_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__movable_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_movable</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__move__constructible_8hpp/","title":"futures/algorithm/traits/is_move_constructible.hpp","text":"<p><code>is_move_constructible</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_move_constructible.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__move__constructible_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__move__constructible_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_move_constructible</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__random__access__iterator_8hpp/","title":"futures/algorithm/traits/is_random_access_iterator.hpp","text":"<p><code>is_random_access_iterator</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_random_access_iterator.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__random__access__iterator_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__random__access__iterator_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_random_access_iterator</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__range_8hpp/","title":"futures/algorithm/traits/is_range.hpp","text":"<p><code>is_range</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_range.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__range_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__range_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_range</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__ready_8hpp/","title":"futures/is_ready.hpp","text":"<p>Free functions to check whether a future is ready. </p> <pre><code>#include &lt;futures/is_ready.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__ready_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__ready_8hpp/#description","title":"Description","text":"<p>This file defines free functions to check whether any future type is ready. This is particularly useful for future types that do not offer the <code>is_ready()</code> member function. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__regular_8hpp/","title":"futures/algorithm/traits/is_regular.hpp","text":"<p><code>is_regular</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_regular.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__regular_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__regular_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_regular</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__semiregular_8hpp/","title":"futures/algorithm/traits/is_semiregular.hpp","text":"<p><code>is_semiregular</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_semiregular.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__semiregular_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__semiregular_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_semiregular</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__sentinel__for_8hpp/","title":"futures/algorithm/traits/is_sentinel_for.hpp","text":"<p><code>is_sentinel_for</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_sentinel_for.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__sentinel__for_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__sentinel__for_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_sentinel_for</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__shared__future_8hpp/","title":"futures/traits/is_shared_future.hpp","text":"<p><code>is_shared_future</code> trait </p> <pre><code>#include &lt;futures/traits/is_shared_future.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__shared__future_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__shared__future_8hpp/#classes","title":"Classes","text":"Classes Description is_shared_future Customization point to determine if a type is a shared future type.  (struct)"},{"location":"reference/files/is__shared__future_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_shared_future</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__stoppable_8hpp/","title":"futures/traits/is_stoppable.hpp","text":"<p><code>is_stoppable</code> trait </p> <pre><code>#include &lt;futures/traits/is_stoppable.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__stoppable_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__stoppable_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_stoppable</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__swappable_8hpp/","title":"futures/algorithm/traits/is_swappable.hpp","text":"<p><code>is_swappable</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_swappable.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__swappable_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__swappable_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_swappable</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__three__way__comparable_8hpp/","title":"futures/algorithm/traits/is_three_way_comparable.hpp","text":"<p><code>is_three_way_comparable</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_three_way_comparable.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__three__way__comparable_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__three__way__comparable_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_three_way_comparable</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__three__way__comparable__with_8hpp/","title":"futures/algorithm/traits/is_three_way_comparable_with.hpp","text":"<p><code>is_three_way_comparable_with</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_three_way_comparable_with.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__three__way__comparable__with_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__three__way__comparable__with_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_three_way_comparable_with</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__totally__ordered_8hpp/","title":"futures/algorithm/traits/is_totally_ordered.hpp","text":"<p><code>is_totally_ordered</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_totally_ordered.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__totally__ordered_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__totally__ordered_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_totally_ordered</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__totally__ordered__with_8hpp/","title":"futures/algorithm/traits/is_totally_ordered_with.hpp","text":"<p><code>is_totally_ordered_with</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_totally_ordered_with.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__totally__ordered__with_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__totally__ordered__with_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_totally_ordered_with</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/is__weakly__incrementable_8hpp/","title":"futures/algorithm/traits/is_weakly_incrementable.hpp","text":"<p><code>is_weakly_incrementable</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/is_weakly_incrementable.hpp&gt;\n</code></pre>"},{"location":"reference/files/is__weakly__incrementable_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/is__weakly__incrementable_8hpp/#description","title":"Description","text":"<p>This file defines the <code>is_weakly_incrementable</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/iter__difference_8hpp/","title":"futures/algorithm/traits/iter_difference.hpp","text":"<p><code>iter_difference</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/iter_difference.hpp&gt;\n</code></pre>"},{"location":"reference/files/iter__difference_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/iter__difference_8hpp/#description","title":"Description","text":"<p>This file defines the <code>iter_difference</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/iter__reference_8hpp/","title":"futures/algorithm/traits/iter_reference.hpp","text":"<p><code>iter_reference</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/iter_reference.hpp&gt;\n</code></pre>"},{"location":"reference/files/iter__reference_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/iter__reference_8hpp/#description","title":"Description","text":"<p>This file defines the <code>iter_reference</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/iter__rvalue__reference_8hpp/","title":"futures/algorithm/traits/iter_rvalue_reference.hpp","text":"<p><code>iter_rvalue_reference</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/iter_rvalue_reference.hpp&gt;\n</code></pre>"},{"location":"reference/files/iter__rvalue__reference_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/iter__rvalue__reference_8hpp/#description","title":"Description","text":"<p>This file defines the <code>iter_rvalue_reference</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/iter__value_8hpp/","title":"futures/algorithm/traits/iter_value.hpp","text":"<p><code>iter_value</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/iter_value.hpp&gt;\n</code></pre>"},{"location":"reference/files/iter__value_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/iter__value_8hpp/#description","title":"Description","text":"<p>This file defines the <code>iter_value</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/iterator_8hpp/","title":"futures/algorithm/traits/iterator.hpp","text":"<p><code>iterator</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/iterator.hpp&gt;\n</code></pre>"},{"location":"reference/files/iterator_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/iterator_8hpp/#description","title":"Description","text":"<p>This file defines the <code>iterator</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/launch_8hpp/","title":"futures/launch.hpp","text":"<p>Functions to launch new tasks. </p> <pre><code>#include &lt;futures/launch.hpp&gt;\n</code></pre>"},{"location":"reference/files/launch_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/launch_8hpp/#description","title":"Description","text":"<p>This file defines functions to launch or schedule new tasks and return future objects as handles to the operation result. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/less_8hpp/","title":"futures/algorithm/compare/less.hpp","text":"<p>Less comparison functor. </p> <pre><code>#include &lt;futures/algorithm/compare/less.hpp&gt;\n</code></pre>"},{"location":"reference/files/less_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/less_8hpp/#classes","title":"Classes","text":"Classes Description less A C++17 functor equivalent to the C++20 std::ranges::less.  (struct)"},{"location":"reference/files/less_8hpp/#description","title":"Description","text":"<p>This file defines the less operator as a functor. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/less__equal_8hpp/","title":"futures/algorithm/compare/less_equal.hpp","text":"<p>Less or equal comparison functor. </p> <pre><code>#include &lt;futures/algorithm/compare/less_equal.hpp&gt;\n</code></pre>"},{"location":"reference/files/less__equal_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/less__equal_8hpp/#classes","title":"Classes","text":"Classes Description less_equal A C++17 functor equivalent to the C++20 std::ranges::less_equal.  (struct)"},{"location":"reference/files/less__equal_8hpp/#description","title":"Description","text":"<p>This file defines the less or equal operator as a functor. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/make__ready__future_8hpp/","title":"futures/adaptor/make_ready_future.hpp","text":"<p>Make future object with value. </p> <pre><code>#include &lt;futures/adaptor/make_ready_future.hpp&gt;\n</code></pre>"},{"location":"reference/files/make__ready__future_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/make__ready__future_8hpp/#description","title":"Description","text":"<p>This file defines the functions to create a future object whose value is already set. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/new__thread__executor_8hpp/","title":"futures/executor/new_thread_executor.hpp","text":"<p>New thread executor. </p> <pre><code>#include &lt;futures/executor/new_thread_executor.hpp&gt;\n</code></pre>"},{"location":"reference/files/new__thread__executor_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/new__thread__executor_8hpp/#classes","title":"Classes","text":"Classes Description new_thread_executor An executor that runs anything in a new thread, like std::async does.  (class)"},{"location":"reference/files/new__thread__executor_8hpp/#description","title":"Description","text":"<p>This file defines the new thread executor, which creates a new thread every time a new task is launched. This is somewhat equivalent to executing tasks with C++11 <code>std::async</code>. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/none__of_8hpp/","title":"futures/algorithm/none_of.hpp","text":"<p><code>none_of</code> algorithm </p> <pre><code>#include &lt;futures/algorithm/none_of.hpp&gt;\n</code></pre>"},{"location":"reference/files/none__of_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/none__of_8hpp/#classes","title":"Classes","text":"Classes Description none_of_functor Functor representing the overloads for the none_of function.  (class)"},{"location":"reference/files/none__of_8hpp/#description","title":"Description","text":"<p>This file defines the functor and callable for a parallel version of the <code>none_of</code> algorithm. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/not__equal__to_8hpp/","title":"futures/algorithm/compare/not_equal_to.hpp","text":"<p>Not equal comparison functor. </p> <pre><code>#include &lt;futures/algorithm/compare/not_equal_to.hpp&gt;\n</code></pre>"},{"location":"reference/files/not__equal__to_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/not__equal__to_8hpp/#classes","title":"Classes","text":"Classes Description not_equal_to A C++17 functor equivalent to the C++20 std::ranges::not_equal_to.  (struct)"},{"location":"reference/files/not__equal__to_8hpp/#description","title":"Description","text":"<p>This file defines the not equal operator as a functor. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/packaged__task_8hpp/","title":"futures/packaged_task.hpp","text":"<p>Packaged task as a promise. </p> <pre><code>#include &lt;futures/packaged_task.hpp&gt;\n</code></pre>"},{"location":"reference/files/packaged__task_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/packaged__task_8hpp/#classes","title":"Classes","text":"Classes Description packaged_task&lt; R(Args...), Options &gt; A packaged task that sets a shared state when done.  (class)"},{"location":"reference/files/packaged__task_8hpp/#description","title":"Description","text":"<p>This file defines packaged tasks we can use to represent a task and a promise. These objects can be used to set promises manually. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/partial__ordering_8hpp/","title":"futures/algorithm/compare/partial_ordering.hpp","text":"<p>Result of partial ordering comparison. </p> <pre><code>#include &lt;futures/algorithm/compare/partial_ordering.hpp&gt;\n</code></pre>"},{"location":"reference/files/partial__ordering_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/partial__ordering_8hpp/#description","title":"Description","text":"<p>This file defines the partial ordering type. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/partitioner_8hpp/","title":"futures/algorithm/partitioner.hpp","text":"<p>All partitioners. </p> <pre><code>#include &lt;futures/algorithm/partitioner.hpp&gt;\n</code></pre>"},{"location":"reference/files/partitioner_8hpp/#description","title":"Description","text":"<p>Use this header to include all functionalities of the partitioners module at once. In most cases, however, we recommend only including the headers for the functionality you need. Use the reference to identify these files. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/partitioner__for_8hpp/","title":"futures/algorithm/partitioner/partitioner_for.hpp","text":"<p>Concepts and traits for partitioners. </p> <pre><code>#include &lt;futures/algorithm/partitioner/partitioner_for.hpp&gt;\n</code></pre>"},{"location":"reference/files/partitioner__for_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/partitioner__for_8hpp/#description","title":"Description","text":"<p>A partitioner is a light callable object that takes a pair of iterators and returns the middle of the sequence. In particular, it returns an iterator <code>middle</code> that forms a subrange <code>first</code>/<code>middle</code> which the algorithm should solve inline before scheduling the subrange <code>middle</code>/<code>last</code> in the executor. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/policies_8hpp/","title":"futures/algorithm/policies.hpp","text":"<p>Algorithm execution policies. </p> <pre><code>#include &lt;futures/algorithm/policies.hpp&gt;\n</code></pre>"},{"location":"reference/files/policies_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/policies_8hpp/#classes","title":"Classes","text":"Classes Description is_execution_policy Determines whether T is a standard or implementation-defined execution policy type.  (struct)"},{"location":"reference/files/policies_8hpp/#description","title":"Description","text":"<p>This file defines the policies we can use to determine the appropriate executor for algorithms.</p> <p>The traits help us generate auxiliary algorithm overloads This is somewhat similar to the pattern of traits and algorithms for ranges and views It allows us to get algorithm overloads for free, including default inference of the best execution policies</p> <p>See Also: </p> <ul> <li><code>std::ranges::transform_view</code></li> <li><code>std::ranges::view</code></li> </ul> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/promise_8hpp/","title":"futures/promise.hpp","text":"<p>Promises. </p> <pre><code>#include &lt;futures/promise.hpp&gt;\n</code></pre>"},{"location":"reference/files/promise_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/promise_8hpp/#classes","title":"Classes","text":"Classes Description promise_base Common members to promises of all types.  (class) promise A shared state that will later be acquired by a future type.  (class)"},{"location":"reference/files/promise_8hpp/#description","title":"Description","text":"<p>This file defines promises we can use to represent the completion of a task through a promise. These objects can be used to finalize an asynchnous task manually. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/range__value_8hpp/","title":"futures/algorithm/traits/range_value.hpp","text":"<p><code>range_value</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/range_value.hpp&gt;\n</code></pre>"},{"location":"reference/files/range__value_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/range__value_8hpp/#description","title":"Description","text":"<p>This file defines the <code>range_value</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/reduce_8hpp/","title":"futures/algorithm/reduce.hpp","text":"<p><code>reduce</code> algorithm </p> <pre><code>#include &lt;futures/algorithm/reduce.hpp&gt;\n</code></pre>"},{"location":"reference/files/reduce_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/reduce_8hpp/#classes","title":"Classes","text":"Classes Description reduce_functor Functor representing the overloads for the reduce function.  (class)"},{"location":"reference/files/reduce_8hpp/#description","title":"Description","text":"<p>This file defines the functor and callable for a parallel version of the <code>reduce</code> algorithm. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/remove__cvref_8hpp/","title":"futures/algorithm/traits/remove_cvref.hpp","text":"<p><code>remove_cvref</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/remove_cvref.hpp&gt;\n</code></pre>"},{"location":"reference/files/remove__cvref_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/remove__cvref_8hpp/#description","title":"Description","text":"<p>This file defines the <code>remove_cvref</code> trait. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/stop__token_8hpp/","title":"futures/stop_token.hpp","text":"<p>Stop tokens. </p> <pre><code>#include &lt;futures/stop_token.hpp&gt;\n</code></pre>"},{"location":"reference/files/stop__token_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/stop__token_8hpp/#classes","title":"Classes","text":"Classes Description nostopstate_t Empty struct to initialize a stop_source without a shared stop state.  (struct) stop_token Token to check if a stop request has been made.  (class) stop_source Object used to issue a stop request.  (class)"},{"location":"reference/files/stop__token_8hpp/#description","title":"Description","text":"<p>This header contains is an adapted version of std::stop_token for futures rather than threads.</p> <p>The main difference in this implementation is 1) the reference counter does not distinguish between tokens and sources, and 2) there is no stop_callback.</p> <p>The API was initially adapted from Baker Josuttis' reference implementation for C++20:</p> <p>Although the <code>std::future</code> class is obviously different from <code>std::jthread</code>, this <code>stop_token</code> is not different from std::stop_token. The main goal here is just to provide a stop source in C++17. In the future, we might replace this with an alias to a C++20 std::stop_token. </p> <p>See Also: https://github.com/josuttis/jthread</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/strong__ordering_8hpp/","title":"futures/algorithm/compare/strong_ordering.hpp","text":"<pre><code>#include &lt;futures/algorithm/compare/strong_ordering.hpp&gt;\n</code></pre>"},{"location":"reference/files/strong__ordering_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace. <p>Updated on 2023-01-19</p>"},{"location":"reference/files/then_8hpp/","title":"futures/adaptor/then.hpp","text":"<p>Continuation adaptors. </p> <pre><code>#include &lt;futures/adaptor/then.hpp&gt;\n</code></pre>"},{"location":"reference/files/then_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/then_8hpp/#description","title":"Description","text":"<p>This file defines adaptors to create new futures as continuations to previous tasks. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/thread__partitioner_8hpp/","title":"futures/algorithm/partitioner/thread_partitioner.hpp","text":"<p>Thread Partitioner. </p> <pre><code>#include &lt;futures/algorithm/partitioner/thread_partitioner.hpp&gt;\n</code></pre>"},{"location":"reference/files/thread__partitioner_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/thread__partitioner_8hpp/#classes","title":"Classes","text":"Classes Description thread_partitioner A partitioner that always splits the problem when moving to new threads.  (class)"},{"location":"reference/files/thread__partitioner_8hpp/#description","title":"Description","text":"<p>Define the thread_partitioner class </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/thread__pool_8hpp/","title":"futures/executor/thread_pool.hpp","text":"<p>Inline executor. </p> <pre><code>#include &lt;futures/executor/thread_pool.hpp&gt;\n</code></pre>"},{"location":"reference/files/thread__pool_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/thread__pool_8hpp/#classes","title":"Classes","text":"Classes Description thread_pool A thread pool with the specified number of threads.  (class) executor_type A executor that sends tasks to the thread pool.  (class)"},{"location":"reference/files/thread__pool_8hpp/#description","title":"Description","text":"<p>This file defines a thread pool and its executor. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/throw_8hpp/","title":"futures/throw.hpp","text":"<p>Functions to handle exceptions. </p> <pre><code>#include &lt;futures/throw.hpp&gt;\n</code></pre>"},{"location":"reference/files/throw_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/throw_8hpp/#description","title":"Description","text":"<p>This file defines free functions to handle and throw library exceptions. The default behavior is throwing all exceptions. If exception handling is disabled, the library might call terminate or call a user defined function. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/traits_8hpp/","title":"futures/traits.hpp","text":"<p>All Futures Traits. </p> <pre><code>#include &lt;futures/traits.hpp&gt;\n</code></pre>"},{"location":"reference/files/traits_8hpp/#description","title":"Description","text":"<p>Use this header to include all functionalities of the futures traits module at once. In most cases, however, we recommend only including the headers for the functionality you need. Use the reference to identify these files. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/unary__invoke__algorithm_8hpp/","title":"futures/algorithm/traits/unary_invoke_algorithm.hpp","text":"<p><code>unary_invoke_algorithm</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/unary_invoke_algorithm.hpp&gt;\n</code></pre>"},{"location":"reference/files/unary__invoke__algorithm_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/unary__invoke__algorithm_8hpp/#classes","title":"Classes","text":"Classes Description unary_invoke_algorithm_functor Overloads for unary invoke algorithms.  (class)"},{"location":"reference/files/unary__invoke__algorithm_8hpp/#description","title":"Description","text":"<p>This file defines the <code>unary_invoke_algorithm</code> trait.</p> <p>The traits help us generate auxiliary algorithm overloads This is somewhat similar to the pattern of traits and algorithms for ranges and views It allows us to get algorithm overloads for free, including default inference of the best execution policies</p> <p>See Also: </p> <ul> <li><code>std::ranges::transform_view</code></li> <li><code>std::ranges::view</code></li> </ul> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/value__cmp__algorithm_8hpp/","title":"futures/algorithm/traits/value_cmp_algorithm.hpp","text":"<p><code>value_cmp_algorithm</code> trait </p> <pre><code>#include &lt;futures/algorithm/traits/value_cmp_algorithm.hpp&gt;\n</code></pre>"},{"location":"reference/files/value__cmp__algorithm_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/value__cmp__algorithm_8hpp/#classes","title":"Classes","text":"Classes Description value_cmp_algorithm_functor Value-compare algorithm overloads.  (class)"},{"location":"reference/files/value__cmp__algorithm_8hpp/#description","title":"Description","text":"<p>This file defines the <code>value_cmp_algorithm</code> trait representing a category of algorithms.</p> <p>The traits help us generate auxiliary algorithm overloads This is somewhat similar to the pattern of traits and algorithms for ranges and views It allows us to get algorithm overloads for free, including default inference of the best execution policies</p> <p>See Also: </p> <ul> <li><code>std::ranges::transform_view</code></li> <li><code>std::ranges::view</code></li> </ul> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/wait__for__all_8hpp/","title":"futures/wait_for_all.hpp","text":"<p>Functions to wait for all futures in a sequence. </p> <pre><code>#include &lt;futures/wait_for_all.hpp&gt;\n</code></pre>"},{"location":"reference/files/wait__for__all_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/wait__for__all_8hpp/#description","title":"Description","text":"<p>This file defines functions to wait for all futures in a sequence of futures. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/wait__for__any_8hpp/","title":"futures/wait_for_any.hpp","text":"<p>Functions to wait for any futures in a sequence. </p> <pre><code>#include &lt;futures/wait_for_any.hpp&gt;\n</code></pre>"},{"location":"reference/files/wait__for__any_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/wait__for__any_8hpp/#description","title":"Description","text":"<p>This file defines functions to wait for any future in a sequence of futures. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/weak__ordering_8hpp/","title":"futures/algorithm/compare/weak_ordering.hpp","text":"<pre><code>#include &lt;futures/algorithm/compare/weak_ordering.hpp&gt;\n</code></pre>"},{"location":"reference/files/weak__ordering_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace. <p>Updated on 2023-01-19</p>"},{"location":"reference/files/when__all_8hpp/","title":"futures/adaptor/when_all.hpp","text":"<p>Conjunction adaptors. </p> <pre><code>#include &lt;futures/adaptor/when_all.hpp&gt;\n</code></pre>"},{"location":"reference/files/when__all_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/when__all_8hpp/#classes","title":"Classes","text":"Classes Description when_all_future Proxy future class referring to a conjunction of futures from when_all.  (class)"},{"location":"reference/files/when__all_8hpp/#description","title":"Description","text":"<p>This file defines adaptors to create a new future representing the conjunction of other future objects.</p> <p>Because all tasks need to be done to achieve the result, the algorithm doesn't depend much on the properties of the underlying futures. The thread that is awaiting just needs sleep and await for each of the internal futures.</p> <p>The usual approach, without our future concepts, like in returning another std::future, is to start another polling thread, which sets a promise when all other futures are ready. If the futures support lazy continuations, these promises can be set from the previous objects. However, this has an obvious cost for such a trivial operation, given that the solutions is already available in the underlying futures.</p> <p>Instead, we implement one more future type <code>when_all_future</code> that can query if the futures are ready and waits for them to be ready whenever get() is called. This proxy object can then be converted to a regular future if the user needs to.</p> <p>This has a disadvantage over futures with lazy continuations because we might need to schedule another task if we need notifications from this future. However, we avoid scheduling another task right now, so this is, at worst, as good as the common approach of wrapping it into another existing future type.</p> <p>If the input futures are not shared, they are moved into <code>when_all_future</code> and are invalidated, as usual. The <code>when_all_future</code> cannot be shared. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/files/when__any_8hpp/","title":"futures/adaptor/when_any.hpp","text":"<p>Disjunction adaptors. </p> <pre><code>#include &lt;futures/adaptor/when_any.hpp&gt;\n</code></pre>"},{"location":"reference/files/when__any_8hpp/#namespaces","title":"Namespaces","text":"Name Description futures Main library namespace."},{"location":"reference/files/when__any_8hpp/#classes","title":"Classes","text":"Classes Description when_any_result Result type for when_any_future objects.  (struct) when_any_future Future object referring to the result of a disjunction of futures.  (class)"},{"location":"reference/files/when__any_8hpp/#description","title":"Description","text":"<p>This file defines adaptors to create a new future representing the disjunction of other future objects.</p> <p>It implements the when_any functionality for futures and executors The same rationale as <code>std::experimental::when_any</code> applies here </p> <p>See Also: <code>std::experimental::when_any</code></p> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/","title":"Libraries","text":"Library Adaptors Functions to create new futures from existing functions. (group) Algorithms (group) Algorithm Traits (group) Execution Policies (group) Functions (group) Partitioners (group) Traits (group) Executors (group) Futures Basic future types and functions. (group) Cancellation Future cancellation primitives. (group) Error Basic future errors. (group) Future options Traits to define basic_future types. (group) Future Traits Determine properties of future types. (group) Future types Basic future types. (group) Launch Function to launch and schedule future tasks. (group) Shared State Shared state objects. (group) Waiting Basic function to wait for futures. (group) <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__adaptors/","title":"Adaptors Library","text":"<p>Functions to create new futures from existing functions. </p> <p>This module defines functions we can use to create new futures from existing futures. Future adaptors are future types of whose values are dependent on the condition of other future objects. </p>"},{"location":"reference/libraries/group__adaptors/#classes","title":"Classes","text":"Classes Description when_all_future Proxy future class referring to a conjunction of futures from when_all.  (class) when_any_result Result type for when_any_future objects.  (struct) when_any_future Future object referring to the result of a disjunction of futures.  (class)"},{"location":"reference/libraries/group__adaptors/#functions","title":"Functions","text":"Member Functions Description operator% Create a proxy pair with a lambda and an executor.  (function template) make_ready_future Make a placeholder future object that is ready at construction.  (function) make_exceptional_future Make a placeholder future object that is ready with an exception from an exception ptr.  (function template) then Schedule a continuation function to a future.  (function template) operator&gt;&gt; Operator to schedule a continuation function to a future.  (function template) when_all Create a future object that becomes ready when the range of input futures becomes ready.  (function template) operator&amp;&amp; Create a future object that becomes ready when the range of input futures becomes ready.    (function template) when_any Create a future object that becomes ready when any of the futures in the range is ready.  (function template) operator|| Create a future object that becomes ready when any of the futures in the range is ready.    (function template) is_ready Check if a future is ready.  (function template)"},{"location":"reference/libraries/group__adaptors/#functions_1","title":"Functions","text":""},{"location":"reference/libraries/group__adaptors/#function-operator","title":"function operator%","text":"<p>Defined in header <code>&lt;futures/adaptor/bind_executor_to_lambda.hpp&gt;</code></p> <pre><code>template &lt;executor Executor, class Function&gt;\nrequires /* see requirements below */\n/* see return type below */\noperator%(Executor const &amp; ex, Function &amp;&amp; after);\n</code></pre> <p>Create a proxy pair with a lambda and an executor. </p> <p>Parameters</p> <ul> <li>after - A callable with the continuation </li> <li>ex - An executor </li> </ul> <p>Return value</p> <p>A proxy pair to schedule execution </p> <p>Description</p> <p>For this operation, we needed an operator with higher precedence than operator&gt;&gt; Our options are: +, -, *, /, %, &amp;, !, ~. Although + seems like an obvious choice, % is the one that leads to less conflict with other functions.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__adaptors/#function-make_ready_future","title":"function make_ready_future","text":"<p>Defined in header <code>&lt;futures/adaptor/make_ready_future.hpp&gt;</code></p> (1)<pre><code>basic_future&lt; void, future_options&lt;&gt; &gt;\nmake_ready_future();\n</code></pre> (2)<pre><code>template &lt;class T&gt;\nbasic_future&lt; typename std::decay_t&lt; T &gt;, future_options&lt;&gt; &gt;\nmake_ready_future(T &amp;&amp; value);\n</code></pre> (3)<pre><code>template &lt;class T&gt;\nbasic_future&lt; T &amp;, future_options&lt;&gt; &gt;\nmake_ready_future(std::reference_wrapper&lt; T &gt; value);\n</code></pre> <ol> <li>Make a placeholder future object that is ready at construction. </li> <li>Make a placeholder future object that is ready at construction.   </li> <li>Make a placeholder future object that is ready at construction.   </li> </ol> <p>Parameters</p> <ul> <li>value - The value for the new future </li> </ul> <p>Return value</p> <p>A future associated with the shared state that is created.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>See Also</p> <ul> <li><code>std::experimental::make_ready_future</code></li> </ul>"},{"location":"reference/libraries/group__adaptors/#function-make_exceptional_future","title":"function make_exceptional_future","text":"<p>Defined in header <code>&lt;futures/adaptor/make_ready_future.hpp&gt;</code></p> (1)<pre><code>template &lt;class T =void&gt;\nbasic_future&lt; T, future_options&lt;&gt; &gt;\nmake_exceptional_future(std::exception_ptr ex);\n</code></pre> (2)<pre><code>template &lt;class T =void, class E&gt;\nbasic_future&lt; T, future_options&lt;&gt; &gt;\nmake_exceptional_future(E ex);\n</code></pre> <ol> <li>Make a placeholder future object that is ready with an exception from an exception ptr. </li> <li>Make a placeholder future object that is ready with an exception from an exception ptr.   </li> </ol> <p>Parameters</p> <ul> <li>ex - The exception for the new future </li> </ul> <p>Return value</p> <p>A future associated with the shared state that is created.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>See Also</p> <ul> <li><code>std::experimental::make_exceptional_future</code></li> </ul>"},{"location":"reference/libraries/group__adaptors/#function-then","title":"function then","text":"<p>Defined in header <code>&lt;futures/adaptor/then.hpp&gt;</code></p> (1)<pre><code>template &lt;future_like Future, class Function&gt;\nrequires /* see requirements below */\n/* see return type below */\nthen(Future &amp;&amp; before, Function &amp;&amp; after);\n</code></pre> (2)<pre><code>template &lt;executor Executor, class Function, class Future&gt;\nrequires /* see requirements below */\n/* see return type below */\nthen(Executor const &amp; ex, Future &amp;&amp; before, Function &amp;&amp; after);\n</code></pre> <ol> <li>Schedule a continuation function to a future. </li> <li>Schedule a continuation function to a future.   </li> </ol> <p>Parameters</p> <ul> <li>after - The continuation callable </li> <li>before - The antecedent future </li> <li>ex - The executor </li> </ul> <p>Return value</p> <ul> <li>(1) A continuation to the before future </li> <li>(2) A continuation to the before future   </li> </ul> <p>Description</p> <p>This function creates a continuation that gets executed when the <code>before</code> future is completed. The continuation needs to be invocable with the return type of the previous future.</p> <p>This function works for all kinds of futures but behavior depends on the input:</p> <ul> <li>If the previous future is continuable, attach the function to the continuation list</li> <li>If the previous future is not continuable (such as std::future), post to execution with deferred policy. In both cases, the result becomes a cfuture or jcfuture.</li> </ul> <p>Stop tokens are also propagated:</p> <ul> <li>If after function expects a stop token:<ul> <li>If previous future is stoppable and not-shared: return jcfuture with shared stop source</li> <li>Otherwise: return jcfuture with new stop source</li> </ul> </li> <li>If after function does not expect a stop token:<ul> <li>If previous future is stoppable and not-shared: return jcfuture with shared stop source</li> <li>Otherwise: return cfuture with no stop source</li> </ul> </li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__adaptors/#function-operator_1","title":"function operator&gt;&gt;","text":"<p>Defined in header <code>&lt;futures/adaptor/then.hpp&gt;</code></p> (1)<pre><code>template &lt;future_like Future, class Function&gt;\nrequires /* see requirements below */\n/* see return type below */\noperator&gt;&gt;(Future &amp;&amp; before, Function &amp;&amp; after);\n</code></pre> (2)<pre><code>template &lt;class Executor, class Future, class Function, bool RValue&gt;\nrequires /* see requirements below */\n/* see return type below */\noperator&gt;&gt;(\nFuture &amp;&amp; before, detail::executor_and_callable_reference&lt; Executor, Function, RValue &gt; &amp;&amp; after);\n</code></pre> <ol> <li>Operator to schedule a continuation function to a future. </li> <li>Schedule a continuation function to a future.   </li> </ol> <p>Parameters</p> <ul> <li>after - The continuation callable </li> <li>before - The antecedent future </li> </ul> <p>Return value</p> <ul> <li>(1) A continuation to the before future </li> <li>(2) A continuation to the before future   </li> </ul> <p>Description</p> <p>This function creates a continuation that gets executed when the <code>before</code> future is completed. The continuation needs to be invocable with the return type of the previous future.</p> <p>This function works for all kinds of futures but behavior depends on the input:</p> <ul> <li>If the previous future is continuable, attach the function to the continuation list</li> <li>If the previous future is not continuable (such as std::future), post to execution with deferred policy. In both cases, the result becomes a cfuture or jcfuture.</li> </ul> <p>Stop tokens are also propagated:</p> <ul> <li>If after function expects a stop token:<ul> <li>If previous future is stoppable and not-shared: return jcfuture with shared stop source</li> <li>Otherwise: return jcfuture with new stop source</li> </ul> </li> <li>If after function does not expect a stop token:<ul> <li>If previous future is stoppable and not-shared: return jcfuture with shared stop source</li> <li>Otherwise: return cfuture with no stop source</li> </ul> </li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__adaptors/#function-when_all","title":"function when_all","text":"<p>Defined in header <code>&lt;futures/adaptor/when_all.hpp&gt;</code></p> (1)<pre><code>template &lt;class InputIt&gt;\nrequires /* see requirements below */\nwhen_all_future&lt; __see_below__ &gt;\nwhen_all(InputIt first, InputIt last);\n</code></pre> (2)<pre><code>template &lt;class Range&gt;\nrequires is_range_v&lt;std::decay_t&lt;Range&gt;&gt;\nwhen_all_future&lt; __see_below__ &gt;\nwhen_all(Range &amp;&amp; r);\n</code></pre> (3)<pre><code>template &lt;class... Futures&gt;\nrequires /* see requirements below */\nwhen_all_future&lt; std::tuple&lt; __see_below__ &gt; &gt;\nwhen_all(Futures &amp;&amp;... futures);\n</code></pre> <ol> <li>Create a future object that becomes ready when the range of input futures becomes ready. </li> <li>Create a future object that becomes ready when the range of input futures becomes ready.   </li> <li>Create a future object that becomes ready when the range of input futures becomes ready.   </li> </ol> <p>Parameters</p> <ul> <li>first, last - Range of futures </li> <li>futures - Instances of future objects </li> <li>r - Range of futures </li> </ul> <p>Return value</p> <p>Future object of type when_all_future</p> <p>Description</p> <p>(1) This function does not participate in overload resolution unless InputIt's value type (i.e., typename std::iter_value_t) is a std::future or std::shared_future. <p>This overload uses a small vector for avoid further allocations for such a simple operation.</p> <p>(2) This function does not participate in overload resolution unless the range is_future_like trait.</p> <p>(3) This function does not participate in overload resolution unless every argument is either a (possibly cv-qualified) shared_future or a cv-unqualified future, as defined by the is_future_like trait.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__adaptors/#function-operator_2","title":"function operator&amp;&amp;","text":"<p>Defined in header <code>&lt;futures/adaptor/when_all.hpp&gt;</code></p> <pre><code>template &lt;class T1, class T2&gt;\nrequires /* see requirements below */\n/* see return type below */\noperator&amp;&amp;(T1 &amp;&amp; lhs, T2 &amp;&amp; rhs);\n</code></pre> <p>Create a future object that becomes ready when the range of input futures becomes ready.   </p> <p>Parameters</p> <ul> <li>lhs, rhs - Future objects or callables </li> </ul> <p>Return value</p> <p>when_all_future object that concatenates all futures </p> <p>Description</p> <p>Operator&amp;&amp; works for futures and functions (which are converted to futures with the default executor) If the future is a when_all_future itself, then it gets merged instead of becoming a child future of another when_all_future.</p> <p>When the user asks for <code>f1 &amp;&amp; f2 &amp;&amp; f3</code>, we want that to return a single future that waits for <code>&lt;f1,f2,f3&gt;</code> rather than a future that wait for two futures <code>&lt;f1,&lt;f2,f3&gt;&gt;</code>.</p> <p>This emulates the usual behavior we expect from other types with operator&amp;&amp;.</p> <p>Note that this default behaviour is different from <code>when_all(...)</code>, which doesn't merge the when_all_future objects by default, because they are variadic functions and this intention can be controlled explicitly:</p> <ul> <li><code>when_all(f1,f2,f3)</code> -&gt; <code>&lt;f1,f2,f3&gt;</code></li> <li><code>when_all(f1,when_all(f2,f3))</code> -&gt; <code>&lt;f1,&lt;f2,f3&gt;&gt;</code></li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__adaptors/#function-when_any","title":"function when_any","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> (1)<pre><code>template &lt;class InputIt&gt;\nrequires /* see requirements below */\nwhen_any_future&lt; __see_below__ &gt;\nwhen_any(InputIt first, InputIt last);\n</code></pre> (2)<pre><code>template &lt;std::ranges::range Range&gt;\nwhen_any_future&lt; __see_below__ &gt;\nwhen_any(Range &amp;&amp; r);\n</code></pre> (3)<pre><code>template &lt;class... Futures&gt;\nrequires /* see requirements below */\nwhen_any_future&lt; std::tuple&lt; __see_below__ &gt; &gt;\nwhen_any(Futures &amp;&amp;... futures);\n</code></pre> <ol> <li>Create a future object that becomes ready when any of the futures in the range is ready. </li> <li>Create a future object that becomes ready when any of the futures in the range is ready.   </li> <li>Create a future object that becomes ready when any of the futures in the range is ready.   </li> </ol> <p>Parameters</p> <ul> <li>first, last - Range of futures </li> <li>futures - A sequence of future objects </li> <li>r - Range of futures </li> </ul> <p>Return value</p> <ul> <li>(1) when_any_future with all future objects </li> <li>(2) when_any_future with all future objects. The sequence type is a range object holding the futures. </li> </ul> <p>Description</p> <p>(2) This function does not participate in overload resolution unless every argument is future-like.</p> <p>(3) This function does not participate in overload resolution unless every argument is either a (possibly cv-qualified) std::shared_future or a cv-unqualified std::future.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__adaptors/#function-operator_3","title":"function operator||","text":"<p>Defined in header <code>&lt;futures/adaptor/when_any.hpp&gt;</code></p> <pre><code>template &lt;class T1, class T2&gt;\nrequires /* see requirements below */\n/* see return type below */\noperator||(T1 &amp;&amp; lhs, T2 &amp;&amp; rhs);\n</code></pre> <p>Create a future object that becomes ready when any of the futures in the range is ready.   </p> <p>Parameters</p> <ul> <li>lhs, rhs - Future objects </li> </ul> <p>Return value</p> <p>A when_any_future holding all future types </p> <p>Description</p> <p>ready operator|| works for futures and functions (which are converted to futures with the default executor) If the future is a when_any_future itself, then it gets merged instead of becoming a child future of another when_any_future.</p> <p>When the user asks for <code>f1 || f2 || f3</code>, we want that to return a single future that waits for <code>&lt;f1 || f2 || f3&gt;</code> rather than a future that wait for two futures <code>&lt;f1 || &lt;f2 || f3&gt;&gt;</code>.</p> <p>This emulates the usual behavior we expect from other types with <code>operator||</code>.</p> <p>Note that this default behaviour is different from `when_any(...), which doesn't merge the when_any_future objects by default, because they are variadic functions and this intention can be controlled explicitly:</p> <ul> <li><code>when_any(f1,f2,f3)</code> -&gt; <code>&lt;f1 || f2 || f3&gt;</code></li> <li><code>when_any(f1,when_any(f2,f3))</code> -&gt; <code>&lt;f1 || &lt;f2 || f3&gt;&gt;</code></li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__adaptors/#function-is_ready","title":"function is_ready","text":"<p>Defined in header <code>&lt;futures/is_ready.hpp&gt;</code></p> <pre><code>template &lt;future_like Future&gt;\nbool\nis_ready(Future &amp;&amp; f);\n</code></pre> <p>Check if a future is ready. </p> <p>Description</p> <p>Although basic_future has its more efficient is_ready function, this free function allows us to query other futures that don't implement is_ready, such as std::future. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__algorithm-traits/","title":"Algorithms Library: Algorithm Traits","text":"<p>Algorithms / Algorithm Traits</p>"},{"location":"reference/libraries/group__algorithm-traits/#classes","title":"Classes","text":"Classes Description binary_invoke_algorithm_functor Binary algorithm overloads.  (class) unary_invoke_algorithm_functor Overloads for unary invoke algorithms.  (class) value_cmp_algorithm_functor Value-compare algorithm overloads.  (class) <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__algorithms/","title":"Algorithms Library","text":""},{"location":"reference/libraries/group__algorithms/#modules","title":"Modules","text":"Modules Description Functions Partitioners Execution Policies Algorithm Traits Traits <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__cancellation/","title":"Futures Library: Cancellation","text":"<p>Future cancellation primitives. </p> <p>Futures / Cancellation</p>"},{"location":"reference/libraries/group__cancellation/#classes","title":"Classes","text":"Classes Description nostopstate_t Empty struct to initialize a stop_source without a shared stop state.  (struct) stop_token Token to check if a stop request has been made.  (class) stop_source Object used to issue a stop request.  (class)"},{"location":"reference/libraries/group__cancellation/#attributes","title":"Attributes","text":"Member Attributes Description nostopstate Empty struct to initialize a stop_source without a shared stop state.  (public variable) execution_policy Determines if a type is an execution_policy.  (public concept template) partitioner_for Determines if a type is an partitioner.  (public concept template) execution_context The invocable archetype task is a regular functor.  (public concept template) executor_for Determines if a type is an executor for the specified type of task.  (public concept template) executor The invocable archetype task is a regular functor.  (public concept template) future_like A class is considered future-like when 1) it specializes the <code>is_future_like</code> trait to indicate it is a future type, or 2) it has the a <code>get()</code> function to obtain its future value.  (public concept template) execution_context_for Determines if a type is an execution context for the a task type.  (public concept template)"},{"location":"reference/libraries/group__cancellation/#attributes_1","title":"Attributes","text":""},{"location":"reference/libraries/group__cancellation/#variable-nostopstate","title":"variable nostopstate","text":"<p>Defined in header <code>&lt;futures/stop_token.hpp&gt;</code> <pre><code>constexpr nostopstate_t nostopstate {};\n</code></pre></p> <p>Empty struct to initialize a stop_source without a shared stop state. </p>"},{"location":"reference/libraries/group__cancellation/#concept-execution_policy","title":"concept execution_policy","text":"<p>Defined in header <code>&lt;futures/algorithm/policies.hpp&gt;</code> <pre><code>template&lt;class E&gt;\nconcept execution_policy = is_execution_policy_v&lt;E&gt;;\n</code></pre></p> <p>Determines if a type is an execution_policy. </p>"},{"location":"reference/libraries/group__cancellation/#concept-partitioner_for","title":"concept partitioner_for","text":"<p>Defined in header <code>&lt;futures/algorithm/partitioner/partitioner_for.hpp&gt;</code> <pre><code>template&lt;class P, class I, class S I&gt;\nconcept partitioner_for = std::input_iterator&lt;I&gt; &amp;&amp; std::sentinel_for&lt;S, I&gt;\n&amp;&amp; std::invocable&lt;P, I, S&gt;;\n</code></pre></p> <p>Determines if a type is an partitioner. </p>"},{"location":"reference/libraries/group__cancellation/#concept-execution_context","title":"concept execution_context","text":"<p>Defined in header <code>&lt;futures/executor/is_execution_context.hpp&gt;</code> <pre><code>template&lt;class C&gt;\nconcept execution_context = execution_context_for&lt;C, __invocable_archetype__ &gt;;\n</code></pre></p> <p>The invocable archetype task is a regular functor. </p> <p>Description</p> <p>This means this trait should work for any execution context that supports non-heterogeneous tasks. </p>"},{"location":"reference/libraries/group__cancellation/#concept-executor_for","title":"concept executor_for","text":"<p>Defined in header <code>&lt;futures/executor/is_executor.hpp&gt;</code> <pre><code>template&lt;class E, class F&gt;\nconcept executor_for = requires(E e, F f) { e.execute(f); };\n</code></pre></p> <p>Determines if a type is an executor for the specified type of task. </p>"},{"location":"reference/libraries/group__cancellation/#concept-executor","title":"concept executor","text":"<p>Defined in header <code>&lt;futures/executor/is_executor.hpp&gt;</code> <pre><code>template&lt;class E&gt;\nconcept executor = executor_for&lt;E, __invocable_archetype__ &gt;;\n</code></pre></p> <p>The invocable archetype task is a regular functor. </p> <p>Description</p> <p>Determines if a type is an executor for invocable types.</p> <p>Determines if a type is an execution context for invocable types.</p> <p>This means this trait should work for any executor that supports non-heterogeneous tasks. </p>"},{"location":"reference/libraries/group__cancellation/#concept-future_like","title":"concept future_like","text":"<p>Defined in header <code>&lt;futures/traits/is_future_like.hpp&gt;</code> <pre><code>template&lt;class T&gt;\nconcept future_like = is_future_like_v&lt;std::decay_t&lt;T&gt;&gt;;\n</code></pre></p> <p>A class is considered future-like when 1) it specializes the <code>is_future_like</code> trait to indicate it is a future type, or 2) it has the a <code>get()</code> function to obtain its future value. </p> <p>Template Parameters</p> <ul> <li>T - The type being tested for conformance to the future_like concept. </li> </ul> <p>Description</p> <p>An object with the common members of a future.</p> <p>This allows algorithms to interoperate with future types from other libraries.</p>"},{"location":"reference/libraries/group__cancellation/#concept-execution_context_for","title":"concept execution_context_for","text":"<p>Defined in header <code>&lt;futures/executor/is_execution_context.hpp&gt;</code> <pre><code>template&lt;class C, class F&gt;\nconcept execution_context_for = requires(C ctx, F f) {\n{ ctx.get_executor() } -&gt; executor_for&lt;F&gt;;\n};\n</code></pre></p> <p>Determines if a type is an execution context for the a task type. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__error/","title":"Futures Library: Error","text":"<p>Basic future errors. </p> <p>Futures / Error</p>"},{"location":"reference/libraries/group__error/#classes","title":"Classes","text":"Classes Description error Class for errors in the futures library.  (class) broken_promise The state owner got destroyed before the promise has been fulfilled.  (class) future_already_retrieved Attempted to retrieve a unique future twice.  (class) promise_already_satisfied Promise has already been fulfilled.  (class) no_state There is no shared state we can access.  (class) promise_uninitialized The promised hasn't been initialized yet.  (class) packaged_task_uninitialized The packaged task hasn't been initialized yet.  (class) future_uninitialized The future hasn't been initialized yet.  (class) future_deferred Invalid operation on deferred future.  (class)"},{"location":"reference/libraries/group__error/#types","title":"Types","text":"Member Types Definition future_errc Error codes for futures.  (enum) source_location A library type equivalent to <code>std::source_location</code> (using)"},{"location":"reference/libraries/group__error/#functions","title":"Functions","text":"Member Functions Description handle_exception Customization point to handle exceptions.  (function) throw_exception Library function used to throw exceptions.  (function template)"},{"location":"reference/libraries/group__error/#types_1","title":"Types","text":""},{"location":"reference/libraries/group__error/#enum-future_errc","title":"enum future_errc","text":"<p>Defined in header <code>&lt;futures/error.hpp&gt;</code> <pre><code>enum class future_errc;\n</code></pre></p> Enumerator Value Description broken_promise 1 The state owner got destroyed before the promise has been fulfilled. future_already_retrieved Attempted to retrieve a unique future twice. promise_already_satisfied Promise has already been fulfilled. no_state There is no shared state we can access. promise_uninitialized The promised hasn't been initialized yet. packaged_task_uninitialized The packaged task hasn't been initialized yet. future_uninitialized The future hasn't been initialized yet. future_deferred Invalid operation on deferred future. <p>Error codes for futures. </p>"},{"location":"reference/libraries/group__error/#using-source_location","title":"using source_location","text":"<p>Defined in header <code>&lt;futures/throw.hpp&gt;</code> <pre><code>using source_location = std::source_location;\n</code></pre></p> <p>A library type equivalent to <code>std::source_location</code></p> <p>Description</p> <p>The source_location class represents certain information about the source code, such as file names, line numbers, and function names.</p> <p>See Also: <code>std::source_location</code></p>"},{"location":"reference/libraries/group__error/#functions_1","title":"Functions","text":""},{"location":"reference/libraries/group__error/#function-handle_exception","title":"function handle_exception","text":"<p>Defined in header <code>&lt;futures/throw.hpp&gt;</code></p> <pre><code>void\nhandle_exception(std::exception const &amp;, boost::source_location const &amp;);\n</code></pre> <p>Customization point to handle exceptions. </p> <p>Description</p> <p>When exception support is disabled with [FUTURES_NO_EXCEPTIONS], this function will be called to handle exceptions.</p> <p>To customize how exceptions will be handled, define the macro [FUTURES_CUSTOM_EXCEPTION_HANDLE], and define an alternative implementation for this function. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__error/#function-throw_exception","title":"function throw_exception","text":"<p>Defined in header <code>&lt;futures/throw.hpp&gt;</code></p> <pre><code>template &lt;class E&gt;\nvoid\nthrow_exception(\nE &amp;&amp; e, source_location const &amp; loc =std::source_location::current());\n</code></pre> <p>Library function used to throw exceptions. </p> <p>Template Parameters</p> <ul> <li>E - Exception type </li> </ul> <p>Parameters</p> <ul> <li>e - Exception object </li> <li>loc - Location where the exception occurred </li> </ul> <p>Description</p> <p>This is the main library function used to throw exceptions according to the functions available for handling exceptions.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__execution-policies/","title":"Algorithms Library: Execution Policies","text":"<p>Algorithms / Execution Policies</p>"},{"location":"reference/libraries/group__execution-policies/#classes","title":"Classes","text":"Classes Description is_execution_policy Determines whether T is a standard or implementation-defined execution policy type.  (struct)"},{"location":"reference/libraries/group__execution-policies/#types","title":"Types","text":"Member Types Definition sequenced_policy Class representing a type for a sequenced_policy tag.  (using) parallel_policy Class representing a type for a parallel_policy tag.  (using) parallel_unsequenced_policy Class representing a type for a parallel_unsequenced_policy tag.  (using) unsequenced_policy Class representing a type for an unsequenced_policy tag.  (using)"},{"location":"reference/libraries/group__execution-policies/#attributes","title":"Attributes","text":"Member Attributes Description seq Tag used in algorithms for a sequenced_policy.  (public variable) par Tag used in algorithms for a parallel_policy.  (public variable) par_unseq Tag used in algorithms for a parallel_unsequenced_policy.  (public variable) unseq Tag used in algorithms for an unsequenced_policy.  (public variable) is_execution_policy_v Determines whether T is a standard or implementation-defined execution policy type.    (public variable template)"},{"location":"reference/libraries/group__execution-policies/#types_1","title":"Types","text":""},{"location":"reference/libraries/group__execution-policies/#using-sequenced_policy","title":"using sequenced_policy","text":"<p>Defined in header <code>&lt;futures/algorithm/policies.hpp&gt;</code> <pre><code>using sequenced_policy = std::execution::sequenced_policy;\n</code></pre></p> <p>Class representing a type for a sequenced_policy tag. </p> <p>Description</p> <p>This tag type is an alias to <code>std::execution::sequenced_policy</code> whenever it's available. Otherwise it's defined as an individual type. </p>"},{"location":"reference/libraries/group__execution-policies/#using-parallel_policy","title":"using parallel_policy","text":"<p>Defined in header <code>&lt;futures/algorithm/policies.hpp&gt;</code> <pre><code>using parallel_policy = std::execution::parallel_policy;\n</code></pre></p> <p>Class representing a type for a parallel_policy tag. </p> <p>Description</p> <p>This tag type is an alias to <code>std::execution::parallel_policy</code> whenever it's available. Otherwise it's defined as an individual type. </p>"},{"location":"reference/libraries/group__execution-policies/#using-parallel_unsequenced_policy","title":"using parallel_unsequenced_policy","text":"<p>Defined in header <code>&lt;futures/algorithm/policies.hpp&gt;</code> <pre><code>using parallel_unsequenced_policy = std::execution::parallel_unsequenced_policy;\n</code></pre></p> <p>Class representing a type for a parallel_unsequenced_policy tag. </p> <p>Description</p> <p>This tag type is an alias to <code>std::execution::parallel_unsequenced_policy</code> whenever it's available. Otherwise it's defined as an individual type. </p>"},{"location":"reference/libraries/group__execution-policies/#using-unsequenced_policy","title":"using unsequenced_policy","text":"<p>Defined in header <code>&lt;futures/algorithm/policies.hpp&gt;</code> <pre><code>using unsequenced_policy = std::execution::unsequenced_policy;\n</code></pre></p> <p>Class representing a type for an unsequenced_policy tag. </p> <p>Description</p> <p>This tag type is an alias to <code>std::execution::unsequenced_policy</code> whenever it's available. Otherwise it's defined as an individual type. </p>"},{"location":"reference/libraries/group__execution-policies/#attributes_1","title":"Attributes","text":""},{"location":"reference/libraries/group__execution-policies/#variable-seq","title":"variable seq","text":"<p>Defined in header <code>&lt;futures/algorithm/policies.hpp&gt;</code> <pre><code>constexpr sequenced_policy seq {};\n</code></pre></p> <p>Tag used in algorithms for a sequenced_policy. </p>"},{"location":"reference/libraries/group__execution-policies/#variable-par","title":"variable par","text":"<p>Defined in header <code>&lt;futures/algorithm/policies.hpp&gt;</code> <pre><code>constexpr parallel_policy par {};\n</code></pre></p> <p>Tag used in algorithms for a parallel_policy. </p>"},{"location":"reference/libraries/group__execution-policies/#variable-par_unseq","title":"variable par_unseq","text":"<p>Defined in header <code>&lt;futures/algorithm/policies.hpp&gt;</code> <pre><code>constexpr parallel_unsequenced_policy par_unseq {};\n</code></pre></p> <p>Tag used in algorithms for a parallel_unsequenced_policy. </p>"},{"location":"reference/libraries/group__execution-policies/#variable-unseq","title":"variable unseq","text":"<p>Defined in header <code>&lt;futures/algorithm/policies.hpp&gt;</code> <pre><code>constexpr unsequenced_policy unseq {};\n</code></pre></p> <p>Tag used in algorithms for an unsequenced_policy. </p>"},{"location":"reference/libraries/group__execution-policies/#variable-is_execution_policy_v","title":"variable is_execution_policy_v","text":"<p>Defined in header <code>&lt;futures/algorithm/policies.hpp&gt;</code> <pre><code>constexpr bool is_execution_policy_v = is_execution_policy&lt;T&gt;::value;\n</code></pre></p> <p>Determines whether T is a standard or implementation-defined execution policy type.   </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__executors/","title":"Executors Library","text":""},{"location":"reference/libraries/group__executors/#classes","title":"Classes","text":"Classes Description any_executor An wrapper that type erases any non-heterogeneous executor.  (class) inline_executor An executor that runs anything inline.  (class) new_thread_executor An executor that runs anything in a new thread, like std::async does.  (class) thread_pool A thread pool with the specified number of threads.  (class)"},{"location":"reference/libraries/group__executors/#types","title":"Types","text":"Member Types Definition default_execution_context_type The default execution context for async operations.  (using) default_executor_type Default executor type.  (using) is_execution_context_for Determine if type is an execution context for the specified type of task.  (using) is_execution_context Determines if a type is an execution context for invocable types.  (using) is_executor_for Determine if type is an executor for the specified type of task.  (using) is_executor Determines if a type is an executor for invocable types.  (using)"},{"location":"reference/libraries/group__executors/#functions","title":"Functions","text":"Member Functions Description default_execution_context Create an instance of the default execution context.  (function) make_default_executor Create an Asio thread pool executor for the default thread pool.  (function) hardware_concurrency A version of hardware_concurrency that always returns at least 1.  (function) make_inline_executor Make an inline executor object.  (function) make_new_thread_executor Make an new thread executor object.  (function)"},{"location":"reference/libraries/group__executors/#attributes","title":"Attributes","text":"Member Attributes Description is_execution_context_for_v Determine if type is an execution context for the specified type of task.    (public variable template) is_execution_context_v Determines if a type is an execution context for invocable types.    (public variable template) is_executor_for_v Determine if type is an executor for the specified type of task.    (public variable template) is_executor_v Determines if a type is an executor for invocable types.    (public variable template)"},{"location":"reference/libraries/group__executors/#types_1","title":"Types","text":""},{"location":"reference/libraries/group__executors/#using-default_execution_context_type","title":"using default_execution_context_type","text":"<p>Defined in header <code>&lt;futures/executor/default_executor.hpp&gt;</code> <pre><code>using default_execution_context_type = /* see below */;\n</code></pre></p> <p>The default execution context for async operations. </p> <p>Description</p> <p>Unless an executor is explicitly provided, this is the executor we use for async operations.</p> <p>This is the ASIO thread pool execution context with a default number of threads. However, the default execution context (and its type) might change in other versions of this library if something more general comes along. As the standard for executors gets adopted, libraries are likely to provide better implementations.</p> <p>Also note that executors might not allow work-stealing. This needs to be taken into account when implementing algorithms with recursive tasks. One common options is to use <code>try_async</code> for recursive tasks.</p> <p>Also note that, in the executors notation, the pool is an execution context but not an executor:</p> <ul> <li>Execution context: a place where we can execute functions</li> <li>A thread pool is an execution context, not an executor</li> </ul> <p>An execution context is:</p> <ul> <li>Usually long lived</li> <li>Non-copyable</li> <li>May contain additional state, such as timers, and threads </li> </ul>"},{"location":"reference/libraries/group__executors/#using-default_executor_type","title":"using default_executor_type","text":"<p>Defined in header <code>&lt;futures/executor/default_executor.hpp&gt;</code> <pre><code>using default_executor_type = default_execution_context_type::executor_type;\n</code></pre></p> <p>Default executor type. </p>"},{"location":"reference/libraries/group__executors/#using-is_execution_context_for","title":"using is_execution_context_for","text":"<p>Defined in header <code>&lt;futures/executor/is_execution_context.hpp&gt;</code> <pre><code>template &lt;class E, class F&gt;\nusing is_execution_context_for = std::bool_constant&lt; execution_context_for&lt; E, F &gt; &gt;;\n</code></pre></p> <p>Determine if type is an execution context for the specified type of task. </p>"},{"location":"reference/libraries/group__executors/#using-is_execution_context","title":"using is_execution_context","text":"<p>Defined in header <code>&lt;futures/executor/is_execution_context.hpp&gt;</code> <pre><code>template &lt;class E&gt;\nusing is_execution_context = std::bool_constant&lt; execution_context&lt; E &gt; &gt;;\n</code></pre></p> <p>Determines if a type is an execution context for invocable types. </p>"},{"location":"reference/libraries/group__executors/#using-is_executor_for","title":"using is_executor_for","text":"<p>Defined in header <code>&lt;futures/executor/is_executor.hpp&gt;</code> <pre><code>template &lt;class E, class F&gt;\nusing is_executor_for = std::bool_constant&lt; executor_for&lt; E, F &gt; &gt;;\n</code></pre></p> <p>Determine if type is an executor for the specified type of task. </p>"},{"location":"reference/libraries/group__executors/#using-is_executor","title":"using is_executor","text":"<p>Defined in header <code>&lt;futures/executor/is_executor.hpp&gt;</code> <pre><code>template &lt;class E&gt;\nusing is_executor = std::bool_constant&lt; executor&lt; E &gt; &gt;;\n</code></pre></p> <p>Determines if a type is an executor for invocable types. </p>"},{"location":"reference/libraries/group__executors/#functions_1","title":"Functions","text":""},{"location":"reference/libraries/group__executors/#function-default_execution_context","title":"function default_execution_context","text":"<p>Defined in header <code>&lt;futures/executor/default_executor.hpp&gt;</code></p> <pre><code>default_execution_context_type &amp;\ndefault_execution_context();\n</code></pre> <p>Create an instance of the default execution context. </p> <p>Return value</p> <p>Reference to the default execution context for async</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__executors/#function-make_default_executor","title":"function make_default_executor","text":"<p>Defined in header <code>&lt;futures/executor/default_executor.hpp&gt;</code></p> <pre><code>default_execution_context_type::executor_type\nmake_default_executor();\n</code></pre> <p>Create an Asio thread pool executor for the default thread pool. </p> <p>Return value</p> <p>Executor handle to the default execution context </p> <p>Description</p> <p>In the executors notation:</p> <ul> <li>Executor: set of rules governing where, when and how to run a function object<ul> <li>A thread pool is an execution context for which we can create executors pointing to the pool.</li> <li>The executor rule for the default thread pool executor is to run function objects in the pool and nowhere else.</li> </ul> </li> </ul> <p>An executor is:</p> <ul> <li>Lightweight and copyable (just references and pointers to the execution context).</li> <li>May be long or short lived.</li> <li>May be customized on a fine-grained basis, such as exception behavior, and order</li> </ul> <p>There might be many executor types associated with with the same execution context.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__executors/#function-hardware_concurrency","title":"function hardware_concurrency","text":"<p>Defined in header <code>&lt;futures/executor/hardware_concurrency.hpp&gt;</code></p> <pre><code>unsigned int\nhardware_concurrency() noexcept;\n</code></pre> <p>A version of hardware_concurrency that always returns at least 1. </p> <p>Return value</p> <p>Number of concurrent threads supported. If the value is not well-defined or not computable, returns 1. </p> <p>Description</p> <p>This function is a safer version of hardware_concurrency that always returns at least 1 to represent the current context when the value is not computable.</p> <ul> <li>It never returns 0, 1 is returned instead.</li> <li>It is guaranteed to remain constant for the duration of the program.</li> </ul> <p>It also improves on hardware_concurrency to provide a default value of 1 when the function is being executed at compile time. This allows partitioners and algorithms to be constexpr.</p> <p>Exception Safety</p> <p>Throws nothing.</p> <p>See Also</p> <ul> <li><code>std::hardware_concurrency</code></li> </ul>"},{"location":"reference/libraries/group__executors/#function-make_inline_executor","title":"function make_inline_executor","text":"<p>Defined in header <code>&lt;futures/executor/inline_executor.hpp&gt;</code></p> <pre><code>constexpr inline_executor\nmake_inline_executor();\n</code></pre> <p>Make an inline executor object. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__executors/#function-make_new_thread_executor","title":"function make_new_thread_executor","text":"<p>Defined in header <code>&lt;futures/executor/new_thread_executor.hpp&gt;</code></p> <pre><code>constexpr new_thread_executor\nmake_new_thread_executor();\n</code></pre> <p>Make an new thread executor object. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__executors/#attributes_1","title":"Attributes","text":""},{"location":"reference/libraries/group__executors/#variable-is_execution_context_for_v","title":"variable is_execution_context_for_v","text":"<p>Defined in header <code>&lt;futures/executor/is_execution_context.hpp&gt;</code> <pre><code>constexpr bool is_execution_context_for_v = execution_context_for&lt;E, F&gt;;\n</code></pre></p> <p>Determine if type is an execution context for the specified type of task.   </p>"},{"location":"reference/libraries/group__executors/#variable-is_execution_context_v","title":"variable is_execution_context_v","text":"<p>Defined in header <code>&lt;futures/executor/is_execution_context.hpp&gt;</code> <pre><code>constexpr bool is_execution_context_v = execution_context&lt;E&gt;;\n</code></pre></p> <p>Determines if a type is an execution context for invocable types.   </p>"},{"location":"reference/libraries/group__executors/#variable-is_executor_for_v","title":"variable is_executor_for_v","text":"<p>Defined in header <code>&lt;futures/executor/is_executor.hpp&gt;</code> <pre><code>constexpr bool is_executor_for_v = executor_for&lt;E, F&gt;;\n</code></pre></p> <p>Determine if type is an executor for the specified type of task.   </p>"},{"location":"reference/libraries/group__executors/#variable-is_executor_v","title":"variable is_executor_v","text":"<p>Defined in header <code>&lt;futures/executor/is_executor.hpp&gt;</code> <pre><code>constexpr bool is_executor_v = executor&lt;E&gt;;\n</code></pre></p> <p>Determines if a type is an executor for invocable types.   </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__functions/","title":"Algorithms Library: Functions","text":"<p>Algorithms / Functions</p>"},{"location":"reference/libraries/group__functions/#classes","title":"Classes","text":"Classes Description all_of_functor Functor representing the overloads for the all_of function.  (class) any_of_functor Functor representing the overloads for the any_of function.  (class) count_functor Functor representing the overloads for the count function.  (class) count_if_functor Functor representing the overloads for the count_if function.  (class) find_functor Functor representing the overloads for the find function.  (class) find_if_functor Functor representing the overloads for the find_if function.  (class) find_if_not_functor Functor representing the overloads for the find_if_not function.  (class) for_each_functor Functor representing the overloads for the for_each function.  (class) none_of_functor Functor representing the overloads for the none_of function.  (class) reduce_functor Functor representing the overloads for the reduce function.  (class)"},{"location":"reference/libraries/group__functions/#attributes","title":"Attributes","text":"Member Attributes Description all_of Checks if a predicate is true for all the elements in a range.  (public variable) any_of Checks if a predicate is true for any of the elements in a range.  (public variable) count Returns the number of elements matching an element.  (public variable) count_if Returns the number of elements satisfying specific criteria.  (public variable) find Finds the first element equal to another element.  (public variable) find_if Finds the first element satisfying specific criteria.  (public variable) find_if_not Finds the first element not satisfying specific criteria.  (public variable) for_each Applies a function to a range of elements.  (public variable) none_of Checks if a predicate is true for none of the elements in a range.  (public variable) reduce Sums up (or accumulate with a custom function) a range of elements, except out of order.  (public variable)"},{"location":"reference/libraries/group__functions/#attributes_1","title":"Attributes","text":""},{"location":"reference/libraries/group__functions/#variable-all_of","title":"variable all_of","text":"<p>Defined in header <code>&lt;futures/algorithm/all_of.hpp&gt;</code> <pre><code>constexpr all_of_functor all_of;\n</code></pre></p> <p>Checks if a predicate is true for all the elements in a range. </p>"},{"location":"reference/libraries/group__functions/#variable-any_of","title":"variable any_of","text":"<p>Defined in header <code>&lt;futures/algorithm/any_of.hpp&gt;</code> <pre><code>constexpr any_of_functor any_of;\n</code></pre></p> <p>Checks if a predicate is true for any of the elements in a range. </p>"},{"location":"reference/libraries/group__functions/#variable-count","title":"variable count","text":"<p>Defined in header <code>&lt;futures/algorithm/count.hpp&gt;</code> <pre><code>constexpr count_functor count;\n</code></pre></p> <p>Returns the number of elements matching an element. </p>"},{"location":"reference/libraries/group__functions/#variable-count_if","title":"variable count_if","text":"<p>Defined in header <code>&lt;futures/algorithm/count_if.hpp&gt;</code> <pre><code>constexpr count_if_functor count_if;\n</code></pre></p> <p>Returns the number of elements satisfying specific criteria. </p>"},{"location":"reference/libraries/group__functions/#variable-find","title":"variable find","text":"<p>Defined in header <code>&lt;futures/algorithm/find.hpp&gt;</code> <pre><code>constexpr find_functor find;\n</code></pre></p> <p>Finds the first element equal to another element. </p>"},{"location":"reference/libraries/group__functions/#variable-find_if","title":"variable find_if","text":"<p>Defined in header <code>&lt;futures/algorithm/find_if.hpp&gt;</code> <pre><code>constexpr find_if_functor find_if;\n</code></pre></p> <p>Finds the first element satisfying specific criteria. </p>"},{"location":"reference/libraries/group__functions/#variable-find_if_not","title":"variable find_if_not","text":"<p>Defined in header <code>&lt;futures/algorithm/find_if_not.hpp&gt;</code> <pre><code>constexpr find_if_not_functor find_if_not;\n</code></pre></p> <p>Finds the first element not satisfying specific criteria. </p>"},{"location":"reference/libraries/group__functions/#variable-for_each","title":"variable for_each","text":"<p>Defined in header <code>&lt;futures/algorithm/for_each.hpp&gt;</code> <pre><code>constexpr for_each_functor for_each;\n</code></pre></p> <p>Applies a function to a range of elements. </p>"},{"location":"reference/libraries/group__functions/#variable-none_of","title":"variable none_of","text":"<p>Defined in header <code>&lt;futures/algorithm/none_of.hpp&gt;</code> <pre><code>constexpr none_of_functor none_of;\n</code></pre></p> <p>Checks if a predicate is true for none of the elements in a range. </p>"},{"location":"reference/libraries/group__functions/#variable-reduce","title":"variable reduce","text":"<p>Defined in header <code>&lt;futures/algorithm/reduce.hpp&gt;</code> <pre><code>constexpr reduce_functor reduce;\n</code></pre></p> <p>Sums up (or accumulate with a custom function) a range of elements, except out of order. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__future-options/","title":"Futures Library: Future options","text":"<p>Traits to define basic_future types. </p> <p>Futures / Future options</p>"},{"location":"reference/libraries/group__future-options/#classes","title":"Classes","text":"Classes Description executor_opt Future option to identify the executor to be used by a future.  (struct) continuable_opt Future option to determine the future is continuable.  (struct) stoppable_opt Future option to determine the future is stoppable.  (struct) always_detached_opt Future option to determine the future is always_detached.  (struct) always_deferred_opt Future option to determine the future is always_deferred.  (struct) deferred_function_opt Type of the deferred function.  (struct) shared_opt Future option to determine the future is shared.  (struct)"},{"location":"reference/libraries/group__future-options/#types","title":"Types","text":"Member Types Definition future_options <code>typename detail::future_options_flat&lt; Args... &gt;::type</code> (using)"},{"location":"reference/libraries/group__future-options/#types_1","title":"Types","text":""},{"location":"reference/libraries/group__future-options/#using-future_options","title":"using future_options","text":"<p>Defined in header <code>&lt;futures/future_options.hpp&gt;</code> <pre><code>template &lt;class... Args&gt;\nusing future_options = typename detail::future_options_flat&lt; Args... &gt;::type;\n</code></pre></p> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__future-traits/","title":"Futures Library: Future Traits","text":"<p>Determine properties of future types. </p> <p>Futures / Future Traits</p>"},{"location":"reference/libraries/group__future-traits/#classes","title":"Classes","text":"Classes Description has_executor Determine if a future type has an executor.  (struct) has_ready_notifier Customization point to determine if a type has a ready notifier.  (struct) is_always_deferred Customization point to define a future as always deferred.  (struct) is_continuable Customization point to define future as supporting continuations.  (struct) is_future_like Customization point to determine if a type is a future type.  (struct) is_shared_future Customization point to determine if a type is a shared future type.  (struct)"},{"location":"reference/libraries/group__future-traits/#types","title":"Types","text":"Member Types Definition future_value Determine type the future object holds.  (using) future_value_t Determine type the future object holds.    (using) has_stop_token Customization point to define future as having a common stop token.  (using) is_stoppable Customization point to define future as stoppable.  (using)"},{"location":"reference/libraries/group__future-traits/#attributes","title":"Attributes","text":"Member Attributes Description has_executor_v Determine if a future type has an executor.    (public variable template) has_ready_notifier_v Customization point to determine if a type has a ready notifier.    (public variable template) has_stop_token_v Customization point to define future as having a common stop token.    (public variable template) is_always_deferred_v Customization point to define future as always deferred.  (public variable template) is_continuable_v Customization point to define future as supporting continuations.    (public variable template) is_future_like_v Customization point to determine if a type is a future type.    (public variable template) is_shared_future_v Customization point to determine if a type is a shared future type.    (public variable template) is_stoppable_v Customization point to define future as stoppable.    (public variable template)"},{"location":"reference/libraries/group__future-traits/#types_1","title":"Types","text":""},{"location":"reference/libraries/group__future-traits/#using-future_value","title":"using future_value","text":"<p>Defined in header <code>&lt;futures/traits/future_value.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing future_value = /* see below */;\n</code></pre></p> <p>Determine type the future object holds. </p> <p>Description</p> <p>Primary template handles non-future types</p> <p>Note: Not to be confused with continuation unwrapping </p>"},{"location":"reference/libraries/group__future-traits/#using-future_value_t","title":"using future_value_t","text":"<p>Defined in header <code>&lt;futures/traits/future_value.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing future_value_t = typename future_value&lt; T &gt;::type;\n</code></pre></p> <p>Determine type the future object holds.   </p> <p>Description</p> <p>Primary template handles non-future types</p> <p>Note: Not to be confused with continuation unwrapping   </p>"},{"location":"reference/libraries/group__future-traits/#using-has_stop_token","title":"using has_stop_token","text":"<p>Defined in header <code>&lt;futures/traits/has_stop_token.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing has_stop_token = /* see below */;\n</code></pre></p> <p>Customization point to define future as having a common stop token. </p> <p>Description</p> <p>Besides being stoppable, this trait identifies whether the future has a stop token, which means this token can be shared with other futures to create a common thread of futures that can be stopped with the same token.</p> <p>Unless the trait is specialized, a type is considered to have a stop token if it has the <code>get_stop_source()</code> and <code>get_stop_token()</code> member functions.</p> <p>See Also: </p> <ul> <li>is_stoppable </li> </ul>"},{"location":"reference/libraries/group__future-traits/#using-is_stoppable","title":"using is_stoppable","text":"<p>Defined in header <code>&lt;futures/traits/is_stoppable.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_stoppable = /* see below */;\n</code></pre></p> <p>Customization point to define future as stoppable. </p> <p>Description</p> <p>This trait identifies whether the future is stoppable, which means the future has a <code>request_stop</code> function to stop the underlying task.</p> <p>Unless the trait is specialized, a type is considered stoppable if it has the <code>request_stop()</code> member function.</p> <p>See Also: </p> <ul> <li>has_stop_token </li> </ul> <p>Note: Not all stoppable futures have stops token, which can be shared with other futures to create a common thread of futures that can be stopped with the same token.</p>"},{"location":"reference/libraries/group__future-traits/#attributes_1","title":"Attributes","text":""},{"location":"reference/libraries/group__future-traits/#variable-has_executor_v","title":"variable has_executor_v","text":"<p>Defined in header <code>&lt;futures/traits/has_executor.hpp&gt;</code> <pre><code>constexpr bool has_executor_v = has_executor&lt;T&gt;::value;\n</code></pre></p> <p>Determine if a future type has an executor.   </p>"},{"location":"reference/libraries/group__future-traits/#variable-has_ready_notifier_v","title":"variable has_ready_notifier_v","text":"<p>Defined in header <code>&lt;futures/traits/has_ready_notifier.hpp&gt;</code> <pre><code>constexpr bool has_ready_notifier_v = has_ready_notifier&lt;T&gt;::value;\n</code></pre></p> <p>Customization point to determine if a type has a ready notifier.   </p> <p>Description</p> <p>The ready notifier is an external handle used to identify when the future is ready.   </p>"},{"location":"reference/libraries/group__future-traits/#variable-has_stop_token_v","title":"variable has_stop_token_v","text":"<p>Defined in header <code>&lt;futures/traits/has_stop_token.hpp&gt;</code> <pre><code>constexpr bool has_stop_token_v = has_stop_token&lt;T&gt;::value;\n</code></pre></p> <p>Customization point to define future as having a common stop token.   </p> <p>Description</p> <p>Besides being stoppable, this trait identifies whether the future has a stop token, which means this token can be shared with other futures to create a common thread of futures that can be stopped with the same token.</p> <p>Unless the trait is specialized, a type is considered to have a stop token if it has the <code>get_stop_source()</code> and <code>get_stop_token()</code> member functions.</p> <p>See Also: </p> <ul> <li>is_stoppable   </li> </ul>"},{"location":"reference/libraries/group__future-traits/#variable-is_always_deferred_v","title":"variable is_always_deferred_v","text":"<p>Defined in header <code>&lt;futures/traits/is_always_deferred.hpp&gt;</code> <pre><code>constexpr bool is_always_deferred_v = is_always_deferred&lt;T&gt;::value;\n</code></pre></p> <p>Customization point to define future as always deferred. </p>"},{"location":"reference/libraries/group__future-traits/#variable-is_continuable_v","title":"variable is_continuable_v","text":"<p>Defined in header <code>&lt;futures/traits/is_continuable.hpp&gt;</code> <pre><code>constexpr bool is_continuable_v = is_continuable&lt;T&gt;::value;\n</code></pre></p> <p>Customization point to define future as supporting continuations.   </p>"},{"location":"reference/libraries/group__future-traits/#variable-is_future_like_v","title":"variable is_future_like_v","text":"<p>Defined in header <code>&lt;futures/traits/is_future_like.hpp&gt;</code> <pre><code>constexpr bool is_future_like_v = is_future_like&lt;T&gt;::value;\n</code></pre></p> <p>Customization point to determine if a type is a future type.   </p> <p>Description</p> <p>This trait identifies whether the type represents a future value.</p> <p>Unless the trait is specialized, a type is considered future-like if it has the <code>get()</code> member function.</p> <p>See Also: </p> <ul> <li>has_stop_token   </li> </ul>"},{"location":"reference/libraries/group__future-traits/#variable-is_shared_future_v","title":"variable is_shared_future_v","text":"<p>Defined in header <code>&lt;futures/traits/is_shared_future.hpp&gt;</code> <pre><code>constexpr bool is_shared_future_v = is_shared_future&lt;T&gt;::value;\n</code></pre></p> <p>Customization point to determine if a type is a shared future type.   </p>"},{"location":"reference/libraries/group__future-traits/#variable-is_stoppable_v","title":"variable is_stoppable_v","text":"<p>Defined in header <code>&lt;futures/traits/is_stoppable.hpp&gt;</code> <pre><code>constexpr bool is_stoppable_v = is_stoppable&lt;T&gt;::value;\n</code></pre></p> <p>Customization point to define future as stoppable.   </p> <p>Description</p> <p>This trait identifies whether the future is stoppable, which means the future has a <code>request_stop</code> function to stop the underlying task.</p> <p>Unless the trait is specialized, a type is considered stoppable if it has the <code>request_stop()</code> member function.</p> <p>See Also: </p> <ul> <li>has_stop_token   </li> </ul> <p>Note: Not all stoppable futures have stops token, which can be shared with other futures to create a common thread of futures that can be stopped with the same token.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__future-types/","title":"Futures Library: Future types","text":"<p>Basic future types. </p> <p>This module defines the basic_future template class, which can be used to define futures with a number of extensions. </p> <p>Futures / Future types</p>"},{"location":"reference/libraries/group__future-types/#classes","title":"Classes","text":"Classes Description basic_future A basic future type with custom features.  (class)"},{"location":"reference/libraries/group__future-types/#types","title":"Types","text":"Member Types Definition future_status Specifies state of a future.  (enum) future A simple future type similar to <code>std::future</code> (using) cfuture A future type with lazy continuations.  (using) jcfuture A future type with lazy continuations and stop tokens.  (using) dfuture A deferred future type.  (using) jdfuture A deferred stoppable future type.  (using) vfuture A future that simply holds a ready value.  (using) shared_future A simple std::shared_future.  (using) shared_cfuture A shared future type with lazy continuations.  (using) shared_jcfuture A shared future type with lazy continuations and stop tokens.  (using) shared_dfuture A shared future type with deferred task.  (using) shared_jdfuture A shared future type with deferred task and stop token.  (using) shared_vfuture A shared future that simply holds a ready value.  (using)"},{"location":"reference/libraries/group__future-types/#types_1","title":"Types","text":""},{"location":"reference/libraries/group__future-types/#enum-future_status","title":"enum future_status","text":"<p>Defined in header <code>&lt;futures/future_status.hpp&gt;</code> <pre><code>enum class future_status;\n</code></pre></p> Enumerator Value Description ready The operation state is ready. timeout The operation state did not become ready before specified timeout duration has passed. deferred The operation state contains a deferred function, so the result will be computed only when explicitly requested. <p>Specifies state of a future. </p> <p>Description</p> <p>Specifies state of a future as returned by <code>wait_for</code> and <code>wait_until</code> functions of basic_future. </p>"},{"location":"reference/libraries/group__future-types/#using-future","title":"using future","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>template &lt;class T, class Executor = default_executor_type&gt;\nusing future = basic_future&lt; T, future_options&lt; executor_opt&lt; Executor &gt; &gt; &gt;;\n</code></pre></p> <p>A simple future type similar to <code>std::future</code></p> <p>Description</p> <p>We should only use this future type for eager tasks that do not expect continuations. </p>"},{"location":"reference/libraries/group__future-types/#using-cfuture","title":"using cfuture","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>template &lt;class T, class Executor = default_executor_type&gt;\nusing cfuture = basic_future&lt; T, future_options&lt; executor_opt&lt; Executor &gt;, continuable_opt &gt; &gt;;\n</code></pre></p> <p>A future type with lazy continuations. </p> <p>Description</p> <p>Futures with lazy continuations contains a list of continuation tasks to be launched once the main task is complete.</p> <p>This is what a futures::async returns by default when the first function parameter is not a futures::stop_token. </p>"},{"location":"reference/libraries/group__future-types/#using-jcfuture","title":"using jcfuture","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>template &lt;class T, class Executor = default_executor_type&gt;\nusing jcfuture = basic_future&lt; T, future_options&lt; executor_opt&lt; Executor &gt;, continuable_opt, stoppable_opt &gt; &gt;;\n</code></pre></p> <p>A future type with lazy continuations and stop tokens. </p> <p>Description</p> <p>It's a quite common use case that we need a way to cancel futures and jcfuture provides us with an even better way to do that.</p> <p>This is what futures::async returns when the first function parameter is a futures::stop_token</p>"},{"location":"reference/libraries/group__future-types/#using-dfuture","title":"using dfuture","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>template &lt;class T, class Executor = default_executor_type&gt;\nusing dfuture = basic_future&lt; T, future_options&lt; executor_opt&lt; Executor &gt;, always_deferred_opt &gt; &gt;;\n</code></pre></p> <p>A deferred future type. </p> <p>Description</p> <p>This is a future type whose main task will only be launched when we wait for its results from another execution context.</p> <p>This is what the function schedule returns when the first task parameter is not a stop token.</p> <p>The state of this future stores the function to be run.</p> <p>This future type supports continuations without the continuation lists of continuable futures. </p>"},{"location":"reference/libraries/group__future-types/#using-jdfuture","title":"using jdfuture","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>template &lt;class T, class Executor = default_executor_type&gt;\nusing jdfuture = basic_future&lt; T, future_options&lt; executor_opt&lt; Executor &gt;, always_deferred_opt &gt; &gt;;\n</code></pre></p> <p>A deferred stoppable future type. </p> <p>Description</p> <p>This is a future type whose main task will only be launched when we wait for its results from another execution context.</p> <p>Once the task is launched, it can be requested to stop through its stop source.</p> <p>This is what the function schedule returns when the first task parameter is a stop token. </p>"},{"location":"reference/libraries/group__future-types/#using-vfuture","title":"using vfuture","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing vfuture = basic_future&lt; T, future_options&lt;&gt; &gt;;\n</code></pre></p> <p>A future that simply holds a ready value. </p> <p>Description</p> <p>This is the future type we use for constant values. This is the future type we usually return from functions such as make_ready_future.</p> <p>These futures have no support for associated executors, continuations, or deferred tasks.</p> <p>Like deferred futures, the operation state is stored inline. </p>"},{"location":"reference/libraries/group__future-types/#using-shared_future","title":"using shared_future","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>template &lt;class T, class Executor = default_executor_type&gt;\nusing shared_future = basic_future&lt; T, future_options&lt; executor_opt&lt; Executor &gt;, shared_opt &gt; &gt;;\n</code></pre></p> <p>A simple std::shared_future. </p> <p>Description</p> <p>This is what a futures::future::share() returns </p>"},{"location":"reference/libraries/group__future-types/#using-shared_cfuture","title":"using shared_cfuture","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>template &lt;class T, class Executor = default_executor_type&gt;\nusing shared_cfuture = basic_future&lt; T, future_options&lt; executor_opt&lt; Executor &gt;, continuable_opt, shared_opt &gt; &gt;;\n</code></pre></p> <p>A shared future type with lazy continuations. </p> <p>Description</p> <p>This is what a futures::cfuture::share() returns </p>"},{"location":"reference/libraries/group__future-types/#using-shared_jcfuture","title":"using shared_jcfuture","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>template &lt;class T, class Executor = default_executor_type&gt;\nusing shared_jcfuture = basic_future&lt; T, future_options&lt; executor_opt&lt; Executor &gt;, continuable_opt, stoppable_opt, shared_opt &gt; &gt;;\n</code></pre></p> <p>A shared future type with lazy continuations and stop tokens. </p> <p>Description</p> <p>This is what a futures::jcfuture::share() returns </p>"},{"location":"reference/libraries/group__future-types/#using-shared_dfuture","title":"using shared_dfuture","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>template &lt;class T, class Executor = default_executor_type&gt;\nusing shared_dfuture = basic_future&lt; T, future_options&lt; executor_opt&lt; Executor &gt;, always_deferred_opt, shared_opt &gt; &gt;;\n</code></pre></p> <p>A shared future type with deferred task. </p> <p>Description</p> <p>This is what a futures::dfuture::share() returns </p>"},{"location":"reference/libraries/group__future-types/#using-shared_jdfuture","title":"using shared_jdfuture","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>template &lt;class T, class Executor = default_executor_type&gt;\nusing shared_jdfuture = basic_future&lt; T, future_options&lt; executor_opt&lt; Executor &gt;, stoppable_opt, always_deferred_opt, shared_opt &gt; &gt;;\n</code></pre></p> <p>A shared future type with deferred task and stop token. </p> <p>Description</p> <p>This is what a futures::jdfuture::share() returns </p>"},{"location":"reference/libraries/group__future-types/#using-shared_vfuture","title":"using shared_vfuture","text":"<p>Defined in header <code>&lt;futures/future.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing shared_vfuture = basic_future&lt; T, future_options&lt; shared_opt &gt; &gt;;\n</code></pre></p> <p>A shared future that simply holds a ready value. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__futures/","title":"Futures Library","text":"<p>Basic future types and functions. </p> <p>The futures library provides components to create and launch futures: objects representing data that might not be available yet. </p>"},{"location":"reference/libraries/group__futures/#modules","title":"Modules","text":"Modules Description Future types Basic future types. Waiting Basic function to wait for futures. Error Basic future errors. Future options Traits to define basic_future types. Launch Function to launch and schedule future tasks. Shared State Shared state objects. Cancellation Future cancellation primitives. Future Traits Determine properties of future types. <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__launch/","title":"Futures Library: Launch","text":"<p>Function to launch and schedule future tasks. </p> <p>This module contains functions we can use to launch and schedule tasks. Tasks can be scheduled lazily instead of eagerly to avoid a race between the task and its dependencies.</p> <p>When tasks are scheduled eagerly, the function async provides an alternatives to launch tasks on specific executors instead of creating a new thread for each asynchronous task. </p> <p>Futures / Launch</p>"},{"location":"reference/libraries/group__launch/#functions","title":"Functions","text":"Member Functions Description async Launch an asynchronous task with the specified executor.  (function template) schedule Schedule an asynchronous task with the specified executor.  (function template)"},{"location":"reference/libraries/group__launch/#functions_1","title":"Functions","text":""},{"location":"reference/libraries/group__launch/#function-async","title":"function async","text":"<p>Defined in header <code>&lt;futures/launch.hpp&gt;</code></p> (1)<pre><code>template &lt;executor Executor, class Function, class... Args&gt;\nrequires /* see requirements below */\n/* see return type below */\nasync(Executor const &amp; ex, Function &amp;&amp; f, Args &amp;&amp;... args);\n</code></pre> (2)<pre><code>template &lt;class Function, class... Args&gt;\nrequires /* see requirements below */\n/* see return type below */\nasync(Function &amp;&amp; f, Args &amp;&amp;... args);\n</code></pre> <ol> <li>Launch an asynchronous task with the specified executor. </li> <li>Launch an asynchronous task with the default executor. </li> </ol> <p>Template Parameters</p> <ul> <li>Args - Arguments for the Function</li> <li>Executor - Executor from an execution context </li> <li>Function - A callable object </li> </ul> <p>Parameters</p> <ul> <li>args - Function arguments</li> <li>ex - Executor </li> <li>f - Function to execute </li> </ul> <p>Return value</p> <ul> <li>(1) A future object with the function results </li> <li>(2) An eager future object whose shared state refers to the task result. The type of this future object depends on the task. If the task expects a stop_token, the future will return a continuable, stoppable, eager future. Otherwise, the function will return a continuable eager future. </li> </ul> <p>Description</p> <p>This version of the async function will always use the specified executor instead of creating a new thread.</p> <p>If no executor is provided, then the function is run in a default executor created from the default thread pool. The default executor also ensures the function will not launch one thread per task.</p> <p>The task might accept a stop token as its first parameter, in which case the function returns a continuable and stoppable future type. Otherwise, this function returns a continuable future type.</p> <p>Example</p> <pre><code>auto f = async(ex, []() { return 2; });\nstd::cout &lt;&lt; f.get() &lt;&lt; std::endl; // 2\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>See Also</p> <ul> <li>basic_future</li> </ul>"},{"location":"reference/libraries/group__launch/#function-schedule","title":"function schedule","text":"<p>Defined in header <code>&lt;futures/launch.hpp&gt;</code></p> (1)<pre><code>template &lt;executor Executor, class Function, class... Args&gt;\nrequires /* see requirements below */\n/* see return type below */\nschedule(Executor const &amp; ex, Function &amp;&amp; f, Args &amp;&amp;... args);\n</code></pre> (2)<pre><code>template &lt;class Function, class... Args&gt;\nrequires /* see requirements below */\n/* see return type below */\nschedule(Function &amp;&amp; f, Args &amp;&amp;... args);\n</code></pre> <ol> <li>Schedule an asynchronous task with the specified executor. </li> <li>Schedule an asynchronous task with the default executor. </li> </ol> <p>Template Parameters</p> <ul> <li>Args - Arguments for the Function</li> <li>Executor - Executor from an execution context </li> <li>Function - A callable object </li> </ul> <p>Parameters</p> <ul> <li>args - Function arguments</li> <li>ex - Executor </li> <li>f - Function to execute </li> </ul> <p>Return value</p> <ul> <li>(1) A deferred future object whose shared state refers to the task result. The type of this future object depends on the task. If the task expects a stop_token, the future will return a stoppable deferred future. Otherwise, the function will return a deferred future. </li> <li>(2) A future object with the function results </li> </ul> <p>Description</p> <p>This function schedules a deferred future. The task will only be launched in the executor when some other execution context waits for the value associated to this future.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>See Also</p> <ul> <li>basic_future</li> </ul> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__partitioners/","title":"Algorithms Library: Partitioners","text":"<p>Algorithms / Partitioners</p>"},{"location":"reference/libraries/group__partitioners/#classes","title":"Classes","text":"Classes Description halve_partitioner A partitioner that always splits the problem in half.  (class) thread_partitioner A partitioner that always splits the problem when moving to new threads.  (class)"},{"location":"reference/libraries/group__partitioners/#types","title":"Types","text":"Member Types Definition default_partitioner Default partitioner used by parallel algorithms.  (using) is_partitioner_for Determine if P is a valid partitioner for the iterator range [I,S].  (using)"},{"location":"reference/libraries/group__partitioners/#functions","title":"Functions","text":"Member Functions Description make_grain_size Determine a reasonable minimum grain size depending on the number of elements in a sequence.  (function) make_default_partitioner Create an instance of the default partitioner with a reasonable grain size for <code>n</code> elements.  (function)"},{"location":"reference/libraries/group__partitioners/#attributes","title":"Attributes","text":"Member Attributes Description is_partitioner_for_v Determine if P is a valid partitioner for the iterator range [I,S].  (public variable template)"},{"location":"reference/libraries/group__partitioners/#types_1","title":"Types","text":""},{"location":"reference/libraries/group__partitioners/#using-default_partitioner","title":"using default_partitioner","text":"<p>Defined in header <code>&lt;futures/algorithm/partitioner/default_partitioner.hpp&gt;</code> <pre><code>using default_partitioner = /* see below */;\n</code></pre></p> <p>Default partitioner used by parallel algorithms. </p> <p>Description</p> <p>Its type and parameters might change </p>"},{"location":"reference/libraries/group__partitioners/#using-is_partitioner_for","title":"using is_partitioner_for","text":"<p>Defined in header <code>&lt;futures/algorithm/partitioner/partitioner_for.hpp&gt;</code> <pre><code>template &lt;class P, class I, class S = I&gt;\nusing is_partitioner_for = std::bool_constant&lt; partitioner_for&lt; P, I, S &gt; &gt;;\n</code></pre></p> <p>Determine if P is a valid partitioner for the iterator range [I,S]. </p>"},{"location":"reference/libraries/group__partitioners/#functions_1","title":"Functions","text":""},{"location":"reference/libraries/group__partitioners/#function-make_grain_size","title":"function make_grain_size","text":"<p>Defined in header <code>&lt;futures/algorithm/partitioner/default_partitioner.hpp&gt;</code></p> <pre><code>constexpr std::size_t\nmake_grain_size(std::size_t n);\n</code></pre> <p>Determine a reasonable minimum grain size depending on the number of elements in a sequence. </p> <p>Parameters</p> <ul> <li>n - Sequence size </li> </ul> <p>Return value</p> <p>The recommended grain size for a range of the specified size </p> <p>Description</p> <p>The grain size considers the number of threads available. It's never more than 2048 elements.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__partitioners/#function-make_default_partitioner","title":"function make_default_partitioner","text":"<p>Defined in header <code>&lt;futures/algorithm/partitioner/default_partitioner.hpp&gt;</code></p> (1)<pre><code>default_partitioner\nmake_default_partitioner(size_t n);\n</code></pre> (2)<pre><code>template &lt;std::input_iterator I, std::sentinel_for&lt; I &gt; S&gt;\ndefault_partitioner\nmake_default_partitioner(I first, S last);\n</code></pre> (3)<pre><code>template &lt;class R&gt;\nrequires is_input_range_v&lt;R&gt;\ndefault_partitioner\nmake_default_partitioner(R &amp;&amp; r);\n</code></pre> <ol> <li>Create an instance of the default partitioner with a reasonable grain size for <code>n</code> elements. </li> <li>Create an instance of the default partitioner with a reasonable grain for the range <code>first</code>, <code>last</code></li> <li>Create an instance of the default partitioner with a reasonable grain for the range <code>r</code></li> </ol> <p>Description</p> <p>The default partitioner type and parameters might change </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__partitioners/#attributes_1","title":"Attributes","text":""},{"location":"reference/libraries/group__partitioners/#variable-is_partitioner_for_v","title":"variable is_partitioner_for_v","text":"<p>Defined in header <code>&lt;futures/algorithm/partitioner/partitioner_for.hpp&gt;</code> <pre><code>constexpr bool is_partitioner_for_v = is_partitioner_for&lt;P, I, S&gt;::value;\n</code></pre></p> <p>Determine if P is a valid partitioner for the iterator range [I,S]. </p> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__shared__state/","title":"Futures Library: Shared State","text":"<p>Shared state objects. </p> <p>Futures / Shared State</p>"},{"location":"reference/libraries/group__shared__state/#classes","title":"Classes","text":"Classes Description packaged_task&lt; R(Args...), Options &gt; A packaged task that sets a shared state when done.  (class) promise_base Common members to promises of all types.  (class) promise A shared state that will later be acquired by a future type.  (class)"},{"location":"reference/libraries/group__shared__state/#functions","title":"Functions","text":"Member Functions Description swap Specializes the std::swap algorithm.  (function template)"},{"location":"reference/libraries/group__shared__state/#functions_1","title":"Functions","text":""},{"location":"reference/libraries/group__shared__state/#function-swap","title":"function swap","text":"<p>Defined in headers <code>&lt;futures/packaged_task.hpp&gt;</code>, <code>&lt;futures/promise.hpp&gt;</code></p> (1)<pre><code>template &lt;typename Signature&gt;\nvoid\nswap(\npackaged_task&lt; Signature &gt; &amp; l, packaged_task&lt; Signature &gt; &amp; r) noexcept;\n</code></pre> (2)<pre><code>template &lt;typename R&gt;\nvoid\nswap(promise&lt; R &gt; &amp; l, promise&lt; R &gt; &amp; r) noexcept;\n</code></pre> <ol> <li>Specializes the std::swap algorithm. </li> <li>Swap the value of two promises. </li> </ol> <p>Exception Safety</p> <p>Throws nothing.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__traits/","title":"Algorithms Library: Traits","text":"<p>Algorithms / Traits</p>"},{"location":"reference/libraries/group__traits/#types","title":"Types","text":"Member Types Definition common_comparison_category A type trait equivalent to the <code>std::equality_comparable</code> concept.  (using) common_comparison_category_t A type trait equivalent to the <code>std::equality_comparable</code> concept.    (using) is_assignable_from A type trait equivalent to the <code>std::assignable_from</code> concept.  (using) is_bidirectional_iterator A type trait equivalent to the <code>std::bidirectional_iterator</code> concept.  (using) is_constructible_from A type trait equivalent to the <code>std::constructible_from</code> concept.  (using) is_convertible_to A type trait equivalent to the <code>std::convertible_to</code> concept.  (using) is_copyable A type trait equivalent to the <code>std::copyable</code> concept.  (using) is_default_initializable A type trait equivalent to the <code>std::default_initializable</code> concept.  (using) is_derived_from A type trait equivalent to the <code>derived_from</code> concept.  (using) is_equality_comparable A type trait equivalent to the <code>std::equality_comparable</code> concept.  (using) is_equality_comparable_with A type trait equivalent to the <code>std::equality_comparable_with</code> concept.  (using) is_forward_iterator A type trait equivalent to the <code>std::forward_iterator</code> concept.  (using) is_incrementable A type trait equivalent to the <code>std::incrementable</code> concept.  (using) is_indirectly_binary_invocable Determine if a function can be invoke with the value type of both iterators.  (using) is_indirectly_readable A type trait equivalent to the <code>std::indirectly_readable</code> concept.  (using) is_indirectly_unary_invocable A type trait equivalent to the <code>std::indirectly_unary_invocable</code> concept.  (using) is_input_iterator A type trait equivalent to the <code>std::input_iterator</code> concept.  (using) is_input_or_output_iterator A type trait equivalent to the <code>std::is_input_or_output_iterator</code> concept.  (using) is_input_range A type trait equivalent to the <code>std::input_range</code> concept.  (using) is_movable A type trait equivalent to the <code>std::movable</code> concept.  (using) is_move_constructible A type trait equivalent to the <code>std::move_constructible</code> concept.  (using) is_random_access_iterator A type trait equivalent to the <code>std::random_access_iterator</code> concept.  (using) is_range A type trait equivalent to the <code>std::range</code> concept.  (using) is_regular A type trait equivalent to the <code>std::regular</code> concept.  (using) is_semiregular A type trait equivalent to the <code>std::semiregular</code> concept.  (using) is_sentinel_for A type trait equivalent to the <code>std::sentinel_for</code> concept.  (using) is_swappable A type trait equivalent to the <code>std::swappable</code> concept.  (using) is_three_way_comparable A type trait equivalent to the <code>std::equality_comparable</code> concept.  (using) is_three_way_comparable_with A type trait equivalent to the <code>std::equality_comparable_with</code> concept.  (using) is_totally_ordered A type trait equivalent to the <code>std::totally_ordered</code> concept.  (using) is_totally_ordered_with A type trait equivalent to the <code>std::totally_ordered_with</code> concept.  (using) is_weakly_incrementable A type trait equivalent to the <code>std::weakly_incrementable</code> concept.  (using) iter_difference A type trait equivalent to <code>std::iter_difference</code> (using) iter_difference_t A type trait equivalent to <code>std::iter_difference</code> (using) iter_reference A type trait equivalent to <code>std::iter_reference</code> (using) iter_reference_t A type trait equivalent to <code>std::iter_reference</code> (using) iter_rvalue_reference A type trait equivalent to <code>std::iter_rvalue_reference</code> (using) iter_rvalue_reference_t A type trait equivalent to <code>std::iter_rvalue_reference</code> (using) iter_value A type trait equivalent to <code>std::iter_value</code> (using) iter_value_t A type trait equivalent to <code>std::iter_value</code> (using) iterator A type trait equivalent to the <code>std::iterator</code> trait.  (using) iterator_t A type trait equivalent to the <code>std::iterator</code> trait.    (using) range_value A type trait equivalent to <code>std::range_value</code> (using) range_value_t A type trait equivalent to <code>std::range_value</code> (using) remove_cvref A type trait equivalent to <code>std::remove_cvref</code> (using) remove_cvref_t A type trait equivalent to <code>std::remove_cvref</code> (using)"},{"location":"reference/libraries/group__traits/#attributes","title":"Attributes","text":"Member Attributes Description is_assignable_from_v A type trait equivalent to the <code>std::assignable_from</code> concept.    (public variable template) is_bidirectional_iterator_v A type trait equivalent to the <code>std::bidirectional_iterator</code> concept.    (public variable template) is_constructible_from_v A type trait equivalent to the <code>std::constructible_from</code> concept.    (public variable template) is_convertible_to_v A type trait equivalent to the <code>std::convertible_to</code> concept.    (public variable template) is_copyable_v A type trait equivalent to the <code>std::copyable</code> concept.    (public variable template) is_default_initializable_v A type trait equivalent to the <code>std::default_initializable</code> concept.    (public variable template) is_derived_from_v A type trait equivalent to the <code>derived_from</code> concept.    (public variable template) is_equality_comparable_v A type trait equivalent to the <code>std::equality_comparable</code> concept.    (public variable template) is_equality_comparable_with_v A type trait equivalent to the <code>std::equality_comparable_with</code> concept.    (public variable template) is_forward_iterator_v A type trait equivalent to the <code>std::forward_iterator</code> concept.    (public variable template) is_incrementable_v A type trait equivalent to the <code>std::incrementable</code> concept.    (public variable template) is_indirectly_binary_invocable_v Determine if a function can be invoke with the value type of both iterators.    (public variable template) is_indirectly_readable_v A type trait equivalent to the <code>std::indirectly_readable</code> concept.    (public variable template) is_indirectly_unary_invocable_v A type trait equivalent to the <code>std::indirectly_unary_invocable</code> concept.    (public variable template) is_input_iterator_v A type trait equivalent to the <code>std::input_iterator</code> concept.    (public variable template) is_input_or_output_iterator_v A type trait equivalent to the <code>std::is_input_or_output_iterator</code> concept.    (public variable template) is_input_range_v A type trait equivalent to the <code>std::input_range</code> concept.    (public variable template) is_movable_v A type trait equivalent to the <code>std::movable</code> concept.    (public variable template) is_move_constructible_v A type trait equivalent to the <code>std::move_constructible</code> concept.    (public variable template) is_random_access_iterator_v A type trait equivalent to the <code>std::random_access_iterator</code> concept.    (public variable template) is_range_v A type trait equivalent to the <code>std::range</code> concept.    (public variable template) is_regular_v A type trait equivalent to the <code>std::regular</code> concept.    (public variable template) is_semiregular_v A type trait equivalent to the <code>std::semiregular</code> concept.    (public variable template) is_sentinel_for_v A type trait equivalent to the <code>std::sentinel_for</code> concept.    (public variable template) is_swappable_v A type trait equivalent to the <code>std::swappable</code> concept.    (public variable template) is_three_way_comparable_v A type trait equivalent to the <code>std::equality_comparable</code> concept.    (public variable template) is_three_way_comparable_with_v A type trait equivalent to the <code>std::equality_comparable_with</code> concept.    (public variable template) is_totally_ordered_v A type trait equivalent to the <code>std::totally_ordered</code> concept.    (public variable template) is_totally_ordered_with_v A type trait equivalent to the <code>std::totally_ordered_with</code> concept.    (public variable template) is_weakly_incrementable_v A type trait equivalent to the <code>std::weakly_incrementable</code> concept.    (public variable template)"},{"location":"reference/libraries/group__traits/#types_1","title":"Types","text":""},{"location":"reference/libraries/group__traits/#using-common_comparison_category","title":"using common_comparison_category","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/common_comparison_category.hpp&gt;</code> <pre><code>template &lt;class... Ts&gt;\nusing common_comparison_category = std::common_comparison_category&lt; Ts... &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::equality_comparable</code> concept. </p> <p>See Also: <code>std::three_way_comparable</code></p>"},{"location":"reference/libraries/group__traits/#using-common_comparison_category_t","title":"using common_comparison_category_t","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/common_comparison_category.hpp&gt;</code> <pre><code>template &lt;class... Ts&gt;\nusing common_comparison_category_t = typename common_comparison_category&lt; Ts... &gt;::type;\n</code></pre></p> <p>A type trait equivalent to the <code>std::equality_comparable</code> concept.   </p> <p>See Also: <code>std::three_way_comparable</code></p>"},{"location":"reference/libraries/group__traits/#using-is_assignable_from","title":"using is_assignable_from","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_assignable_from.hpp&gt;</code> <pre><code>template &lt;class LHS, class RHS&gt;\nusing is_assignable_from = std::bool_constant&lt; std::assignable_from&lt; LHS, RHS &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::assignable_from</code> concept. </p> <p>See Also: <code>std::assignable_from</code></p>"},{"location":"reference/libraries/group__traits/#using-is_bidirectional_iterator","title":"using is_bidirectional_iterator","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_bidirectional_iterator.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_bidirectional_iterator = std::bool_constant&lt; std::bidirectional_iterator&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::bidirectional_iterator</code> concept. </p> <p>See Also: <code>std::bidirectional_iterator</code></p>"},{"location":"reference/libraries/group__traits/#using-is_constructible_from","title":"using is_constructible_from","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_constructible_from.hpp&gt;</code> <pre><code>template &lt;class T, class... Args&gt;\nusing is_constructible_from = /* see below */;\n</code></pre></p> <p>A type trait equivalent to the <code>std::constructible_from</code> concept. </p> <p>See Also: <code>std::constructible_from</code></p>"},{"location":"reference/libraries/group__traits/#using-is_convertible_to","title":"using is_convertible_to","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_convertible_to.hpp&gt;</code> <pre><code>template &lt;class From, class To&gt;\nusing is_convertible_to = std::bool_constant&lt; std::convertible_to&lt; From, To &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::convertible_to</code> concept. </p> <p>See Also: <code>std::convertible_to</code></p>"},{"location":"reference/libraries/group__traits/#using-is_copyable","title":"using is_copyable","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_copyable.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_copyable = std::bool_constant&lt; std::copyable&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::copyable</code> concept. </p> <p>See Also: <code>std::copyable</code></p>"},{"location":"reference/libraries/group__traits/#using-is_default_initializable","title":"using is_default_initializable","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_default_initializable.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_default_initializable = std::bool_constant&lt; std::default_initializable&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::default_initializable</code> concept. </p> <p>See Also: <code>std::default_initializable</code></p>"},{"location":"reference/libraries/group__traits/#using-is_derived_from","title":"using is_derived_from","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_derived_from.hpp&gt;</code> <pre><code>template &lt;class Derived, class Base&gt;\nusing is_derived_from = std::bool_constant&lt; derived_from&lt; Derived, Base &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>derived_from</code> concept. </p> <p>See Also: <code>std::derived_from</code></p>"},{"location":"reference/libraries/group__traits/#using-is_equality_comparable","title":"using is_equality_comparable","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_equality_comparable.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_equality_comparable = std::bool_constant&lt; std::equality_comparable&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::equality_comparable</code> concept. </p> <p>See Also: <code>std::equality_comparable</code></p>"},{"location":"reference/libraries/group__traits/#using-is_equality_comparable_with","title":"using is_equality_comparable_with","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_equality_comparable_with.hpp&gt;</code> <pre><code>template &lt;class T, class U&gt;\nusing is_equality_comparable_with = std::bool_constant&lt; std::equality_comparable_with&lt; T, U &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::equality_comparable_with</code> concept. </p> <p>See Also: <code>std::equality_comparable_with</code></p>"},{"location":"reference/libraries/group__traits/#using-is_forward_iterator","title":"using is_forward_iterator","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_forward_iterator.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_forward_iterator = std::bool_constant&lt; std::forward_iterator&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::forward_iterator</code> concept. </p> <p>See Also: <code>std::forward_iterator</code></p>"},{"location":"reference/libraries/group__traits/#using-is_incrementable","title":"using is_incrementable","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_incrementable.hpp&gt;</code> <pre><code>template &lt;class I&gt;\nusing is_incrementable = std::bool_constant&lt; std::incrementable&lt; I &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::incrementable</code> concept. </p> <p>See Also: <code>std::incrementable</code></p>"},{"location":"reference/libraries/group__traits/#using-is_indirectly_binary_invocable","title":"using is_indirectly_binary_invocable","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_indirectly_binary_invocable.hpp&gt;</code> <pre><code>template &lt;class F, class I1, class I2&gt;\nusing is_indirectly_binary_invocable = /* see below */;\n</code></pre></p> <p>Determine if a function can be invoke with the value type of both iterators. </p>"},{"location":"reference/libraries/group__traits/#using-is_indirectly_readable","title":"using is_indirectly_readable","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_indirectly_readable.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_indirectly_readable = std::bool_constant&lt; std::indirectly_readable&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::indirectly_readable</code> concept. </p> <p>See Also: <code>std::indirectly_readable</code></p>"},{"location":"reference/libraries/group__traits/#using-is_indirectly_unary_invocable","title":"using is_indirectly_unary_invocable","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_indirectly_unary_invocable.hpp&gt;</code> <pre><code>template &lt;class F, class I&gt;\nusing is_indirectly_unary_invocable = std::bool_constant&lt; std::indirectly_unary_invocable&lt; F, I &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::indirectly_unary_invocable</code> concept. </p> <p>See Also: <code>std::indirectly_unary_invocable</code></p>"},{"location":"reference/libraries/group__traits/#using-is_input_iterator","title":"using is_input_iterator","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_input_iterator.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_input_iterator = std::bool_constant&lt; std::input_iterator&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::input_iterator</code> concept. </p> <p>See Also: <code>std::input_iterator</code></p>"},{"location":"reference/libraries/group__traits/#using-is_input_or_output_iterator","title":"using is_input_or_output_iterator","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_input_or_output_iterator.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_input_or_output_iterator = std::bool_constant&lt; std::is_input_or_output_iterator&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::is_input_or_output_iterator</code> concept. </p> <p>See Also: <code>std::is_input_or_output_iterator</code></p>"},{"location":"reference/libraries/group__traits/#using-is_input_range","title":"using is_input_range","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_input_range.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_input_range = std::bool_constant&lt; std::is_input_range&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::input_range</code> concept. </p> <p>See Also: <code>std::ranges::input_range</code></p>"},{"location":"reference/libraries/group__traits/#using-is_movable","title":"using is_movable","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_movable.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_movable = std::bool_constant&lt; std::movable&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::movable</code> concept. </p> <p>See Also: <code>std::movable</code></p>"},{"location":"reference/libraries/group__traits/#using-is_move_constructible","title":"using is_move_constructible","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_move_constructible.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_move_constructible = std::bool_constant&lt; std::move_constructible&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::move_constructible</code> concept. </p> <p>See Also: <code>std::move_constructible</code></p>"},{"location":"reference/libraries/group__traits/#using-is_random_access_iterator","title":"using is_random_access_iterator","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_random_access_iterator.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_random_access_iterator = std::bool_constant&lt; std::random_access_iterator&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::random_access_iterator</code> concept. </p> <p>See Also: <code>std::random_access_iterator</code></p>"},{"location":"reference/libraries/group__traits/#using-is_range","title":"using is_range","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_range.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_range = std::bool_constant&lt; std::range&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::range</code> concept. </p> <p>See Also: <code>std::ranges::range</code></p>"},{"location":"reference/libraries/group__traits/#using-is_regular","title":"using is_regular","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_regular.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_regular = std::bool_constant&lt; std::regular&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::regular</code> concept. </p> <p>See Also: <code>std::regular</code></p>"},{"location":"reference/libraries/group__traits/#using-is_semiregular","title":"using is_semiregular","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_semiregular.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_semiregular = std::bool_constant&lt; std::semiregular&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::semiregular</code> concept. </p> <p>See Also: <code>std::semiregular</code></p>"},{"location":"reference/libraries/group__traits/#using-is_sentinel_for","title":"using is_sentinel_for","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_sentinel_for.hpp&gt;</code> <pre><code>template &lt;class S, class I&gt;\nusing is_sentinel_for = std::bool_constant&lt; std::sentinel_for&lt; S, I &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::sentinel_for</code> concept. </p> <p>See Also: <code>std::sentinel_for</code></p>"},{"location":"reference/libraries/group__traits/#using-is_swappable","title":"using is_swappable","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_swappable.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_swappable = std::bool_constant&lt; std::swappable&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::swappable</code> concept. </p> <p>See Also: <code>std::swappable</code></p>"},{"location":"reference/libraries/group__traits/#using-is_three_way_comparable","title":"using is_three_way_comparable","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_three_way_comparable.hpp&gt;</code> <pre><code>template &lt;class T, class Cat = std::partial_ordering&gt;\nusing is_three_way_comparable = std::bool_constant&lt; std::three_way_comparable&lt; T, Cat &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::equality_comparable</code> concept. </p> <p>See Also: <code>std::three_way_comparable</code></p>"},{"location":"reference/libraries/group__traits/#using-is_three_way_comparable_with","title":"using is_three_way_comparable_with","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_three_way_comparable_with.hpp&gt;</code> <pre><code>template &lt;class T, class U, class Cat = std::partial_ordering&gt;\nusing is_three_way_comparable_with = std::bool_constant&lt; std::three_way_comparable_with&lt; T, U, Cat &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::equality_comparable_with</code> concept. </p> <p>See Also: <code>std::three_way_comparable</code></p>"},{"location":"reference/libraries/group__traits/#using-is_totally_ordered","title":"using is_totally_ordered","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_totally_ordered.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing is_totally_ordered = std::bool_constant&lt; std::totally_ordered&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::totally_ordered</code> concept. </p> <p>See Also: <code>std::totally_ordered</code></p>"},{"location":"reference/libraries/group__traits/#using-is_totally_ordered_with","title":"using is_totally_ordered_with","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_totally_ordered_with.hpp&gt;</code> <pre><code>template &lt;class T, class U&gt;\nusing is_totally_ordered_with = std::bool_constant&lt; std::totally_ordered_with&lt; T, U &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::totally_ordered_with</code> concept. </p> <p>See Also: <code>std::totally_ordered</code></p>"},{"location":"reference/libraries/group__traits/#using-is_weakly_incrementable","title":"using is_weakly_incrementable","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_weakly_incrementable.hpp&gt;</code> <pre><code>template &lt;class I&gt;\nusing is_weakly_incrementable = std::bool_constant&lt; std::weakly_incrementable&lt; T &gt; &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::weakly_incrementable</code> concept. </p> <p>See Also: <code>std::weakly_incrementable</code></p>"},{"location":"reference/libraries/group__traits/#using-iter_difference","title":"using iter_difference","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/iter_difference.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing iter_difference = std::iter_difference;\n</code></pre></p> <p>A type trait equivalent to <code>std::iter_difference</code></p> <p>See Also: <code>std::iter_difference</code></p>"},{"location":"reference/libraries/group__traits/#using-iter_difference_t","title":"using iter_difference_t","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/iter_difference.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing iter_difference_t = typename iter_difference&lt; T &gt;::type;\n</code></pre></p> <p>A type trait equivalent to <code>std::iter_difference</code></p> <p>See Also: <code>std::iter_difference</code></p>"},{"location":"reference/libraries/group__traits/#using-iter_reference","title":"using iter_reference","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/iter_reference.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing iter_reference = std::iter_reference;\n</code></pre></p> <p>A type trait equivalent to <code>std::iter_reference</code></p> <p>See Also: <code>std::iter_reference</code></p>"},{"location":"reference/libraries/group__traits/#using-iter_reference_t","title":"using iter_reference_t","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/iter_reference.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing iter_reference_t = typename iter_reference&lt; T &gt;::type;\n</code></pre></p> <p>A type trait equivalent to <code>std::iter_reference</code></p> <p>See Also: <code>std::iter_reference</code></p>"},{"location":"reference/libraries/group__traits/#using-iter_rvalue_reference","title":"using iter_rvalue_reference","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/iter_rvalue_reference.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing iter_rvalue_reference = std::iter_rvalue_reference;\n</code></pre></p> <p>A type trait equivalent to <code>std::iter_rvalue_reference</code></p> <p>See Also: <code>std::iter_rvalue_reference</code></p>"},{"location":"reference/libraries/group__traits/#using-iter_rvalue_reference_t","title":"using iter_rvalue_reference_t","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/iter_rvalue_reference.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing iter_rvalue_reference_t = typename iter_rvalue_reference&lt; T &gt;::type;\n</code></pre></p> <p>A type trait equivalent to <code>std::iter_rvalue_reference</code></p> <p>See Also: <code>std::iter_rvalue_reference</code></p>"},{"location":"reference/libraries/group__traits/#using-iter_value","title":"using iter_value","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/iter_value.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing iter_value = std::iter_value;\n</code></pre></p> <p>A type trait equivalent to <code>std::iter_value</code></p> <p>See Also: <code>std::iter_value</code></p>"},{"location":"reference/libraries/group__traits/#using-iter_value_t","title":"using iter_value_t","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/iter_value.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing iter_value_t = typename iter_value&lt; T &gt;::type;\n</code></pre></p> <p>A type trait equivalent to <code>std::iter_value</code></p> <p>See Also: <code>std::iter_value</code></p>"},{"location":"reference/libraries/group__traits/#using-iterator","title":"using iterator","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/iterator.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing iterator = std::iterator&lt; R &gt;;\n</code></pre></p> <p>A type trait equivalent to the <code>std::iterator</code> trait. </p> <p>See Also: <code>std::ranges::iterator_t</code></p>"},{"location":"reference/libraries/group__traits/#using-iterator_t","title":"using iterator_t","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/iterator.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing iterator_t = typename iterator&lt; T &gt;::type;\n</code></pre></p> <p>A type trait equivalent to the <code>std::iterator</code> trait.   </p> <p>See Also: <code>std::ranges::iterator_t</code></p>"},{"location":"reference/libraries/group__traits/#using-range_value","title":"using range_value","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/range_value.hpp&gt;</code> <pre><code>template &lt;class R&gt;\nusing range_value = std::range_value&lt; R &gt;;\n</code></pre></p> <p>A type trait equivalent to <code>std::range_value</code></p> <p>See Also: <code>std::ranges::iterator_t</code></p>"},{"location":"reference/libraries/group__traits/#using-range_value_t","title":"using range_value_t","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/range_value.hpp&gt;</code> <pre><code>template &lt;class R&gt;\nusing range_value_t = typename range_value&lt; R &gt;::type;\n</code></pre></p> <p>A type trait equivalent to <code>std::range_value</code></p> <p>See Also: <code>std::ranges::iterator_t</code></p>"},{"location":"reference/libraries/group__traits/#using-remove_cvref","title":"using remove_cvref","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/remove_cvref.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing remove_cvref = std::remove_cvref&lt; T &gt;;\n</code></pre></p> <p>A type trait equivalent to <code>std::remove_cvref</code></p> <p>See Also: <code>std::remove_cvref</code></p>"},{"location":"reference/libraries/group__traits/#using-remove_cvref_t","title":"using remove_cvref_t","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/remove_cvref.hpp&gt;</code> <pre><code>template &lt;class T&gt;\nusing remove_cvref_t = typename remove_cvref&lt; T &gt;::type;\n</code></pre></p> <p>A type trait equivalent to <code>std::remove_cvref</code></p> <p>See Also: <code>std::remove_cvref</code></p>"},{"location":"reference/libraries/group__traits/#attributes_1","title":"Attributes","text":""},{"location":"reference/libraries/group__traits/#variable-is_assignable_from_v","title":"variable is_assignable_from_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_assignable_from.hpp&gt;</code> <pre><code>constexpr bool is_assignable_from_v = is_assignable_from&lt;LHS, RHS&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::assignable_from</code> concept.   </p> <p>See Also: <code>std::assignable_from</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_bidirectional_iterator_v","title":"variable is_bidirectional_iterator_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_bidirectional_iterator.hpp&gt;</code> <pre><code>constexpr bool is_bidirectional_iterator_v = is_bidirectional_iterator&lt;\nI&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::bidirectional_iterator</code> concept.   </p> <p>See Also: <code>std::bidirectional_iterator</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_constructible_from_v","title":"variable is_constructible_from_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_constructible_from.hpp&gt;</code> <pre><code>constexpr bool is_constructible_from_v = is_constructible_from&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::constructible_from</code> concept.   </p> <p>See Also: <code>std::constructible_from</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_convertible_to_v","title":"variable is_convertible_to_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_convertible_to.hpp&gt;</code> <pre><code>constexpr bool is_convertible_to_v = is_convertible_to&lt;From, To&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::convertible_to</code> concept.   </p> <p>See Also: <code>std::convertible_to</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_copyable_v","title":"variable is_copyable_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_copyable.hpp&gt;</code> <pre><code>constexpr bool is_copyable_v = is_copyable&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::copyable</code> concept.   </p> <p>See Also: <code>std::copyable</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_default_initializable_v","title":"variable is_default_initializable_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_default_initializable.hpp&gt;</code> <pre><code>constexpr bool is_default_initializable_v = is_default_initializable&lt;\nT&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::default_initializable</code> concept.   </p> <p>See Also: <code>std::default_initializable</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_derived_from_v","title":"variable is_derived_from_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_derived_from.hpp&gt;</code> <pre><code>constexpr bool is_derived_from_v = is_derived_from&lt;Derived, Base&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>derived_from</code> concept.   </p> <p>See Also: <code>std::derived_from</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_equality_comparable_v","title":"variable is_equality_comparable_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_equality_comparable.hpp&gt;</code> <pre><code>constexpr bool is_equality_comparable_v = is_equality_comparable&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::equality_comparable</code> concept.   </p> <p>See Also: <code>std::equality_comparable</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_equality_comparable_with_v","title":"variable is_equality_comparable_with_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_equality_comparable_with.hpp&gt;</code> <pre><code>constexpr bool is_equality_comparable_with_v = is_equality_comparable_with&lt;T, U&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::equality_comparable_with</code> concept.   </p> <p>See Also: <code>std::equality_comparable_with</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_forward_iterator_v","title":"variable is_forward_iterator_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_forward_iterator.hpp&gt;</code> <pre><code>constexpr bool is_forward_iterator_v = is_forward_iterator&lt;I&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::forward_iterator</code> concept.   </p> <p>See Also: <code>std::forward_iterator</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_incrementable_v","title":"variable is_incrementable_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_incrementable.hpp&gt;</code> <pre><code>constexpr bool is_incrementable_v = is_incrementable&lt;I&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::incrementable</code> concept.   </p> <p>See Also: <code>std::incrementable</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_indirectly_binary_invocable_v","title":"variable is_indirectly_binary_invocable_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_indirectly_binary_invocable.hpp&gt;</code> <pre><code>constexpr bool is_indirectly_binary_invocable_v = is_indirectly_binary_invocable&lt;F, I1, I2&gt;::value;\n</code></pre></p> <p>Determine if a function can be invoke with the value type of both iterators.   </p>"},{"location":"reference/libraries/group__traits/#variable-is_indirectly_readable_v","title":"variable is_indirectly_readable_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_indirectly_readable.hpp&gt;</code> <pre><code>constexpr bool is_indirectly_readable_v = is_indirectly_readable&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::indirectly_readable</code> concept.   </p> <p>See Also: <code>std::indirectly_readable</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_indirectly_unary_invocable_v","title":"variable is_indirectly_unary_invocable_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_indirectly_unary_invocable.hpp&gt;</code> <pre><code>constexpr bool is_indirectly_unary_invocable_v = is_indirectly_unary_invocable&lt;F, I&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::indirectly_unary_invocable</code> concept.   </p> <p>See Also: <code>std::indirectly_unary_invocable</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_input_iterator_v","title":"variable is_input_iterator_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_input_iterator.hpp&gt;</code> <pre><code>constexpr bool is_input_iterator_v = is_input_iterator&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::input_iterator</code> concept.   </p> <p>See Also: <code>std::input_iterator</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_input_or_output_iterator_v","title":"variable is_input_or_output_iterator_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_input_or_output_iterator.hpp&gt;</code> <pre><code>constexpr bool is_input_or_output_iterator_v = is_input_or_output_iterator&lt;\nT&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::is_input_or_output_iterator</code> concept.   </p> <p>See Also: <code>std::is_input_or_output_iterator</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_input_range_v","title":"variable is_input_range_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_input_range.hpp&gt;</code> <pre><code>bool constexpr is_input_range_v = is_input_range&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::input_range</code> concept.   </p> <p>See Also: <code>std::ranges::input_range</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_movable_v","title":"variable is_movable_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_movable.hpp&gt;</code> <pre><code>constexpr bool is_movable_v = is_movable&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::movable</code> concept.   </p> <p>See Also: <code>std::movable</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_move_constructible_v","title":"variable is_move_constructible_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_move_constructible.hpp&gt;</code> <pre><code>constexpr bool is_move_constructible_v = is_move_constructible&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::move_constructible</code> concept.   </p> <p>See Also: <code>std::move_constructible</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_random_access_iterator_v","title":"variable is_random_access_iterator_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_random_access_iterator.hpp&gt;</code> <pre><code>constexpr bool is_random_access_iterator_v = is_random_access_iterator&lt;\nI&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::random_access_iterator</code> concept.   </p> <p>See Also: <code>std::random_access_iterator</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_range_v","title":"variable is_range_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_range.hpp&gt;</code> <pre><code>constexpr bool is_range_v = is_range&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::range</code> concept.   </p> <p>See Also: <code>std::ranges::range</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_regular_v","title":"variable is_regular_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_regular.hpp&gt;</code> <pre><code>constexpr bool is_regular_v = is_regular&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::regular</code> concept.   </p> <p>See Also: <code>std::regular</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_semiregular_v","title":"variable is_semiregular_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_semiregular.hpp&gt;</code> <pre><code>constexpr bool is_semiregular_v = is_semiregular&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::semiregular</code> concept.   </p> <p>See Also: <code>std::semiregular</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_sentinel_for_v","title":"variable is_sentinel_for_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_sentinel_for.hpp&gt;</code> <pre><code>constexpr bool is_sentinel_for_v = is_sentinel_for&lt;S, I&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::sentinel_for</code> concept.   </p> <p>See Also: <code>std::sentinel_for</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_swappable_v","title":"variable is_swappable_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_swappable.hpp&gt;</code> <pre><code>constexpr bool is_swappable_v = is_swappable&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::swappable</code> concept.   </p> <p>See Also: <code>std::swappable</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_three_way_comparable_v","title":"variable is_three_way_comparable_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_three_way_comparable.hpp&gt;</code> <pre><code>constexpr bool is_three_way_comparable_v = is_three_way_comparable&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::equality_comparable</code> concept.   </p> <p>See Also: <code>std::three_way_comparable</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_three_way_comparable_with_v","title":"variable is_three_way_comparable_with_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_three_way_comparable_with.hpp&gt;</code> <pre><code>constexpr bool is_three_way_comparable_with_v = is_three_way_comparable_with&lt;T, U&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::equality_comparable_with</code> concept.   </p> <p>See Also: <code>std::three_way_comparable</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_totally_ordered_v","title":"variable is_totally_ordered_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_totally_ordered.hpp&gt;</code> <pre><code>constexpr bool is_totally_ordered_v = is_totally_ordered&lt;T&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::totally_ordered</code> concept.   </p> <p>See Also: <code>std::totally_ordered</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_totally_ordered_with_v","title":"variable is_totally_ordered_with_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_totally_ordered_with.hpp&gt;</code> <pre><code>constexpr bool is_totally_ordered_with_v = is_totally_ordered_with&lt;T, U&gt;::\nvalue;\n</code></pre></p> <p>A type trait equivalent to the <code>std::totally_ordered_with</code> concept.   </p> <p>See Also: <code>std::totally_ordered</code></p>"},{"location":"reference/libraries/group__traits/#variable-is_weakly_incrementable_v","title":"variable is_weakly_incrementable_v","text":"<p>Defined in header <code>&lt;futures/algorithm/traits/is_weakly_incrementable.hpp&gt;</code> <pre><code>constexpr bool is_weakly_incrementable_v = is_weakly_incrementable&lt;I&gt;::value;\n</code></pre></p> <p>A type trait equivalent to the <code>std::weakly_incrementable</code> concept.   </p> <p>See Also: <code>std::weakly_incrementable</code></p> <p>Updated on 2023-01-19</p>"},{"location":"reference/libraries/group__waiting/","title":"Futures Library: Waiting","text":"<p>Basic function to wait for futures. </p> <p>This module defines a variety of auxiliary functions to wait for futures. </p> <p>Futures / Waiting</p>"},{"location":"reference/libraries/group__waiting/#functions","title":"Functions","text":"Member Functions Description await Wait for future types and retrieve their values.  (function template) wait_for_all Wait for a sequence of futures to be ready.  (function template) wait_for_all_for Wait for a sequence of futures to be ready.  (function template) wait_for_all_until Wait for a sequence of futures to be ready.  (function template) wait_for_any Wait for any future in a sequence to be ready.  (function template) wait_for_any_for Wait for any future in a sequence to be ready.  (function template) wait_for_any_until Wait for any future in a sequence to be ready.  (function template)"},{"location":"reference/libraries/group__waiting/#functions_1","title":"Functions","text":""},{"location":"reference/libraries/group__waiting/#function-await","title":"function await","text":"<p>Defined in header <code>&lt;futures/await.hpp&gt;</code></p> (1)<pre><code>template &lt;future_like Future&gt;\n/* see return type below */\nawait(Future &amp;&amp; f);\n</code></pre> (2)<pre><code>template &lt;future_like... Futures&gt;\n/* see return type below */\nawait(Futures &amp;&amp;... fs);\n</code></pre> <ol> <li>Wait for future types and retrieve their values. </li> <li>Wait for future types and retrieve their values as a tuple. </li> </ol> <p>Parameters</p> <ul> <li>f - A future object</li> <li>fs - Future objects</li> </ul> <p>Return value</p> <p>The result of the future object </p> <p>Description</p> <p>This syntax is most useful for cases where we are immediately requesting the future result.</p> <p>The function also makes the syntax optionally a little closer to languages such as javascript.</p> <p>Notes</p> <p>This function only participates in overload resolution if all types are futures.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__waiting/#function-wait_for_all","title":"function wait_for_all","text":"<p>Defined in header <code>&lt;futures/wait_for_all.hpp&gt;</code></p> (1)<pre><code>template &lt;std::input_iterator Iterator&gt;\nrequires future_like&lt;std::iter_value_t&lt;Iterator&gt;&gt;\nvoid\nwait_for_all(Iterator first, Iterator last);\n</code></pre> (2)<pre><code>template &lt;std::ranges::range Range&gt;\nrequires future_like&lt;std::ranges::range_value_t&lt;Range&gt;&gt;\nvoid\nwait_for_all(Range &amp;&amp; r);\n</code></pre> (3)<pre><code>template &lt;future_like... Fs&gt;\nvoid\nwait_for_all(Fs &amp;&amp;... fs);\n</code></pre> (4)<pre><code>template &lt;class Tuple&gt;\nrequires /* see requirements below */\nvoid\nwait_for_all(Tuple &amp;&amp; t);\n</code></pre> <p>Wait for a sequence of futures to be ready. </p> <p>Template Parameters</p> <ul> <li>Fs - A list of future types </li> <li>Iterator - Iterator type in a range of futures </li> <li>Range - A range of futures type </li> </ul> <p>Parameters</p> <ul> <li>first - Iterator to the first element in the range </li> <li>fs - A list of future objects </li> <li>last - Iterator to one past the last element in the range </li> <li>r - Range of futures </li> </ul> <p>Description</p> <p>(1) This function waits for all futures in the range [<code>first</code>, <code>last</code>) to be ready. It simply waits iteratively for each of the futures to be ready.</p> <p>(2) This function waits for all futures in the range <code>r</code> to be ready. It simply waits iteratively for each of the futures to be ready.</p> <p>(3) This function waits for all specified futures <code>fs</code>... to be ready.</p> <p>It creates a compile-time fixed-size data structure to store references to all of the futures and then waits for each of the futures to be ready.</p> <p>Notes</p> <p>This function is adapted from boost::wait_for_all</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>See Also</p> <ul> <li>boost.thread wait_for_all</li> </ul>"},{"location":"reference/libraries/group__waiting/#function-wait_for_all_for","title":"function wait_for_all_for","text":"<p>Defined in header <code>&lt;futures/wait_for_all.hpp&gt;</code></p> (1)<pre><code>template &lt;class Iterator, class Rep, class Period&gt;\nrequires is_future_like_v&lt;iter_value_t&lt;Iterator&gt;&gt;\nfuture_status\nwait_for_all_for(\nstd::chrono::duration&lt; Rep, Period &gt; const &amp; timeout_duration, Iterator first, Iterator last);\n</code></pre> (2)<pre><code>template &lt;class Range, class Rep, class Period&gt;\nrequires is_range_v&lt;Range&gt; &amp;&amp; is_future_like_v&lt;range_value_t&lt;Range&gt;&gt;\nfuture_status\nwait_for_all_for(\nstd::chrono::duration&lt; Rep, Period &gt; const &amp; timeout_duration, Range &amp;&amp; r);\n</code></pre> (3)<pre><code>template &lt;future_like... Fs, class Rep, class Period&gt;\nfuture_status\nwait_for_all_for(\nstd::chrono::duration&lt; Rep, Period &gt; const &amp; timeout_duration, Fs &amp;&amp;... fs);\n</code></pre> (4)<pre><code>template &lt;class Tuple, class Rep, class Period&gt;\nrequires /* see requirements below */\nfuture_status\nwait_for_all_for(\nstd::chrono::duration&lt; Rep, Period &gt; const &amp; timeout_duration, Tuple &amp;&amp; t);\n</code></pre> <p>Wait for a sequence of futures to be ready. </p> <p>Template Parameters</p> <ul> <li>Fs - Range of futures </li> <li>Iterator - Iterator type in a range of futures </li> <li>Period - Duration Period </li> <li>Range - Range of futures </li> <li>Rep - Duration Rep </li> <li>Tuple - Tuple of futures </li> </ul> <p>Parameters</p> <ul> <li>first - Iterator to the first element in the range </li> <li>fs - Future objects</li> <li>last - Iterator to one past the last element in the range</li> <li>r - Range of futures</li> <li>t - Tuple of futures</li> <li>timeout_duration - Time to wait for </li> </ul> <p>Return value</p> <p><code>future_status::ready</code> if all futures got ready. <code>future_status::timeout</code> otherwise. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__waiting/#function-wait_for_all_until","title":"function wait_for_all_until","text":"<p>Defined in header <code>&lt;futures/wait_for_all.hpp&gt;</code></p> (1)<pre><code>template &lt;std::input_iterator Iterator, class Clock, class Duration&gt;\nrequires future_like&lt;std::iter_value_t&lt;Iterator&gt;&gt;\nfuture_status\nwait_for_all_until(\nstd::chrono::time_point&lt; Clock, Duration &gt; const &amp; timeout_time, Iterator first, Iterator last);\n</code></pre> (2)<pre><code>template &lt;std::ranges::range Range, class Clock, class Duration&gt;\nrequires future_like&lt;range_value_t&lt;Range&gt;&gt;\nfuture_status\nwait_for_all_until(\nstd::chrono::time_point&lt; Clock, Duration &gt; const &amp; timeout_time, Range &amp;&amp; r);\n</code></pre> (3)<pre><code>template &lt;future_like... Fs, class Clock, class Duration&gt;\nfuture_status\nwait_for_all_until(\nstd::chrono::time_point&lt; Clock, Duration &gt; const &amp; timeout_time, Fs &amp;&amp;... fs);\n</code></pre> (4)<pre><code>template &lt;class Tuple, class Clock, class Duration&gt;\nrequires /* see requirements below */\nfuture_status\nwait_for_all_until(\nstd::chrono::time_point&lt; Clock, Duration &gt; const &amp; timeout_time, Tuple &amp;&amp; t);\n</code></pre> <p>Wait for a sequence of futures to be ready. </p> <p>Template Parameters</p> <ul> <li>Clock - Time point clock </li> <li>Duration - Time point duration </li> <li>Fs - Future objects </li> <li>Iterator - Iterator type in a range of futures </li> <li>Range - Range of futures </li> <li>Tuple - Tuple of futures </li> </ul> <p>Parameters</p> <ul> <li>first - Iterator to the first element in the range </li> <li>fs - Future objects</li> <li>last - Iterator to one past the last element in the range</li> <li>r - Range of futures</li> <li>t - Tuple of futures</li> <li>timeout_time - Limit time point </li> </ul> <p>Return value</p> <p><code>future_status::ready</code> if all futures got ready. <code>future_status::timeout</code> otherwise. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__waiting/#function-wait_for_any","title":"function wait_for_any","text":"<p>Defined in header <code>&lt;futures/wait_for_any.hpp&gt;</code></p> (1)<pre><code>template &lt;std::input_iterator Iterator&gt;\nrequires future_like&lt;iter_value_t&lt;Iterator&gt;&gt;\nIterator\nwait_for_any(Iterator first, Iterator last);\n</code></pre> (2)<pre><code>template &lt;std::ranges::range Range&gt;\nrequires future_like&lt;range_value_t&lt;Range&gt;&gt;\niterator_t&lt; Range &gt;\nwait_for_any(Range &amp;&amp; r);\n</code></pre> (3)<pre><code>template &lt;future_like... Fs&gt;\nstd::size_t\nwait_for_any(Fs &amp;&amp;... fs);\n</code></pre> (4)<pre><code>template &lt;class Tuple&gt;\nrequires /* see requirements below */\nstd::size_t\nwait_for_any(Tuple &amp;&amp; t);\n</code></pre> <ol> <li>Wait for any future in a sequence to be ready. </li> <li>Wait for any future in a sequence to be ready. </li> <li>Wait for any future in a sequence to be ready. </li> <li>Wait for any future in a tuple to be ready. </li> </ol> <p>Template Parameters</p> <ul> <li>Fs - A list of future types </li> <li>Iterator - Iterator type in a range of futures </li> </ul> <p>Parameters</p> <ul> <li>first - Iterator to the first element in the range </li> <li>fs - A list of future objects </li> <li>last - Iterator to one past the last element in the range </li> <li>r - Range of futures </li> <li>t - A list of future objects</li> </ul> <p>Return value</p> <ul> <li>(1) Index of the first future that got ready </li> <li>(2) Iterator to the first future that got ready </li> </ul> <p>Description</p> <p>(1) This function waits for any future in the range [<code>first</code>, <code>last</code>) to be ready.</p> <p>Unlike wait_for_all, this function requires special data structures to allow that to happen without blocking.</p> <p>For disjunctions, we have few options:</p> <ul> <li>If the input futures support external notifiers:<ul> <li>Attach continuations to notify when a task is over</li> </ul> </li> <li>If the input futures do not have lazy continuations:<ul> <li>Polling in a busy loop until one of the futures is ready</li> <li>Polling with exponential backoffs until one of the futures is ready</li> <li>Launching n continuation tasks that set a promise when one of the futures is ready</li> <li>Hybrids, usually polling for short tasks and launching threads for other tasks</li> </ul> </li> <li>If the input futures are mixed in regards to lazy continuations:<ul> <li>Mix the strategies above, depending on each input future</li> </ul> </li> </ul> <p>If the thresholds for these strategies are reasonable, this should be efficient for futures with or without lazy continuations.</p> <p>(2) This function waits for any future in the range <code>r</code> to be ready. This function requires special data structures to allow that to happen without blocking.</p> <p>(3) This function waits for all specified futures <code>fs</code>... to be ready.</p> <p>(4) This function waits for all specified futures <code>fs</code>... to be ready.</p> <p>Notes</p> <p>This function is adapted from <code>boost::wait_for_any</code></p> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>See Also</p> <ul> <li>boost.thread wait_for_any</li> </ul>"},{"location":"reference/libraries/group__waiting/#function-wait_for_any_for","title":"function wait_for_any_for","text":"<p>Defined in header <code>&lt;futures/wait_for_any.hpp&gt;</code></p> (1)<pre><code>template &lt;std::input_iterator Iterator, class Rep, class Period&gt;\nrequires future_like&lt;iter_value_t&lt;Iterator&gt;&gt;\nIterator\nwait_for_any_for(\nstd::chrono::duration&lt; Rep, Period &gt; const &amp; timeout_duration, Iterator first, Iterator last);\n</code></pre> (2)<pre><code>template &lt;std::ranges::range Range, class Rep, class Period&gt;\nrequires future_like&lt;std::ranges::range_value_t&lt;Range&gt;&gt;\niterator_t&lt; Range &gt;\nwait_for_any_for(\nstd::chrono::duration&lt; Rep, Period &gt; const &amp; timeout_duration, Range &amp;&amp; r);\n</code></pre> (3)<pre><code>template &lt;future_like... Fs, class Rep, class Period&gt;\nstd::size_t\nwait_for_any_for(\nstd::chrono::duration&lt; Rep, Period &gt; const &amp; timeout_duration, Fs &amp;&amp;... fs);\n</code></pre> (4)<pre><code>template &lt;class Tuple, class Rep, class Period&gt;\nrequires /* see requirements below */\nstd::size_t\nwait_for_any_for(\nstd::chrono::duration&lt; Rep, Period &gt; const &amp; timeout_duration, Tuple &amp;&amp; t);\n</code></pre> <p>Wait for any future in a sequence to be ready. </p> <p>Template Parameters</p> <ul> <li>Fs - Future types </li> <li>Iterator - Iterator type in a range of futures </li> <li>Period - Duration Period </li> <li>Range - Iterator type in a range of futures </li> <li>Rep - Duration Rep </li> <li>Tuple - Tuple of futures </li> </ul> <p>Parameters</p> <ul> <li>first - Iterator to the first element in the range </li> <li>fs - Future objects</li> <li>last - Iterator to one past the last element in the range</li> <li>r - Range of futures</li> <li>t - tuple of futures</li> <li>timeout_duration - Time to wait for </li> </ul> <p>Return value</p> <ul> <li>(1) Index of the future which got ready </li> <li>(2) Iterator to the future which got ready </li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/libraries/group__waiting/#function-wait_for_any_until","title":"function wait_for_any_until","text":"<p>Defined in header <code>&lt;futures/wait_for_any.hpp&gt;</code></p> (1)<pre><code>template &lt;std::input_iterator Iterator, class Clock, class Duration&gt;\nrequires future_like&lt;iter_value_t&lt;Iterator&gt;&gt;\nIterator\nwait_for_any_until(\nstd::chrono::time_point&lt; Clock, Duration &gt; const &amp; timeout_time, Iterator first, Iterator last);\n</code></pre> (2)<pre><code>template &lt;std::ranges::range Range, class Clock, class Duration&gt;\nrequires future_like&lt;range_value_t&lt;Range&gt;&gt;\niterator_t&lt; Range &gt;\nwait_for_any_until(\nstd::chrono::time_point&lt; Clock, Duration &gt; const &amp; timeout_time, Range &amp;&amp; r);\n</code></pre> (3)<pre><code>template &lt;future_like... Fs, class Clock, class Duration&gt;\nstd::size_t\nwait_for_any_until(\nstd::chrono::time_point&lt; Clock, Duration &gt; const &amp; timeout_time, Fs &amp;&amp;... fs);\n</code></pre> (4)<pre><code>template &lt;class Tuple, class Clock, class Duration&gt;\nrequires /* see requirements below */\nstd::size_t\nwait_for_any_until(\nstd::chrono::time_point&lt; Clock, Duration &gt; const &amp; timeout_time, Tuple &amp;&amp; t);\n</code></pre> <p>Wait for any future in a sequence to be ready. </p> <p>Template Parameters</p> <ul> <li>Clock - Time point clock </li> <li>Duration - Time point duration </li> <li>Fs - Future types </li> <li>Iterator - Iterator type in a range of futures </li> <li>Range - Range of futures </li> <li>Tuple - Tuple of future types </li> </ul> <p>Parameters</p> <ul> <li>first - Iterator to the first element in the range </li> <li>fs - Future objects</li> <li>last - Iterator to one past the last element in the range</li> <li>r - Range of futures</li> <li>t - Tuple of future objects</li> <li>timeout_time - Limit time point </li> </ul> <p>Return value</p> <ul> <li>(1) Index of the future which got ready </li> <li>(2) Iterator to the future which got ready </li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>Updated on 2023-01-19</p>"},{"location":"reference/namespaces/","title":"Namespaces","text":"Namespace futures Main library namespace. (namespace) <p>Updated on 2023-01-19</p>"},{"location":"reference/namespaces/namespacefutures/","title":"futures","text":"<p>Main library namespace. </p>"},{"location":"reference/namespaces/namespacefutures/#classes","title":"Classes","text":"Classes Description all_of_functor Functor representing the overloads for the all_of function.  (class) always_deferred_opt Future option to determine the future is always_deferred.  (struct) always_detached_opt Future option to determine the future is always_detached.  (struct) any_executor An wrapper that type erases any non-heterogeneous executor.  (class) any_of_functor Functor representing the overloads for the any_of function.  (class) basic_future A basic future type with custom features.  (class) binary_invoke_algorithm_functor Binary algorithm overloads.  (class) broken_promise The state owner got destroyed before the promise has been fulfilled.  (class) compare_three_way Function object for performing comparisons.  (struct) continuable_opt Future option to determine the future is continuable.  (struct) count_functor Functor representing the overloads for the count function.  (class) count_if_functor Functor representing the overloads for the count_if function.  (class) deferred_function_opt Type of the deferred function.  (struct) equal_to A C++17 functor equivalent to the C++20 std::ranges::equal_to.  (struct) error Class for errors in the futures library.  (class) executor_opt Future option to identify the executor to be used by a future.  (struct) find_functor Functor representing the overloads for the find function.  (class) find_if_functor Functor representing the overloads for the find_if function.  (class) find_if_not_functor Functor representing the overloads for the find_if_not function.  (class) for_each_functor Functor representing the overloads for the for_each function.  (class) future_already_retrieved Attempted to retrieve a unique future twice.  (class) future_deferred Invalid operation on deferred future.  (class) future_uninitialized The future hasn't been initialized yet.  (class) greater A C++17 functor equivalent to the C++20 std::ranges::greater.  (struct) greater_equal A C++17 functor equivalent to the C++20 std::ranges::greater_equal.  (struct) halve_partitioner A partitioner that always splits the problem in half.  (class) has_executor Determine if a future type has an executor.  (struct) has_ready_notifier Customization point to determine if a type has a ready notifier.  (struct) inline_executor An executor that runs anything inline.  (class) is_always_deferred Customization point to define a future as always deferred.  (struct) is_continuable Customization point to define future as supporting continuations.  (struct) is_execution_policy Determines whether T is a standard or implementation-defined execution policy type.  (struct) is_future_like Customization point to determine if a type is a future type.  (struct) is_shared_future Customization point to determine if a type is a shared future type.  (struct) less A C++17 functor equivalent to the C++20 std::ranges::less.  (struct) less_equal A C++17 functor equivalent to the C++20 std::ranges::less_equal.  (struct) new_thread_executor An executor that runs anything in a new thread, like std::async does.  (class) no_state There is no shared state we can access.  (class) none_of_functor Functor representing the overloads for the none_of function.  (class) nostopstate_t Empty struct to initialize a stop_source without a shared stop state.  (struct) not_equal_to A C++17 functor equivalent to the C++20 std::ranges::not_equal_to.  (struct) packaged_task&lt; R(Args...), Options &gt; A packaged task that sets a shared state when done.  (class) packaged_task_uninitialized The packaged task hasn't been initialized yet.  (class) promise A shared state that will later be acquired by a future type.  (class) promise_already_satisfied Promise has already been fulfilled.  (class) promise_base Common members to promises of all types.  (class) promise_uninitialized The promised hasn't been initialized yet.  (class) reduce_functor Functor representing the overloads for the reduce function.  (class) shared_opt Future option to determine the future is shared.  (struct) stop_source Object used to issue a stop request.  (class) stop_token Token to check if a stop request has been made.  (class) stoppable_opt Future option to determine the future is stoppable.  (struct) thread_partitioner A partitioner that always splits the problem when moving to new threads.  (class) thread_pool A thread pool with the specified number of threads.  (class) unary_invoke_algorithm_functor Overloads for unary invoke algorithms.  (class) value_cmp_algorithm_functor Value-compare algorithm overloads.  (class) when_all_future Proxy future class referring to a conjunction of futures from when_all.  (class) when_any_future Future object referring to the result of a disjunction of futures.  (class) when_any_result Result type for when_any_future objects.  (struct)"},{"location":"reference/namespaces/namespacefutures/#types","title":"Types","text":"Member Types Definition partial_ordering the result type of 3-way comparison that supports all 6 operators,  (using) strong_ordering the result type of 3-way comparison that supports all 6 operators and is substitutable  (using) weak_ordering the result type of 3-way comparison that supports all 6 operators, does  (using)"},{"location":"reference/namespaces/namespacefutures/#functions","title":"Functions","text":"Member Functions Description execute Submits a task for execution.  (function template)"},{"location":"reference/namespaces/namespacefutures/#attributes","title":"Attributes","text":"Member Attributes Description execution_policy Determines if a type is an execution_policy.  (public concept template) partitioner_for Determines if a type is an partitioner.  (public concept template) execution_context The invocable archetype task is a regular functor.  (public concept template) executor_for Determines if a type is an executor for the specified type of task.  (public concept template) executor The invocable archetype task is a regular functor.  (public concept template) future_like A class is considered future-like when 1) it specializes the <code>is_future_like</code> trait to indicate it is a future type, or 2) it has the a <code>get()</code> function to obtain its future value.  (public concept template) execution_context_for Determines if a type is an execution context for the a task type.  (public concept template)"},{"location":"reference/namespaces/namespacefutures/#types_1","title":"Types","text":""},{"location":"reference/namespaces/namespacefutures/#using-partial_ordering","title":"using partial_ordering","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/partial_ordering.hpp&gt;</code> <pre><code>using partial_ordering = std::partial_ordering;\n</code></pre></p> <p>the result type of 3-way comparison that supports all 6 operators, </p>"},{"location":"reference/namespaces/namespacefutures/#using-strong_ordering","title":"using strong_ordering","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/strong_ordering.hpp&gt;</code> <pre><code>using strong_ordering = std::strong_ordering;\n</code></pre></p> <p>the result type of 3-way comparison that supports all 6 operators and is substitutable </p>"},{"location":"reference/namespaces/namespacefutures/#using-weak_ordering","title":"using weak_ordering","text":"<p>Defined in header <code>&lt;futures/algorithm/compare/weak_ordering.hpp&gt;</code> <pre><code>using weak_ordering = std::weak_ordering;\n</code></pre></p> <p>the result type of 3-way comparison that supports all 6 operators, does </p>"},{"location":"reference/namespaces/namespacefutures/#functions_1","title":"Functions","text":""},{"location":"reference/namespaces/namespacefutures/#function-execute","title":"function execute","text":"<p>Defined in header <code>&lt;futures/executor/execute.hpp&gt;</code></p> (1)<pre><code>template &lt;class F, executor_for&lt; F &gt; E&gt;\nvoid\nexecute(E const &amp; ex, F &amp;&amp; f);\n</code></pre> (2)<pre><code>template &lt;class F, execution_context_for&lt; F &gt; C&gt;\nrequires /* see requirements below */\nvoid\nexecute(C &amp; ctx, F &amp;&amp; f);\n</code></pre> <ol> <li>Submits a task for execution. </li> <li>Submits a task for execution on an execution context. </li> </ol> <p>Parameters</p> <ul> <li>ctx - The target execution context </li> <li>ex - The target executor </li> <li>f - The task </li> </ul> <p>Description</p> <p>(1) This free function submits a task for execution using the specified executor.</p> <p>Unlike the <code>execute</code> member function of executors, this function identifies and interoperates with other executor types, such as Asio executors. If an execution context is provided, its executor is retrived and used instead.</p> <p>(2) This free function submits a task for execution using the specified execution context.</p> <p>This is a convenience function that extracts the executor from the context and uses it instead.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacefutures/#attributes_1","title":"Attributes","text":""},{"location":"reference/namespaces/namespacefutures/#concept-execution_policy","title":"concept execution_policy","text":"<p>Defined in header <code>&lt;futures/algorithm/policies.hpp&gt;</code> <pre><code>template&lt;class E&gt;\nconcept execution_policy = is_execution_policy_v&lt;E&gt;;\n</code></pre></p> <p>Determines if a type is an execution_policy. </p>"},{"location":"reference/namespaces/namespacefutures/#concept-partitioner_for","title":"concept partitioner_for","text":"<p>Defined in header <code>&lt;futures/algorithm/partitioner/partitioner_for.hpp&gt;</code> <pre><code>template&lt;class P, class I, class S I&gt;\nconcept partitioner_for = std::input_iterator&lt;I&gt; &amp;&amp; std::sentinel_for&lt;S, I&gt;\n&amp;&amp; std::invocable&lt;P, I, S&gt;;\n</code></pre></p> <p>Determines if a type is an partitioner. </p>"},{"location":"reference/namespaces/namespacefutures/#concept-execution_context","title":"concept execution_context","text":"<p>Defined in header <code>&lt;futures/executor/is_execution_context.hpp&gt;</code> <pre><code>template&lt;class C&gt;\nconcept execution_context = execution_context_for&lt;C, __invocable_archetype__ &gt;;\n</code></pre></p> <p>The invocable archetype task is a regular functor. </p> <p>Description</p> <p>This means this trait should work for any execution context that supports non-heterogeneous tasks. </p>"},{"location":"reference/namespaces/namespacefutures/#concept-executor_for","title":"concept executor_for","text":"<p>Defined in header <code>&lt;futures/executor/is_executor.hpp&gt;</code> <pre><code>template&lt;class E, class F&gt;\nconcept executor_for = requires(E e, F f) { e.execute(f); };\n</code></pre></p> <p>Determines if a type is an executor for the specified type of task. </p>"},{"location":"reference/namespaces/namespacefutures/#concept-executor","title":"concept executor","text":"<p>Defined in header <code>&lt;futures/executor/is_executor.hpp&gt;</code> <pre><code>template&lt;class E&gt;\nconcept executor = executor_for&lt;E, __invocable_archetype__ &gt;;\n</code></pre></p> <p>The invocable archetype task is a regular functor. </p> <p>Description</p> <p>Determines if a type is an executor for invocable types.</p> <p>Determines if a type is an execution context for invocable types.</p> <p>This means this trait should work for any executor that supports non-heterogeneous tasks. </p>"},{"location":"reference/namespaces/namespacefutures/#concept-future_like","title":"concept future_like","text":"<p>Defined in header <code>&lt;futures/traits/is_future_like.hpp&gt;</code> <pre><code>template&lt;class T&gt;\nconcept future_like = is_future_like_v&lt;std::decay_t&lt;T&gt;&gt;;\n</code></pre></p> <p>A class is considered future-like when 1) it specializes the <code>is_future_like</code> trait to indicate it is a future type, or 2) it has the a <code>get()</code> function to obtain its future value. </p> <p>Template Parameters</p> <ul> <li>T - The type being tested for conformance to the future_like concept. </li> </ul> <p>Description</p> <p>An object with the common members of a future.</p> <p>This allows algorithms to interoperate with future types from other libraries.</p>"},{"location":"reference/namespaces/namespacefutures/#concept-execution_context_for","title":"concept execution_context_for","text":"<p>Defined in header <code>&lt;futures/executor/is_execution_context.hpp&gt;</code> <pre><code>template&lt;class C, class F&gt;\nconcept execution_context_for = requires(C ctx, F f) {\n{ ctx.get_executor() } -&gt; executor_for&lt;F&gt;;\n};\n</code></pre></p> <p>Determines if a type is an execution context for the a task type. </p> <p>Updated on 2023-01-19</p>"}]}